// Code generated by go generate; DO NOT EDIT.
// This file was generated by docframe document element generator
package docframepb


func (Table *ProtoTable) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_Table{
			Table: Table,
		},
		Children: nodeChildren,
	}

	return node
}

func (TableConfig *ProtoTableConfig) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableConfig{
			TableConfig: TableConfig,
		},
		Children: nodeChildren,
	}

	return node
}

func (TableContentGroup *ProtoTableContentGroup) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableContentGroup{
			TableContentGroup: TableContentGroup,
		},
		Children: nodeChildren,
	}

	return node
}

func (TableContentGroupConfig *ProtoTableContentGroupConfig) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableContentGroupConfig{
			TableContentGroupConfig: TableContentGroupConfig,
		},
		Children: nodeChildren,
	}

	return node
}

func (TableRow *ProtoTableRow) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableRow{
			TableRow: TableRow,
		},
		Children: nodeChildren,
	}

	return node
}

func (TableRowConfig *ProtoTableRowConfig) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableRowConfig{
			TableRowConfig: TableRowConfig,
		},
		Children: nodeChildren,
	}

	return node
}

func (TableCell *ProtoTableCell) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableCell{
			TableCell: TableCell,
		},
		Children: nodeChildren,
	}

	return node
}

func (TableCellConfig *ProtoTableCellConfig) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableCellConfig{
			TableCellConfig: TableCellConfig,
		},
		Children: nodeChildren,
	}

	return node
}

