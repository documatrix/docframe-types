// Code generated by go generate; DO NOT EDIT.
// This file was generated by docframe document element generator
package docframepb


func (table *ProtoTable) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_Table{
			Table: table,
		},
		Children: nodeChildren,
	}

	return node
}

func (tableConfig *ProtoTableConfig) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableConfig{
			TableConfig: tableConfig,
		},
		Children: nodeChildren,
	}

	return node
}

func (tableContentGroup *ProtoTableContentGroup) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableContentGroup{
			TableContentGroup: tableContentGroup,
		},
		Children: nodeChildren,
	}

	return node
}

func (tableContentGroupConfig *ProtoTableContentGroupConfig) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableContentGroupConfig{
			TableContentGroupConfig: tableContentGroupConfig,
		},
		Children: nodeChildren,
	}

	return node
}

func (tableRow *ProtoTableRow) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableRow{
			TableRow: tableRow,
		},
		Children: nodeChildren,
	}

	return node
}

func (tableRowConfig *ProtoTableRowConfig) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableRowConfig{
			TableRowConfig: tableRowConfig,
		},
		Children: nodeChildren,
	}

	return node
}

func (tableCell *ProtoTableCell) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableCell{
			TableCell: tableCell,
		},
		Children: nodeChildren,
	}

	return node
}

func (tableCellConfig *ProtoTableCellConfig) ToNode(children ...Message) *Node {
	nodeChildren := make([]*Node, len(children))
	for i, c := range children {
		nodeChildren[i] = c.ToNode()
	}

	node := &Node{
		Object: &Node_TableCellConfig{
			TableCellConfig: tableCellConfig,
		},
		Children: nodeChildren,
	}

	return node
}

