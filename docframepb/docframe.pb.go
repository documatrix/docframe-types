// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: build/docframe.proto

package docframepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtoSPBMode int32

const (
	ProtoSPBMode_NONE        ProtoSPBMode = 0
	ProtoSPBMode_SUPERSCRIPT ProtoSPBMode = 1
	ProtoSPBMode_SUBSCRIPT   ProtoSPBMode = 2
)

// Enum value maps for ProtoSPBMode.
var (
	ProtoSPBMode_name = map[int32]string{
		0: "NONE",
		1: "SUPERSCRIPT",
		2: "SUBSCRIPT",
	}
	ProtoSPBMode_value = map[string]int32{
		"NONE":        0,
		"SUPERSCRIPT": 1,
		"SUBSCRIPT":   2,
	}
)

func (x ProtoSPBMode) Enum() *ProtoSPBMode {
	p := new(ProtoSPBMode)
	*p = x
	return p
}

func (x ProtoSPBMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoSPBMode) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[0].Descriptor()
}

func (ProtoSPBMode) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[0]
}

func (x ProtoSPBMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoSPBMode.Descriptor instead.
func (ProtoSPBMode) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{0}
}

type ProtoRuleStyle int32

const (
	ProtoRuleStyle_DUMMY_RULE_STYLE ProtoRuleStyle = 0 // dummy is needed here, because otherwise protoc command produces error
	ProtoRuleStyle_SOLID            ProtoRuleStyle = 1
	ProtoRuleStyle_SPARSE_SHADING   ProtoRuleStyle = 2
	ProtoRuleStyle_MEDIUM_SHADING   ProtoRuleStyle = 3
	ProtoRuleStyle_DENSE_SHADING    ProtoRuleStyle = 4
	ProtoRuleStyle_LIGHT_DOTTED     ProtoRuleStyle = 5
	ProtoRuleStyle_MEDIUM_DOTTED    ProtoRuleStyle = 6
	ProtoRuleStyle_HEAVY_DOTTED     ProtoRuleStyle = 7
	ProtoRuleStyle_LIGHT_DASHED     ProtoRuleStyle = 8
	ProtoRuleStyle_MEDIUM_DASHED    ProtoRuleStyle = 9
	ProtoRuleStyle_HEAVY_DASHED     ProtoRuleStyle = 10
	ProtoRuleStyle_DASH_PATTERN     ProtoRuleStyle = 11
)

// Enum value maps for ProtoRuleStyle.
var (
	ProtoRuleStyle_name = map[int32]string{
		0:  "DUMMY_RULE_STYLE",
		1:  "SOLID",
		2:  "SPARSE_SHADING",
		3:  "MEDIUM_SHADING",
		4:  "DENSE_SHADING",
		5:  "LIGHT_DOTTED",
		6:  "MEDIUM_DOTTED",
		7:  "HEAVY_DOTTED",
		8:  "LIGHT_DASHED",
		9:  "MEDIUM_DASHED",
		10: "HEAVY_DASHED",
		11: "DASH_PATTERN",
	}
	ProtoRuleStyle_value = map[string]int32{
		"DUMMY_RULE_STYLE": 0,
		"SOLID":            1,
		"SPARSE_SHADING":   2,
		"MEDIUM_SHADING":   3,
		"DENSE_SHADING":    4,
		"LIGHT_DOTTED":     5,
		"MEDIUM_DOTTED":    6,
		"HEAVY_DOTTED":     7,
		"LIGHT_DASHED":     8,
		"MEDIUM_DASHED":    9,
		"HEAVY_DASHED":     10,
		"DASH_PATTERN":     11,
	}
)

func (x ProtoRuleStyle) Enum() *ProtoRuleStyle {
	p := new(ProtoRuleStyle)
	*p = x
	return p
}

func (x ProtoRuleStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoRuleStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[1].Descriptor()
}

func (ProtoRuleStyle) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[1]
}

func (x ProtoRuleStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoRuleStyle.Descriptor instead.
func (ProtoRuleStyle) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{1}
}

type ProtoMeasureType int32

const (
	ProtoMeasureType_PT      ProtoMeasureType = 0
	ProtoMeasureType_CM      ProtoMeasureType = 1
	ProtoMeasureType_MM      ProtoMeasureType = 2
	ProtoMeasureType_IN      ProtoMeasureType = 3
	ProtoMeasureType_PERCENT ProtoMeasureType = 4
	ProtoMeasureType_PX      ProtoMeasureType = 5
)

// Enum value maps for ProtoMeasureType.
var (
	ProtoMeasureType_name = map[int32]string{
		0: "PT",
		1: "CM",
		2: "MM",
		3: "IN",
		4: "PERCENT",
		5: "PX",
	}
	ProtoMeasureType_value = map[string]int32{
		"PT":      0,
		"CM":      1,
		"MM":      2,
		"IN":      3,
		"PERCENT": 4,
		"PX":      5,
	}
)

func (x ProtoMeasureType) Enum() *ProtoMeasureType {
	p := new(ProtoMeasureType)
	*p = x
	return p
}

func (x ProtoMeasureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoMeasureType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[2].Descriptor()
}

func (ProtoMeasureType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[2]
}

func (x ProtoMeasureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoMeasureType.Descriptor instead.
func (ProtoMeasureType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{2}
}

type ProtoAdvancedIllustrationAreaTextFlowType int32

const (
	ProtoAdvancedIllustrationAreaTextFlowType_DO_NOT_USE_AT_ALL ProtoAdvancedIllustrationAreaTextFlowType = 0
	ProtoAdvancedIllustrationAreaTextFlowType_AROUND            ProtoAdvancedIllustrationAreaTextFlowType = 1
	ProtoAdvancedIllustrationAreaTextFlowType_NO_FLOW           ProtoAdvancedIllustrationAreaTextFlowType = 2
	ProtoAdvancedIllustrationAreaTextFlowType_FOREGROUND        ProtoAdvancedIllustrationAreaTextFlowType = 3
	ProtoAdvancedIllustrationAreaTextFlowType_BACKGROUND        ProtoAdvancedIllustrationAreaTextFlowType = 4
)

// Enum value maps for ProtoAdvancedIllustrationAreaTextFlowType.
var (
	ProtoAdvancedIllustrationAreaTextFlowType_name = map[int32]string{
		0: "DO_NOT_USE_AT_ALL",
		1: "AROUND",
		2: "NO_FLOW",
		3: "FOREGROUND",
		4: "BACKGROUND",
	}
	ProtoAdvancedIllustrationAreaTextFlowType_value = map[string]int32{
		"DO_NOT_USE_AT_ALL": 0,
		"AROUND":            1,
		"NO_FLOW":           2,
		"FOREGROUND":        3,
		"BACKGROUND":        4,
	}
)

func (x ProtoAdvancedIllustrationAreaTextFlowType) Enum() *ProtoAdvancedIllustrationAreaTextFlowType {
	p := new(ProtoAdvancedIllustrationAreaTextFlowType)
	*p = x
	return p
}

func (x ProtoAdvancedIllustrationAreaTextFlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoAdvancedIllustrationAreaTextFlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[3].Descriptor()
}

func (ProtoAdvancedIllustrationAreaTextFlowType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[3]
}

func (x ProtoAdvancedIllustrationAreaTextFlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoAdvancedIllustrationAreaTextFlowType.Descriptor instead.
func (ProtoAdvancedIllustrationAreaTextFlowType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{3}
}

type ProtoColorType int32

const (
	ProtoColorType_DUMMY_COLOR_TYPE ProtoColorType = 0 // dummy is needed here, because otherwise protoc command produces error
	ProtoColorType_RGB              ProtoColorType = 3
	ProtoColorType_CMYK             ProtoColorType = 4
)

// Enum value maps for ProtoColorType.
var (
	ProtoColorType_name = map[int32]string{
		0: "DUMMY_COLOR_TYPE",
		3: "RGB",
		4: "CMYK",
	}
	ProtoColorType_value = map[string]int32{
		"DUMMY_COLOR_TYPE": 0,
		"RGB":              3,
		"CMYK":             4,
	}
)

func (x ProtoColorType) Enum() *ProtoColorType {
	p := new(ProtoColorType)
	*p = x
	return p
}

func (x ProtoColorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoColorType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[4].Descriptor()
}

func (ProtoColorType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[4]
}

func (x ProtoColorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoColorType.Descriptor instead.
func (ProtoColorType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{4}
}

type ProtoHorizontalAlignment int32

const (
	ProtoHorizontalAlignment_ALIGN_LEFT           ProtoHorizontalAlignment = 0
	ProtoHorizontalAlignment_ALIGN_CENTER         ProtoHorizontalAlignment = 1
	ProtoHorizontalAlignment_ALIGN_RIGHT          ProtoHorizontalAlignment = 2
	ProtoHorizontalAlignment_ALIGN_JUSTIFY        ProtoHorizontalAlignment = 3
	ProtoHorizontalAlignment_ALIGN_FULL_JUSTIFY   ProtoHorizontalAlignment = 4
	ProtoHorizontalAlignment_ALIGN_CENTER_ON_PAGE ProtoHorizontalAlignment = 5
)

// Enum value maps for ProtoHorizontalAlignment.
var (
	ProtoHorizontalAlignment_name = map[int32]string{
		0: "ALIGN_LEFT",
		1: "ALIGN_CENTER",
		2: "ALIGN_RIGHT",
		3: "ALIGN_JUSTIFY",
		4: "ALIGN_FULL_JUSTIFY",
		5: "ALIGN_CENTER_ON_PAGE",
	}
	ProtoHorizontalAlignment_value = map[string]int32{
		"ALIGN_LEFT":           0,
		"ALIGN_CENTER":         1,
		"ALIGN_RIGHT":          2,
		"ALIGN_JUSTIFY":        3,
		"ALIGN_FULL_JUSTIFY":   4,
		"ALIGN_CENTER_ON_PAGE": 5,
	}
)

func (x ProtoHorizontalAlignment) Enum() *ProtoHorizontalAlignment {
	p := new(ProtoHorizontalAlignment)
	*p = x
	return p
}

func (x ProtoHorizontalAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoHorizontalAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[5].Descriptor()
}

func (ProtoHorizontalAlignment) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[5]
}

func (x ProtoHorizontalAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoHorizontalAlignment.Descriptor instead.
func (ProtoHorizontalAlignment) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{5}
}

type ProtoVerticalAlignment int32

const (
	ProtoVerticalAlignment_TOP    ProtoVerticalAlignment = 0
	ProtoVerticalAlignment_MIDDLE ProtoVerticalAlignment = 1
	ProtoVerticalAlignment_BOTTOM ProtoVerticalAlignment = 2
)

// Enum value maps for ProtoVerticalAlignment.
var (
	ProtoVerticalAlignment_name = map[int32]string{
		0: "TOP",
		1: "MIDDLE",
		2: "BOTTOM",
	}
	ProtoVerticalAlignment_value = map[string]int32{
		"TOP":    0,
		"MIDDLE": 1,
		"BOTTOM": 2,
	}
)

func (x ProtoVerticalAlignment) Enum() *ProtoVerticalAlignment {
	p := new(ProtoVerticalAlignment)
	*p = x
	return p
}

func (x ProtoVerticalAlignment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoVerticalAlignment) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[6].Descriptor()
}

func (ProtoVerticalAlignment) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[6]
}

func (x ProtoVerticalAlignment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoVerticalAlignment.Descriptor instead.
func (ProtoVerticalAlignment) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{6}
}

type ProtoBarcodeType int32

const (
	ProtoBarcodeType_PDF417     ProtoBarcodeType = 0
	ProtoBarcodeType_DATAMATRIX ProtoBarcodeType = 1
	ProtoBarcodeType_BC128      ProtoBarcodeType = 2
	ProtoBarcodeType_QR         ProtoBarcodeType = 3
	ProtoBarcodeType_ITF        ProtoBarcodeType = 4
	ProtoBarcodeType_EAN8       ProtoBarcodeType = 5
	ProtoBarcodeType_EAN13      ProtoBarcodeType = 6
	ProtoBarcodeType_CODE39     ProtoBarcodeType = 7
	ProtoBarcodeType_SWISSQR    ProtoBarcodeType = 8
	ProtoBarcodeType_AZTEC      ProtoBarcodeType = 9
)

// Enum value maps for ProtoBarcodeType.
var (
	ProtoBarcodeType_name = map[int32]string{
		0: "PDF417",
		1: "DATAMATRIX",
		2: "BC128",
		3: "QR",
		4: "ITF",
		5: "EAN8",
		6: "EAN13",
		7: "CODE39",
		8: "SWISSQR",
		9: "AZTEC",
	}
	ProtoBarcodeType_value = map[string]int32{
		"PDF417":     0,
		"DATAMATRIX": 1,
		"BC128":      2,
		"QR":         3,
		"ITF":        4,
		"EAN8":       5,
		"EAN13":      6,
		"CODE39":     7,
		"SWISSQR":    8,
		"AZTEC":      9,
	}
)

func (x ProtoBarcodeType) Enum() *ProtoBarcodeType {
	p := new(ProtoBarcodeType)
	*p = x
	return p
}

func (x ProtoBarcodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoBarcodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[7].Descriptor()
}

func (ProtoBarcodeType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[7]
}

func (x ProtoBarcodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoBarcodeType.Descriptor instead.
func (ProtoBarcodeType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{7}
}

type ProtoPositionMode int32

const (
	ProtoPositionMode_CENTER        ProtoPositionMode = 0
	ProtoPositionMode_LEFT          ProtoPositionMode = 1
	ProtoPositionMode_FOLIO         ProtoPositionMode = 2
	ProtoPositionMode_RIGHT         ProtoPositionMode = 3
	ProtoPositionMode_REVERSE_FOLIO ProtoPositionMode = 4
)

// Enum value maps for ProtoPositionMode.
var (
	ProtoPositionMode_name = map[int32]string{
		0: "CENTER",
		1: "LEFT",
		2: "FOLIO",
		3: "RIGHT",
		4: "REVERSE_FOLIO",
	}
	ProtoPositionMode_value = map[string]int32{
		"CENTER":        0,
		"LEFT":          1,
		"FOLIO":         2,
		"RIGHT":         3,
		"REVERSE_FOLIO": 4,
	}
)

func (x ProtoPositionMode) Enum() *ProtoPositionMode {
	p := new(ProtoPositionMode)
	*p = x
	return p
}

func (x ProtoPositionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoPositionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[8].Descriptor()
}

func (ProtoPositionMode) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[8]
}

func (x ProtoPositionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoPositionMode.Descriptor instead.
func (ProtoPositionMode) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{8}
}

type ProtoUnderlineMode int32

const (
	ProtoUnderlineMode_DUMMY_UNDERLINE_MODE  ProtoUnderlineMode = 0 // dummy is needed here, because otherwise protoc command produces error
	ProtoUnderlineMode_WORDS_NO_BLANKS       ProtoUnderlineMode = 1
	ProtoUnderlineMode_WORDS_AND_BLANKS      ProtoUnderlineMode = 2
	ProtoUnderlineMode_CHARACTERS_NO_BLANKS  ProtoUnderlineMode = 3
	ProtoUnderlineMode_CHARACTERS_AND_BLANKS ProtoUnderlineMode = 4
)

// Enum value maps for ProtoUnderlineMode.
var (
	ProtoUnderlineMode_name = map[int32]string{
		0: "DUMMY_UNDERLINE_MODE",
		1: "WORDS_NO_BLANKS",
		2: "WORDS_AND_BLANKS",
		3: "CHARACTERS_NO_BLANKS",
		4: "CHARACTERS_AND_BLANKS",
	}
	ProtoUnderlineMode_value = map[string]int32{
		"DUMMY_UNDERLINE_MODE":  0,
		"WORDS_NO_BLANKS":       1,
		"WORDS_AND_BLANKS":      2,
		"CHARACTERS_NO_BLANKS":  3,
		"CHARACTERS_AND_BLANKS": 4,
	}
)

func (x ProtoUnderlineMode) Enum() *ProtoUnderlineMode {
	p := new(ProtoUnderlineMode)
	*p = x
	return p
}

func (x ProtoUnderlineMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoUnderlineMode) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[9].Descriptor()
}

func (ProtoUnderlineMode) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[9]
}

func (x ProtoUnderlineMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoUnderlineMode.Descriptor instead.
func (ProtoUnderlineMode) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{9}
}

type ProtoImageReferencePoint int32

const (
	ProtoImageReferencePoint_REF_POINT_DO_NOT_USE_AT_ALL ProtoImageReferencePoint = 0
	ProtoImageReferencePoint_REF_POINT_BOTTOM_LEFT       ProtoImageReferencePoint = 1
	ProtoImageReferencePoint_REF_POINT_TOP_LEFT          ProtoImageReferencePoint = 2
	ProtoImageReferencePoint_REF_POINT_CENTER            ProtoImageReferencePoint = 3
	ProtoImageReferencePoint_REF_POINT_BOTTOM_RIGHT      ProtoImageReferencePoint = 4
	ProtoImageReferencePoint_REF_POINT_TOP_RIGHT         ProtoImageReferencePoint = 5
)

// Enum value maps for ProtoImageReferencePoint.
var (
	ProtoImageReferencePoint_name = map[int32]string{
		0: "REF_POINT_DO_NOT_USE_AT_ALL",
		1: "REF_POINT_BOTTOM_LEFT",
		2: "REF_POINT_TOP_LEFT",
		3: "REF_POINT_CENTER",
		4: "REF_POINT_BOTTOM_RIGHT",
		5: "REF_POINT_TOP_RIGHT",
	}
	ProtoImageReferencePoint_value = map[string]int32{
		"REF_POINT_DO_NOT_USE_AT_ALL": 0,
		"REF_POINT_BOTTOM_LEFT":       1,
		"REF_POINT_TOP_LEFT":          2,
		"REF_POINT_CENTER":            3,
		"REF_POINT_BOTTOM_RIGHT":      4,
		"REF_POINT_TOP_RIGHT":         5,
	}
)

func (x ProtoImageReferencePoint) Enum() *ProtoImageReferencePoint {
	p := new(ProtoImageReferencePoint)
	*p = x
	return p
}

func (x ProtoImageReferencePoint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoImageReferencePoint) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[10].Descriptor()
}

func (ProtoImageReferencePoint) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[10]
}

func (x ProtoImageReferencePoint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoImageReferencePoint.Descriptor instead.
func (ProtoImageReferencePoint) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{10}
}

type ProtoNumberType int32

const (
	ProtoNumberType_ARABIC           ProtoNumberType = 0
	ProtoNumberType_ROM_UPPERCASE    ProtoNumberType = 1
	ProtoNumberType_ROM_LOWERCASE    ProtoNumberType = 2
	ProtoNumberType_LETTER_UPPERCASE ProtoNumberType = 3
	ProtoNumberType_LETTER_LOWERCASE ProtoNumberType = 4
)

// Enum value maps for ProtoNumberType.
var (
	ProtoNumberType_name = map[int32]string{
		0: "ARABIC",
		1: "ROM_UPPERCASE",
		2: "ROM_LOWERCASE",
		3: "LETTER_UPPERCASE",
		4: "LETTER_LOWERCASE",
	}
	ProtoNumberType_value = map[string]int32{
		"ARABIC":           0,
		"ROM_UPPERCASE":    1,
		"ROM_LOWERCASE":    2,
		"LETTER_UPPERCASE": 3,
		"LETTER_LOWERCASE": 4,
	}
)

func (x ProtoNumberType) Enum() *ProtoNumberType {
	p := new(ProtoNumberType)
	*p = x
	return p
}

func (x ProtoNumberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoNumberType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[11].Descriptor()
}

func (ProtoNumberType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[11]
}

func (x ProtoNumberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoNumberType.Descriptor instead.
func (ProtoNumberType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{11}
}

type ProtoListLevelSettingType int32

const (
	ProtoListLevelSettingType_UNNUMBERED ProtoListLevelSettingType = 0
	ProtoListLevelSettingType_NUMERIC    ProtoListLevelSettingType = 1
	ProtoListLevelSettingType_IMAGE      ProtoListLevelSettingType = 2
)

// Enum value maps for ProtoListLevelSettingType.
var (
	ProtoListLevelSettingType_name = map[int32]string{
		0: "UNNUMBERED",
		1: "NUMERIC",
		2: "IMAGE",
	}
	ProtoListLevelSettingType_value = map[string]int32{
		"UNNUMBERED": 0,
		"NUMERIC":    1,
		"IMAGE":      2,
	}
)

func (x ProtoListLevelSettingType) Enum() *ProtoListLevelSettingType {
	p := new(ProtoListLevelSettingType)
	*p = x
	return p
}

func (x ProtoListLevelSettingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoListLevelSettingType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[12].Descriptor()
}

func (ProtoListLevelSettingType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[12]
}

func (x ProtoListLevelSettingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoListLevelSettingType.Descriptor instead.
func (ProtoListLevelSettingType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{12}
}

type ProtoTableContentGroupType int32

const (
	ProtoTableContentGroupType_BODY       ProtoTableContentGroupType = 0
	ProtoTableContentGroupType_HEADER     ProtoTableContentGroupType = 1
	ProtoTableContentGroupType_FOOTER     ProtoTableContentGroupType = 2
	ProtoTableContentGroupType_SUB_HEADER ProtoTableContentGroupType = 3
)

// Enum value maps for ProtoTableContentGroupType.
var (
	ProtoTableContentGroupType_name = map[int32]string{
		0: "BODY",
		1: "HEADER",
		2: "FOOTER",
		3: "SUB_HEADER",
	}
	ProtoTableContentGroupType_value = map[string]int32{
		"BODY":       0,
		"HEADER":     1,
		"FOOTER":     2,
		"SUB_HEADER": 3,
	}
)

func (x ProtoTableContentGroupType) Enum() *ProtoTableContentGroupType {
	p := new(ProtoTableContentGroupType)
	*p = x
	return p
}

func (x ProtoTableContentGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoTableContentGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[13].Descriptor()
}

func (ProtoTableContentGroupType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[13]
}

func (x ProtoTableContentGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoTableContentGroupType.Descriptor instead.
func (ProtoTableContentGroupType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{13}
}

type ProtoTableCellType int32

const (
	ProtoTableCellType_TABLE_CELL_BODY       ProtoTableCellType = 0
	ProtoTableCellType_TABLE_CELL_ROW_HEADER ProtoTableCellType = 1
	ProtoTableCellType_TABLE_CELL_ROW_FOOTER ProtoTableCellType = 2
)

// Enum value maps for ProtoTableCellType.
var (
	ProtoTableCellType_name = map[int32]string{
		0: "TABLE_CELL_BODY",
		1: "TABLE_CELL_ROW_HEADER",
		2: "TABLE_CELL_ROW_FOOTER",
	}
	ProtoTableCellType_value = map[string]int32{
		"TABLE_CELL_BODY":       0,
		"TABLE_CELL_ROW_HEADER": 1,
		"TABLE_CELL_ROW_FOOTER": 2,
	}
)

func (x ProtoTableCellType) Enum() *ProtoTableCellType {
	p := new(ProtoTableCellType)
	*p = x
	return p
}

func (x ProtoTableCellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoTableCellType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[14].Descriptor()
}

func (ProtoTableCellType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[14]
}

func (x ProtoTableCellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoTableCellType.Descriptor instead.
func (ProtoTableCellType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{14}
}

type NodeType int32

const (
	NodeType_DOCUMENT_ELEMENT_BRANCH_DOCUMENT_ELEMENT       NodeType = 0
	NodeType_DOCUMENT_ELEMENT_BRICK_REFERENCE               NodeType = 1
	NodeType_DOCUMENT_ELEMENT_BRICK                         NodeType = 2
	NodeType_DOCUMENT_ELEMENT_DOCUMENT_ELEMENT              NodeType = 3
	NodeType_DOCUMENT_ELEMENT_LINEBREAK                     NodeType = 4
	NodeType_DOCUMENT_ELEMENT_LIST_LEVEL_SETTING            NodeType = 5
	NodeType_DOCUMENT_ELEMENT_LIST_SETTING                  NodeType = 6
	NodeType_DOCUMENT_ELEMENT_PARAGRAPH_FORMAT              NodeType = 7
	NodeType_DOCUMENT_ELEMENT_PARAGRAPH                     NodeType = 8
	NodeType_DOCUMENT_ELEMENT_SECTION                       NodeType = 9
	NodeType_DOCUMENT_ELEMENT_SPAN                          NodeType = 10
	NodeType_DOCUMENT_ELEMENT_TABLE                         NodeType = 11
	NodeType_DOCUMENT_ELEMENT_TABLE_CELL                    NodeType = 12
	NodeType_DOCUMENT_ELEMENT_TABLE_ROW                     NodeType = 13
	NodeType_DOCUMENT_ELEMENT_TEMPLATE                      NodeType = 15
	NodeType_DOCUMENT_ELEMENT_TEXT                          NodeType = 16
	NodeType_UTIL_ALIGN                                     NodeType = 17
	NodeType_UTIL_BORDER                                    NodeType = 18
	NodeType_UTIL_COLOR                                     NodeType = 19
	NodeType_UTIL_COLUMN_SETTINGS                           NodeType = 20
	NodeType_UTIL_FONT                                      NodeType = 21
	NodeType_UTIL_GRAPHIC_STATE                             NodeType = 22
	NodeType_UTIL_HTML_PARSER                               NodeType = 23
	NodeType_UTIL_MEASURE                                   NodeType = 24
	NodeType_UTIL_RULE_STYLE                                NodeType = 25
	NodeType_UTIL_SPB_MODE                                  NodeType = 26
	NodeType_UTIL_STRIKETHROUGH_SPEC                        NodeType = 27
	NodeType_UTIL_TEXT                                      NodeType = 28
	NodeType_UTIL_UNDERLINE_SPEC                            NodeType = 29
	NodeType_DOCUMENT_ELEMENT_IMAGE                         NodeType = 30
	NodeType_DOCUMENT_ELEMENT_IMAGE_LIST_LEVEL_SETTING      NodeType = 31
	NodeType_DOCUMENT_ELEMENT_NUMBER_LIST_LEVEL_SETTING     NodeType = 32
	NodeType_DOCUMENT_ELEMENT_UNNUMBERED_LIST_LEVEL_SETTING NodeType = 33
	NodeType_DOCUMENT_ELEMENT_NAMED_STRING                  NodeType = 34
	NodeType_DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP           NodeType = 35
	NodeType_DOCUMENT_ELEMENT_TABLE_CONFIG                  NodeType = 36
	NodeType_DOCUMENT_ELEMENT_TABLE_CELL_CONFIG             NodeType = 37
	NodeType_DOCUMENT_ELEMENT_TABLE_ROW_CONFIG              NodeType = 38
	NodeType_DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP_CONFIG    NodeType = 39
	NodeType_DOCUMENT_ELEMENT_LINK                          NodeType = 40
	NodeType_DOCUMENT_ELEMENT_DIRECTORY                     NodeType = 41
	NodeType_DOCUMENT_ELEMENT_TEXT_BRICK                    NodeType = 42
	NodeType_DOCUMENT_ELEMENT_TEXT_LIST_LEVEL_SETTING       NodeType = 43
	NodeType_DOCUMENT_ELEMENT_VARIABLE                      NodeType = 44
	NodeType_DOCUMENT_ELEMENT_SPACE_VERTICALLY              NodeType = 45
	NodeType_DOCUMENT_ELEMENT_FORMATTED                     NodeType = 46
	NodeType_DOCUMENT_ELEMENT_APPLY_C_DEF                   NodeType = 47
	NodeType_DOCUMENT_ELEMENT_APPLY_P_DEF                   NodeType = 48
	NodeType_DOCUMENT_ELEMENT_APPLY_PT_CONFIG               NodeType = 49
	NodeType_DOCUMENT_ELEMENT_APPLY_UL_CONFIG               NodeType = 50
	NodeType_DOCUMENT_ELEMENT_C_DEF                         NodeType = 51
	NodeType_DOCUMENT_ELEMENT_P_DEF                         NodeType = 52
	NodeType_DOCUMENT_ELEMENT_PT_CONFIG                     NodeType = 53
	NodeType_DOCUMENT_ELEMENT_UL_CONFIG                     NodeType = 54
	NodeType_DOCUMENT_ELEMENT_NEW_PAGE                      NodeType = 55
	NodeType_DOCUMENT_ELEMENT_HEADER                        NodeType = 56
	NodeType_DOCUMENT_ELEMENT_FOOTER                        NodeType = 57
	NodeType_UTIL_CROP_SETTINGS                             NodeType = 58
	NodeType_UTIL_FLIP_SETTINGS                             NodeType = 59
	NodeType_DOCUMENT_ELEMENT_INDENTATION                   NodeType = 60
	NodeType_DOCUMENT_ELEMENT_BARCODE                       NodeType = 61
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0:  "DOCUMENT_ELEMENT_BRANCH_DOCUMENT_ELEMENT",
		1:  "DOCUMENT_ELEMENT_BRICK_REFERENCE",
		2:  "DOCUMENT_ELEMENT_BRICK",
		3:  "DOCUMENT_ELEMENT_DOCUMENT_ELEMENT",
		4:  "DOCUMENT_ELEMENT_LINEBREAK",
		5:  "DOCUMENT_ELEMENT_LIST_LEVEL_SETTING",
		6:  "DOCUMENT_ELEMENT_LIST_SETTING",
		7:  "DOCUMENT_ELEMENT_PARAGRAPH_FORMAT",
		8:  "DOCUMENT_ELEMENT_PARAGRAPH",
		9:  "DOCUMENT_ELEMENT_SECTION",
		10: "DOCUMENT_ELEMENT_SPAN",
		11: "DOCUMENT_ELEMENT_TABLE",
		12: "DOCUMENT_ELEMENT_TABLE_CELL",
		13: "DOCUMENT_ELEMENT_TABLE_ROW",
		15: "DOCUMENT_ELEMENT_TEMPLATE",
		16: "DOCUMENT_ELEMENT_TEXT",
		17: "UTIL_ALIGN",
		18: "UTIL_BORDER",
		19: "UTIL_COLOR",
		20: "UTIL_COLUMN_SETTINGS",
		21: "UTIL_FONT",
		22: "UTIL_GRAPHIC_STATE",
		23: "UTIL_HTML_PARSER",
		24: "UTIL_MEASURE",
		25: "UTIL_RULE_STYLE",
		26: "UTIL_SPB_MODE",
		27: "UTIL_STRIKETHROUGH_SPEC",
		28: "UTIL_TEXT",
		29: "UTIL_UNDERLINE_SPEC",
		30: "DOCUMENT_ELEMENT_IMAGE",
		31: "DOCUMENT_ELEMENT_IMAGE_LIST_LEVEL_SETTING",
		32: "DOCUMENT_ELEMENT_NUMBER_LIST_LEVEL_SETTING",
		33: "DOCUMENT_ELEMENT_UNNUMBERED_LIST_LEVEL_SETTING",
		34: "DOCUMENT_ELEMENT_NAMED_STRING",
		35: "DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP",
		36: "DOCUMENT_ELEMENT_TABLE_CONFIG",
		37: "DOCUMENT_ELEMENT_TABLE_CELL_CONFIG",
		38: "DOCUMENT_ELEMENT_TABLE_ROW_CONFIG",
		39: "DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP_CONFIG",
		40: "DOCUMENT_ELEMENT_LINK",
		41: "DOCUMENT_ELEMENT_DIRECTORY",
		42: "DOCUMENT_ELEMENT_TEXT_BRICK",
		43: "DOCUMENT_ELEMENT_TEXT_LIST_LEVEL_SETTING",
		44: "DOCUMENT_ELEMENT_VARIABLE",
		45: "DOCUMENT_ELEMENT_SPACE_VERTICALLY",
		46: "DOCUMENT_ELEMENT_FORMATTED",
		47: "DOCUMENT_ELEMENT_APPLY_C_DEF",
		48: "DOCUMENT_ELEMENT_APPLY_P_DEF",
		49: "DOCUMENT_ELEMENT_APPLY_PT_CONFIG",
		50: "DOCUMENT_ELEMENT_APPLY_UL_CONFIG",
		51: "DOCUMENT_ELEMENT_C_DEF",
		52: "DOCUMENT_ELEMENT_P_DEF",
		53: "DOCUMENT_ELEMENT_PT_CONFIG",
		54: "DOCUMENT_ELEMENT_UL_CONFIG",
		55: "DOCUMENT_ELEMENT_NEW_PAGE",
		56: "DOCUMENT_ELEMENT_HEADER",
		57: "DOCUMENT_ELEMENT_FOOTER",
		58: "UTIL_CROP_SETTINGS",
		59: "UTIL_FLIP_SETTINGS",
		60: "DOCUMENT_ELEMENT_INDENTATION",
		61: "DOCUMENT_ELEMENT_BARCODE",
	}
	NodeType_value = map[string]int32{
		"DOCUMENT_ELEMENT_BRANCH_DOCUMENT_ELEMENT":       0,
		"DOCUMENT_ELEMENT_BRICK_REFERENCE":               1,
		"DOCUMENT_ELEMENT_BRICK":                         2,
		"DOCUMENT_ELEMENT_DOCUMENT_ELEMENT":              3,
		"DOCUMENT_ELEMENT_LINEBREAK":                     4,
		"DOCUMENT_ELEMENT_LIST_LEVEL_SETTING":            5,
		"DOCUMENT_ELEMENT_LIST_SETTING":                  6,
		"DOCUMENT_ELEMENT_PARAGRAPH_FORMAT":              7,
		"DOCUMENT_ELEMENT_PARAGRAPH":                     8,
		"DOCUMENT_ELEMENT_SECTION":                       9,
		"DOCUMENT_ELEMENT_SPAN":                          10,
		"DOCUMENT_ELEMENT_TABLE":                         11,
		"DOCUMENT_ELEMENT_TABLE_CELL":                    12,
		"DOCUMENT_ELEMENT_TABLE_ROW":                     13,
		"DOCUMENT_ELEMENT_TEMPLATE":                      15,
		"DOCUMENT_ELEMENT_TEXT":                          16,
		"UTIL_ALIGN":                                     17,
		"UTIL_BORDER":                                    18,
		"UTIL_COLOR":                                     19,
		"UTIL_COLUMN_SETTINGS":                           20,
		"UTIL_FONT":                                      21,
		"UTIL_GRAPHIC_STATE":                             22,
		"UTIL_HTML_PARSER":                               23,
		"UTIL_MEASURE":                                   24,
		"UTIL_RULE_STYLE":                                25,
		"UTIL_SPB_MODE":                                  26,
		"UTIL_STRIKETHROUGH_SPEC":                        27,
		"UTIL_TEXT":                                      28,
		"UTIL_UNDERLINE_SPEC":                            29,
		"DOCUMENT_ELEMENT_IMAGE":                         30,
		"DOCUMENT_ELEMENT_IMAGE_LIST_LEVEL_SETTING":      31,
		"DOCUMENT_ELEMENT_NUMBER_LIST_LEVEL_SETTING":     32,
		"DOCUMENT_ELEMENT_UNNUMBERED_LIST_LEVEL_SETTING": 33,
		"DOCUMENT_ELEMENT_NAMED_STRING":                  34,
		"DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP":           35,
		"DOCUMENT_ELEMENT_TABLE_CONFIG":                  36,
		"DOCUMENT_ELEMENT_TABLE_CELL_CONFIG":             37,
		"DOCUMENT_ELEMENT_TABLE_ROW_CONFIG":              38,
		"DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP_CONFIG":    39,
		"DOCUMENT_ELEMENT_LINK":                          40,
		"DOCUMENT_ELEMENT_DIRECTORY":                     41,
		"DOCUMENT_ELEMENT_TEXT_BRICK":                    42,
		"DOCUMENT_ELEMENT_TEXT_LIST_LEVEL_SETTING":       43,
		"DOCUMENT_ELEMENT_VARIABLE":                      44,
		"DOCUMENT_ELEMENT_SPACE_VERTICALLY":              45,
		"DOCUMENT_ELEMENT_FORMATTED":                     46,
		"DOCUMENT_ELEMENT_APPLY_C_DEF":                   47,
		"DOCUMENT_ELEMENT_APPLY_P_DEF":                   48,
		"DOCUMENT_ELEMENT_APPLY_PT_CONFIG":               49,
		"DOCUMENT_ELEMENT_APPLY_UL_CONFIG":               50,
		"DOCUMENT_ELEMENT_C_DEF":                         51,
		"DOCUMENT_ELEMENT_P_DEF":                         52,
		"DOCUMENT_ELEMENT_PT_CONFIG":                     53,
		"DOCUMENT_ELEMENT_UL_CONFIG":                     54,
		"DOCUMENT_ELEMENT_NEW_PAGE":                      55,
		"DOCUMENT_ELEMENT_HEADER":                        56,
		"DOCUMENT_ELEMENT_FOOTER":                        57,
		"UTIL_CROP_SETTINGS":                             58,
		"UTIL_FLIP_SETTINGS":                             59,
		"DOCUMENT_ELEMENT_INDENTATION":                   60,
		"DOCUMENT_ELEMENT_BARCODE":                       61,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[15].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[15]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{15}
}

type ProtoPageMode int32

const (
	ProtoPageMode_NEXT_PAGE       ProtoPageMode = 0
	ProtoPageMode_NEXT_RECTO_PAGE ProtoPageMode = 1
	ProtoPageMode_NEXT_VERSO_PAGE ProtoPageMode = 2
)

// Enum value maps for ProtoPageMode.
var (
	ProtoPageMode_name = map[int32]string{
		0: "NEXT_PAGE",
		1: "NEXT_RECTO_PAGE",
		2: "NEXT_VERSO_PAGE",
	}
	ProtoPageMode_value = map[string]int32{
		"NEXT_PAGE":       0,
		"NEXT_RECTO_PAGE": 1,
		"NEXT_VERSO_PAGE": 2,
	}
)

func (x ProtoPageMode) Enum() *ProtoPageMode {
	p := new(ProtoPageMode)
	*p = x
	return p
}

func (x ProtoPageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoPageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_build_docframe_proto_enumTypes[16].Descriptor()
}

func (ProtoPageMode) Type() protoreflect.EnumType {
	return &file_build_docframe_proto_enumTypes[16]
}

func (x ProtoPageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoPageMode.Descriptor instead.
func (ProtoPageMode) EnumDescriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{16}
}

type ProtoBoxedBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedBool) Reset() {
	*x = ProtoBoxedBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedBool) ProtoMessage() {}

func (x *ProtoBoxedBool) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedBool.ProtoReflect.Descriptor instead.
func (*ProtoBoxedBool) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoBoxedBool) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *ProtoBoxedBool) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoBoxedDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool    `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedDouble) Reset() {
	*x = ProtoBoxedDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedDouble) ProtoMessage() {}

func (x *ProtoBoxedDouble) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedDouble.ProtoReflect.Descriptor instead.
func (*ProtoBoxedDouble) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{1}
}

func (x *ProtoBoxedDouble) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProtoBoxedDouble) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoBoxedInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool  `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedInt32) Reset() {
	*x = ProtoBoxedInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedInt32) ProtoMessage() {}

func (x *ProtoBoxedInt32) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedInt32.ProtoReflect.Descriptor instead.
func (*ProtoBoxedInt32) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoBoxedInt32) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProtoBoxedInt32) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoBoxedUint32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool   `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedUint32) Reset() {
	*x = ProtoBoxedUint32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedUint32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedUint32) ProtoMessage() {}

func (x *ProtoBoxedUint32) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedUint32.ProtoReflect.Descriptor instead.
func (*ProtoBoxedUint32) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{3}
}

func (x *ProtoBoxedUint32) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProtoBoxedUint32) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoBoxedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool   `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedString) Reset() {
	*x = ProtoBoxedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedString) ProtoMessage() {}

func (x *ProtoBoxedString) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedString.ProtoReflect.Descriptor instead.
func (*ProtoBoxedString) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{4}
}

func (x *ProtoBoxedString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProtoBoxedString) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoBoxedSPBMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  ProtoSPBMode `protobuf:"varint,1,opt,name=value,proto3,enum=ProtoSPBMode" json:"value,omitempty"`
	IsNull bool         `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedSPBMode) Reset() {
	*x = ProtoBoxedSPBMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedSPBMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedSPBMode) ProtoMessage() {}

func (x *ProtoBoxedSPBMode) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedSPBMode.ProtoReflect.Descriptor instead.
func (*ProtoBoxedSPBMode) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{5}
}

func (x *ProtoBoxedSPBMode) GetValue() ProtoSPBMode {
	if x != nil {
		return x.Value
	}
	return ProtoSPBMode_NONE
}

func (x *ProtoBoxedSPBMode) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoStrikethroughSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight   *ProtoMeasure      `protobuf:"bytes,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Mode     ProtoUnderlineMode `protobuf:"varint,2,opt,name=mode,proto3,enum=ProtoUnderlineMode" json:"mode,omitempty"`
	Color    *ProtoColor        `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	OffsetEm int32              `protobuf:"varint,4,opt,name=offsetEm,proto3" json:"offsetEm,omitempty"`
	Style    ProtoRuleStyle     `protobuf:"varint,5,opt,name=style,proto3,enum=ProtoRuleStyle" json:"style,omitempty"`
}

func (x *ProtoStrikethroughSpec) Reset() {
	*x = ProtoStrikethroughSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoStrikethroughSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoStrikethroughSpec) ProtoMessage() {}

func (x *ProtoStrikethroughSpec) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoStrikethroughSpec.ProtoReflect.Descriptor instead.
func (*ProtoStrikethroughSpec) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{6}
}

func (x *ProtoStrikethroughSpec) GetWeight() *ProtoMeasure {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *ProtoStrikethroughSpec) GetMode() ProtoUnderlineMode {
	if x != nil {
		return x.Mode
	}
	return ProtoUnderlineMode_DUMMY_UNDERLINE_MODE
}

func (x *ProtoStrikethroughSpec) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProtoStrikethroughSpec) GetOffsetEm() int32 {
	if x != nil {
		return x.OffsetEm
	}
	return 0
}

func (x *ProtoStrikethroughSpec) GetStyle() ProtoRuleStyle {
	if x != nil {
		return x.Style
	}
	return ProtoRuleStyle_DUMMY_RULE_STYLE
}

type ProtoBoxedStrikethroughSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *ProtoStrikethroughSpec `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool                    `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedStrikethroughSpec) Reset() {
	*x = ProtoBoxedStrikethroughSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedStrikethroughSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedStrikethroughSpec) ProtoMessage() {}

func (x *ProtoBoxedStrikethroughSpec) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedStrikethroughSpec.ProtoReflect.Descriptor instead.
func (*ProtoBoxedStrikethroughSpec) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{7}
}

func (x *ProtoBoxedStrikethroughSpec) GetValue() *ProtoStrikethroughSpec {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProtoBoxedStrikethroughSpec) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoMeasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64          `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	Mtype ProtoMeasureType `protobuf:"varint,2,opt,name=mtype,proto3,enum=ProtoMeasureType" json:"mtype,omitempty"`
}

func (x *ProtoMeasure) Reset() {
	*x = ProtoMeasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMeasure) ProtoMessage() {}

func (x *ProtoMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMeasure.ProtoReflect.Descriptor instead.
func (*ProtoMeasure) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{8}
}

func (x *ProtoMeasure) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProtoMeasure) GetMtype() ProtoMeasureType {
	if x != nil {
		return x.Mtype
	}
	return ProtoMeasureType_PT
}

type ProtoBoxedMeasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *ProtoMeasure `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool          `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedMeasure) Reset() {
	*x = ProtoBoxedMeasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedMeasure) ProtoMessage() {}

func (x *ProtoBoxedMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedMeasure.ProtoReflect.Descriptor instead.
func (*ProtoBoxedMeasure) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{9}
}

func (x *ProtoBoxedMeasure) GetValue() *ProtoMeasure {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProtoBoxedMeasure) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoSideMeasures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top    *ProtoMeasure `protobuf:"bytes,1,opt,name=top,proto3" json:"top,omitempty"`
	Right  *ProtoMeasure `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	Bottom *ProtoMeasure `protobuf:"bytes,3,opt,name=bottom,proto3" json:"bottom,omitempty"`
	Left   *ProtoMeasure `protobuf:"bytes,4,opt,name=left,proto3" json:"left,omitempty"`
}

func (x *ProtoSideMeasures) Reset() {
	*x = ProtoSideMeasures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoSideMeasures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSideMeasures) ProtoMessage() {}

func (x *ProtoSideMeasures) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSideMeasures.ProtoReflect.Descriptor instead.
func (*ProtoSideMeasures) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{10}
}

func (x *ProtoSideMeasures) GetTop() *ProtoMeasure {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *ProtoSideMeasures) GetRight() *ProtoMeasure {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *ProtoSideMeasures) GetBottom() *ProtoMeasure {
	if x != nil {
		return x.Bottom
	}
	return nil
}

func (x *ProtoSideMeasures) GetLeft() *ProtoMeasure {
	if x != nil {
		return x.Left
	}
	return nil
}

type ProtoBoxedAdvancedIllustrationAreaTextFlowType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  ProtoAdvancedIllustrationAreaTextFlowType `protobuf:"varint,1,opt,name=value,proto3,enum=ProtoAdvancedIllustrationAreaTextFlowType" json:"value,omitempty"`
	IsNull bool                                      `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedAdvancedIllustrationAreaTextFlowType) Reset() {
	*x = ProtoBoxedAdvancedIllustrationAreaTextFlowType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedAdvancedIllustrationAreaTextFlowType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedAdvancedIllustrationAreaTextFlowType) ProtoMessage() {}

func (x *ProtoBoxedAdvancedIllustrationAreaTextFlowType) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedAdvancedIllustrationAreaTextFlowType.ProtoReflect.Descriptor instead.
func (*ProtoBoxedAdvancedIllustrationAreaTextFlowType) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{11}
}

func (x *ProtoBoxedAdvancedIllustrationAreaTextFlowType) GetValue() ProtoAdvancedIllustrationAreaTextFlowType {
	if x != nil {
		return x.Value
	}
	return ProtoAdvancedIllustrationAreaTextFlowType_DO_NOT_USE_AT_ALL
}

func (x *ProtoBoxedAdvancedIllustrationAreaTextFlowType) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoAdvancedIllustrationArea struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextFlow *ProtoBoxedAdvancedIllustrationAreaTextFlowType `protobuf:"bytes,1,opt,name=textFlow,proto3" json:"textFlow,omitempty"`
	Margin   *ProtoSideMeasures                              `protobuf:"bytes,2,opt,name=margin,proto3" json:"margin,omitempty"`
}

func (x *ProtoAdvancedIllustrationArea) Reset() {
	*x = ProtoAdvancedIllustrationArea{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoAdvancedIllustrationArea) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoAdvancedIllustrationArea) ProtoMessage() {}

func (x *ProtoAdvancedIllustrationArea) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoAdvancedIllustrationArea.ProtoReflect.Descriptor instead.
func (*ProtoAdvancedIllustrationArea) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{12}
}

func (x *ProtoAdvancedIllustrationArea) GetTextFlow() *ProtoBoxedAdvancedIllustrationAreaTextFlowType {
	if x != nil {
		return x.TextFlow
	}
	return nil
}

func (x *ProtoAdvancedIllustrationArea) GetMargin() *ProtoSideMeasures {
	if x != nil {
		return x.Margin
	}
	return nil
}

type ProtoFont struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProtoFont) Reset() {
	*x = ProtoFont{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoFont) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoFont) ProtoMessage() {}

func (x *ProtoFont) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoFont.ProtoReflect.Descriptor instead.
func (*ProtoFont) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{13}
}

func (x *ProtoFont) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtoFont) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProtoBoxedFont struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *ProtoFont `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool       `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedFont) Reset() {
	*x = ProtoBoxedFont{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedFont) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedFont) ProtoMessage() {}

func (x *ProtoBoxedFont) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedFont.ProtoReflect.Descriptor instead.
func (*ProtoBoxedFont) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{14}
}

func (x *ProtoBoxedFont) GetValue() *ProtoFont {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProtoBoxedFont) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ProtoBoxedString `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ProtoColorType    `protobuf:"varint,2,opt,name=type,proto3,enum=ProtoColorType" json:"type,omitempty"` // set to RGB or CMYK
	R    int32             `protobuf:"varint,3,opt,name=r,proto3" json:"r,omitempty"`
	G    int32             `protobuf:"varint,4,opt,name=g,proto3" json:"g,omitempty"`
	B    int32             `protobuf:"varint,5,opt,name=b,proto3" json:"b,omitempty"`
	C    int32             `protobuf:"varint,6,opt,name=c,proto3" json:"c,omitempty"`
	M    int32             `protobuf:"varint,7,opt,name=m,proto3" json:"m,omitempty"`
	Y    int32             `protobuf:"varint,8,opt,name=y,proto3" json:"y,omitempty"`
	K    int32             `protobuf:"varint,9,opt,name=k,proto3" json:"k,omitempty"`
}

func (x *ProtoColor) Reset() {
	*x = ProtoColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoColor) ProtoMessage() {}

func (x *ProtoColor) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoColor.ProtoReflect.Descriptor instead.
func (*ProtoColor) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{15}
}

func (x *ProtoColor) GetName() *ProtoBoxedString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProtoColor) GetType() ProtoColorType {
	if x != nil {
		return x.Type
	}
	return ProtoColorType_DUMMY_COLOR_TYPE
}

func (x *ProtoColor) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *ProtoColor) GetG() int32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *ProtoColor) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *ProtoColor) GetC() int32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *ProtoColor) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *ProtoColor) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ProtoColor) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

type ProtoBoxedColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *ProtoColor `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool        `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedColor) Reset() {
	*x = ProtoBoxedColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedColor) ProtoMessage() {}

func (x *ProtoBoxedColor) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedColor.ProtoReflect.Descriptor instead.
func (*ProtoBoxedColor) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{16}
}

func (x *ProtoBoxedColor) GetValue() *ProtoColor {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProtoBoxedColor) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoRGBColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ProtoBoxedString `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ProtoColorType    `protobuf:"varint,2,opt,name=type,proto3,enum=ProtoColorType" json:"type,omitempty"` // set to RGB
	R    int32             `protobuf:"varint,3,opt,name=r,proto3" json:"r,omitempty"`
	G    int32             `protobuf:"varint,4,opt,name=g,proto3" json:"g,omitempty"`
	B    int32             `protobuf:"varint,5,opt,name=b,proto3" json:"b,omitempty"`
}

func (x *ProtoRGBColor) Reset() {
	*x = ProtoRGBColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoRGBColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRGBColor) ProtoMessage() {}

func (x *ProtoRGBColor) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRGBColor.ProtoReflect.Descriptor instead.
func (*ProtoRGBColor) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{17}
}

func (x *ProtoRGBColor) GetName() *ProtoBoxedString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProtoRGBColor) GetType() ProtoColorType {
	if x != nil {
		return x.Type
	}
	return ProtoColorType_DUMMY_COLOR_TYPE
}

func (x *ProtoRGBColor) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *ProtoRGBColor) GetG() int32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *ProtoRGBColor) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

type ProtoCMYKColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *ProtoBoxedString `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type ProtoColorType    `protobuf:"varint,2,opt,name=type,proto3,enum=ProtoColorType" json:"type,omitempty"` // set to CMYK
	C    int32             `protobuf:"varint,3,opt,name=c,proto3" json:"c,omitempty"`
	M    int32             `protobuf:"varint,4,opt,name=m,proto3" json:"m,omitempty"`
	Y    int32             `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
	K    int32             `protobuf:"varint,6,opt,name=k,proto3" json:"k,omitempty"`
}

func (x *ProtoCMYKColor) Reset() {
	*x = ProtoCMYKColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoCMYKColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCMYKColor) ProtoMessage() {}

func (x *ProtoCMYKColor) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCMYKColor.ProtoReflect.Descriptor instead.
func (*ProtoCMYKColor) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{18}
}

func (x *ProtoCMYKColor) GetName() *ProtoBoxedString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProtoCMYKColor) GetType() ProtoColorType {
	if x != nil {
		return x.Type
	}
	return ProtoColorType_DUMMY_COLOR_TYPE
}

func (x *ProtoCMYKColor) GetC() int32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *ProtoCMYKColor) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *ProtoCMYKColor) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ProtoCMYKColor) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

type ProtoBoxedHorizontalAlignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  ProtoHorizontalAlignment `protobuf:"varint,1,opt,name=value,proto3,enum=ProtoHorizontalAlignment" json:"value,omitempty"`
	IsNull bool                     `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedHorizontalAlignment) Reset() {
	*x = ProtoBoxedHorizontalAlignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedHorizontalAlignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedHorizontalAlignment) ProtoMessage() {}

func (x *ProtoBoxedHorizontalAlignment) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedHorizontalAlignment.ProtoReflect.Descriptor instead.
func (*ProtoBoxedHorizontalAlignment) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{19}
}

func (x *ProtoBoxedHorizontalAlignment) GetValue() ProtoHorizontalAlignment {
	if x != nil {
		return x.Value
	}
	return ProtoHorizontalAlignment_ALIGN_LEFT
}

func (x *ProtoBoxedHorizontalAlignment) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoBoxedVerticalAlignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  ProtoVerticalAlignment `protobuf:"varint,1,opt,name=value,proto3,enum=ProtoVerticalAlignment" json:"value,omitempty"`
	IsNull bool                   `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedVerticalAlignment) Reset() {
	*x = ProtoBoxedVerticalAlignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedVerticalAlignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedVerticalAlignment) ProtoMessage() {}

func (x *ProtoBoxedVerticalAlignment) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedVerticalAlignment.ProtoReflect.Descriptor instead.
func (*ProtoBoxedVerticalAlignment) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{20}
}

func (x *ProtoBoxedVerticalAlignment) GetValue() ProtoVerticalAlignment {
	if x != nil {
		return x.Value
	}
	return ProtoVerticalAlignment_TOP
}

func (x *ProtoBoxedVerticalAlignment) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoLinebreak struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *ProtoDocumentElement `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ProtoLinebreak) Reset() {
	*x = ProtoLinebreak{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoLinebreak) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLinebreak) ProtoMessage() {}

func (x *ProtoLinebreak) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLinebreak.ProtoReflect.Descriptor instead.
func (*ProtoLinebreak) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{21}
}

func (x *ProtoLinebreak) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

type ProtoBorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight *ProtoMeasure `protobuf:"bytes,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Color  *ProtoColor   `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *ProtoBorder) Reset() {
	*x = ProtoBorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBorder) ProtoMessage() {}

func (x *ProtoBorder) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBorder.ProtoReflect.Descriptor instead.
func (*ProtoBorder) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{22}
}

func (x *ProtoBorder) GetWeight() *ProtoMeasure {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *ProtoBorder) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

type ProtoSideBorders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top    *ProtoBorder `protobuf:"bytes,1,opt,name=top,proto3" json:"top,omitempty"`
	Right  *ProtoBorder `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
	Bottom *ProtoBorder `protobuf:"bytes,3,opt,name=bottom,proto3" json:"bottom,omitempty"`
	Left   *ProtoBorder `protobuf:"bytes,4,opt,name=left,proto3" json:"left,omitempty"`
}

func (x *ProtoSideBorders) Reset() {
	*x = ProtoSideBorders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoSideBorders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSideBorders) ProtoMessage() {}

func (x *ProtoSideBorders) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSideBorders.ProtoReflect.Descriptor instead.
func (*ProtoSideBorders) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{23}
}

func (x *ProtoSideBorders) GetTop() *ProtoBorder {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *ProtoSideBorders) GetRight() *ProtoBorder {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *ProtoSideBorders) GetBottom() *ProtoBorder {
	if x != nil {
		return x.Bottom
	}
	return nil
}

func (x *ProtoSideBorders) GetLeft() *ProtoBorder {
	if x != nil {
		return x.Left
	}
	return nil
}

type ProtoBoxedPositionMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  ProtoPositionMode `protobuf:"varint,1,opt,name=value,proto3,enum=ProtoPositionMode" json:"value,omitempty"`
	IsNull bool              `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedPositionMode) Reset() {
	*x = ProtoBoxedPositionMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedPositionMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedPositionMode) ProtoMessage() {}

func (x *ProtoBoxedPositionMode) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedPositionMode.ProtoReflect.Descriptor instead.
func (*ProtoBoxedPositionMode) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{24}
}

func (x *ProtoBoxedPositionMode) GetValue() ProtoPositionMode {
	if x != nil {
		return x.Value
	}
	return ProtoPositionMode_CENTER
}

func (x *ProtoBoxedPositionMode) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoColumnSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width            *ProtoBoxedMeasure `protobuf:"bytes,1,opt,name=width,proto3" json:"width,omitempty"`
	InterColumnSpace *ProtoBoxedMeasure `protobuf:"bytes,2,opt,name=interColumnSpace,proto3" json:"interColumnSpace,omitempty"`
	PositionOffset   *ProtoBoxedMeasure `protobuf:"bytes,3,opt,name=positionOffset,proto3" json:"positionOffset,omitempty"`
	PositionMode     ProtoPositionMode  `protobuf:"varint,4,opt,name=positionMode,proto3,enum=ProtoPositionMode" json:"positionMode,omitempty"`
	OutsideMargin    *ProtoBoxedMeasure `protobuf:"bytes,5,opt,name=outsideMargin,proto3" json:"outsideMargin,omitempty"`
}

func (x *ProtoColumnSettings) Reset() {
	*x = ProtoColumnSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoColumnSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoColumnSettings) ProtoMessage() {}

func (x *ProtoColumnSettings) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoColumnSettings.ProtoReflect.Descriptor instead.
func (*ProtoColumnSettings) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{25}
}

func (x *ProtoColumnSettings) GetWidth() *ProtoBoxedMeasure {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ProtoColumnSettings) GetInterColumnSpace() *ProtoBoxedMeasure {
	if x != nil {
		return x.InterColumnSpace
	}
	return nil
}

func (x *ProtoColumnSettings) GetPositionOffset() *ProtoBoxedMeasure {
	if x != nil {
		return x.PositionOffset
	}
	return nil
}

func (x *ProtoColumnSettings) GetPositionMode() ProtoPositionMode {
	if x != nil {
		return x.PositionMode
	}
	return ProtoPositionMode_CENTER
}

func (x *ProtoColumnSettings) GetOutsideMargin() *ProtoBoxedMeasure {
	if x != nil {
		return x.OutsideMargin
	}
	return nil
}

type ProtoGraphicState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bold          *ProtoBoxedBool `protobuf:"bytes,1,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic        *ProtoBoxedBool `protobuf:"bytes,2,opt,name=italic,proto3" json:"italic,omitempty"`
	ColorStack    []*ProtoColor   `protobuf:"bytes,3,rep,name=colorStack,proto3" json:"colorStack,omitempty"`
	Subscript     *ProtoBoxedBool `protobuf:"bytes,4,opt,name=subscript,proto3" json:"subscript,omitempty"`
	Superscript   *ProtoBoxedBool `protobuf:"bytes,5,opt,name=superscript,proto3" json:"superscript,omitempty"`
	Underline     *ProtoBoxedBool `protobuf:"bytes,6,opt,name=underline,proto3" json:"underline,omitempty"`
	Strikethrough *ProtoBoxedBool `protobuf:"bytes,7,opt,name=strikethrough,proto3" json:"strikethrough,omitempty"`
}

func (x *ProtoGraphicState) Reset() {
	*x = ProtoGraphicState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoGraphicState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGraphicState) ProtoMessage() {}

func (x *ProtoGraphicState) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGraphicState.ProtoReflect.Descriptor instead.
func (*ProtoGraphicState) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{26}
}

func (x *ProtoGraphicState) GetBold() *ProtoBoxedBool {
	if x != nil {
		return x.Bold
	}
	return nil
}

func (x *ProtoGraphicState) GetItalic() *ProtoBoxedBool {
	if x != nil {
		return x.Italic
	}
	return nil
}

func (x *ProtoGraphicState) GetColorStack() []*ProtoColor {
	if x != nil {
		return x.ColorStack
	}
	return nil
}

func (x *ProtoGraphicState) GetSubscript() *ProtoBoxedBool {
	if x != nil {
		return x.Subscript
	}
	return nil
}

func (x *ProtoGraphicState) GetSuperscript() *ProtoBoxedBool {
	if x != nil {
		return x.Superscript
	}
	return nil
}

func (x *ProtoGraphicState) GetUnderline() *ProtoBoxedBool {
	if x != nil {
		return x.Underline
	}
	return nil
}

func (x *ProtoGraphicState) GetStrikethrough() *ProtoBoxedBool {
	if x != nil {
		return x.Strikethrough
	}
	return nil
}

type ProtoHtmlParser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProtoHtmlParser) Reset() {
	*x = ProtoHtmlParser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHtmlParser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHtmlParser) ProtoMessage() {}

func (x *ProtoHtmlParser) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHtmlParser.ProtoReflect.Descriptor instead.
func (*ProtoHtmlParser) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{27}
}

type ProtoUnderlineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight   *ProtoMeasure      `protobuf:"bytes,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Mode     ProtoUnderlineMode `protobuf:"varint,2,opt,name=mode,proto3,enum=ProtoUnderlineMode" json:"mode,omitempty"`
	Color    *ProtoColor        `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	OffsetEm int32              `protobuf:"varint,4,opt,name=offsetEm,proto3" json:"offsetEm,omitempty"`
	Style    ProtoRuleStyle     `protobuf:"varint,5,opt,name=style,proto3,enum=ProtoRuleStyle" json:"style,omitempty"`
}

func (x *ProtoUnderlineSpec) Reset() {
	*x = ProtoUnderlineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoUnderlineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUnderlineSpec) ProtoMessage() {}

func (x *ProtoUnderlineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUnderlineSpec.ProtoReflect.Descriptor instead.
func (*ProtoUnderlineSpec) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{28}
}

func (x *ProtoUnderlineSpec) GetWeight() *ProtoMeasure {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *ProtoUnderlineSpec) GetMode() ProtoUnderlineMode {
	if x != nil {
		return x.Mode
	}
	return ProtoUnderlineMode_DUMMY_UNDERLINE_MODE
}

func (x *ProtoUnderlineSpec) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProtoUnderlineSpec) GetOffsetEm() int32 {
	if x != nil {
		return x.OffsetEm
	}
	return 0
}

func (x *ProtoUnderlineSpec) GetStyle() ProtoRuleStyle {
	if x != nil {
		return x.Style
	}
	return ProtoRuleStyle_DUMMY_RULE_STYLE
}

type ProtoBoxedUnderlineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *ProtoUnderlineSpec `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool                `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedUnderlineSpec) Reset() {
	*x = ProtoBoxedUnderlineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedUnderlineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedUnderlineSpec) ProtoMessage() {}

func (x *ProtoBoxedUnderlineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedUnderlineSpec.ProtoReflect.Descriptor instead.
func (*ProtoBoxedUnderlineSpec) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{29}
}

func (x *ProtoBoxedUnderlineSpec) GetValue() *ProtoUnderlineSpec {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProtoBoxedUnderlineSpec) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoCropSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      *ProtoBoxedMeasure `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y      *ProtoBoxedMeasure `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
	Width  *ProtoBoxedMeasure `protobuf:"bytes,3,opt,name=width,proto3" json:"width,omitempty"`
	Height *ProtoBoxedMeasure `protobuf:"bytes,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ProtoCropSettings) Reset() {
	*x = ProtoCropSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoCropSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCropSettings) ProtoMessage() {}

func (x *ProtoCropSettings) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCropSettings.ProtoReflect.Descriptor instead.
func (*ProtoCropSettings) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{30}
}

func (x *ProtoCropSettings) GetX() *ProtoBoxedMeasure {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *ProtoCropSettings) GetY() *ProtoBoxedMeasure {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *ProtoCropSettings) GetWidth() *ProtoBoxedMeasure {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ProtoCropSettings) GetHeight() *ProtoBoxedMeasure {
	if x != nil {
		return x.Height
	}
	return nil
}

type ProtoFlipSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X bool `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y bool `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *ProtoFlipSettings) Reset() {
	*x = ProtoFlipSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoFlipSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoFlipSettings) ProtoMessage() {}

func (x *ProtoFlipSettings) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoFlipSettings.ProtoReflect.Descriptor instead.
func (*ProtoFlipSettings) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{31}
}

func (x *ProtoFlipSettings) GetX() bool {
	if x != nil {
		return x.X
	}
	return false
}

func (x *ProtoFlipSettings) GetY() bool {
	if x != nil {
		return x.Y
	}
	return false
}

type ProtoDocumentElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *ProtoDocumentElement `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ProtoDocumentElement) Reset() {
	*x = ProtoDocumentElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDocumentElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDocumentElement) ProtoMessage() {}

func (x *ProtoDocumentElement) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDocumentElement.ProtoReflect.Descriptor instead.
func (*ProtoDocumentElement) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{32}
}

func (x *ProtoDocumentElement) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

type ProtoBranchDocumentElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent    *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ProtoBranchDocumentElement) Reset() {
	*x = ProtoBranchDocumentElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBranchDocumentElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBranchDocumentElement) ProtoMessage() {}

func (x *ProtoBranchDocumentElement) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBranchDocumentElement.ProtoReflect.Descriptor instead.
func (*ProtoBranchDocumentElement) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{33}
}

func (x *ProtoBranchDocumentElement) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoBranchDocumentElement) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

type ProtoLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Url       string                  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ProtoLink) Reset() {
	*x = ProtoLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoLink) ProtoMessage() {}

func (x *ProtoLink) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoLink.ProtoReflect.Descriptor instead.
func (*ProtoLink) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{34}
}

func (x *ProtoLink) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ProtoListLevelSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListSettingName string                    `protobuf:"bytes,1,opt,name=listSettingName,proto3" json:"listSettingName,omitempty"`
	FontSize        *ProtoBoxedUint32         `protobuf:"bytes,2,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	Type            ProtoListLevelSettingType `protobuf:"varint,3,opt,name=type,proto3,enum=ProtoListLevelSettingType" json:"type,omitempty"`
	Level           int32                     `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Prefix          string                    `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix          string                    `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	FixFontFamily   *ProtoFont                `protobuf:"bytes,7,opt,name=fixFontFamily,proto3" json:"fixFontFamily,omitempty"`
	FixBold         bool                      `protobuf:"varint,8,opt,name=fixBold,proto3" json:"fixBold,omitempty"`
	FixItalic       bool                      `protobuf:"varint,9,opt,name=fixItalic,proto3" json:"fixItalic,omitempty"`
	IndentionWidth  int32                     `protobuf:"varint,10,opt,name=indentionWidth,proto3" json:"indentionWidth,omitempty"`
	Color           *ProtoColor               `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	ImageName       string                    `protobuf:"bytes,12,opt,name=imageName,proto3" json:"imageName,omitempty"`
	FontFamily      *ProtoFont                `protobuf:"bytes,13,opt,name=fontFamily,proto3" json:"fontFamily,omitempty"`
	Bold            *ProtoBoxedBool           `protobuf:"bytes,14,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic          *ProtoBoxedBool           `protobuf:"bytes,15,opt,name=italic,proto3" json:"italic,omitempty"`
	NumberType      ProtoNumberType           `protobuf:"varint,16,opt,name=numberType,proto3,enum=ProtoNumberType" json:"numberType,omitempty"`
	Character       string                    `protobuf:"bytes,17,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *ProtoListLevelSetting) Reset() {
	*x = ProtoListLevelSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoListLevelSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoListLevelSetting) ProtoMessage() {}

func (x *ProtoListLevelSetting) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoListLevelSetting.ProtoReflect.Descriptor instead.
func (*ProtoListLevelSetting) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{35}
}

func (x *ProtoListLevelSetting) GetListSettingName() string {
	if x != nil {
		return x.ListSettingName
	}
	return ""
}

func (x *ProtoListLevelSetting) GetFontSize() *ProtoBoxedUint32 {
	if x != nil {
		return x.FontSize
	}
	return nil
}

func (x *ProtoListLevelSetting) GetType() ProtoListLevelSettingType {
	if x != nil {
		return x.Type
	}
	return ProtoListLevelSettingType_UNNUMBERED
}

func (x *ProtoListLevelSetting) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProtoListLevelSetting) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ProtoListLevelSetting) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ProtoListLevelSetting) GetFixFontFamily() *ProtoFont {
	if x != nil {
		return x.FixFontFamily
	}
	return nil
}

func (x *ProtoListLevelSetting) GetFixBold() bool {
	if x != nil {
		return x.FixBold
	}
	return false
}

func (x *ProtoListLevelSetting) GetFixItalic() bool {
	if x != nil {
		return x.FixItalic
	}
	return false
}

func (x *ProtoListLevelSetting) GetIndentionWidth() int32 {
	if x != nil {
		return x.IndentionWidth
	}
	return 0
}

func (x *ProtoListLevelSetting) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProtoListLevelSetting) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ProtoListLevelSetting) GetFontFamily() *ProtoFont {
	if x != nil {
		return x.FontFamily
	}
	return nil
}

func (x *ProtoListLevelSetting) GetBold() *ProtoBoxedBool {
	if x != nil {
		return x.Bold
	}
	return nil
}

func (x *ProtoListLevelSetting) GetItalic() *ProtoBoxedBool {
	if x != nil {
		return x.Italic
	}
	return nil
}

func (x *ProtoListLevelSetting) GetNumberType() ProtoNumberType {
	if x != nil {
		return x.NumberType
	}
	return ProtoNumberType_ARABIC
}

func (x *ProtoListLevelSetting) GetCharacter() string {
	if x != nil {
		return x.Character
	}
	return ""
}

type ProtoImageListLevelSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListSettingName string                    `protobuf:"bytes,1,opt,name=listSettingName,proto3" json:"listSettingName,omitempty"`
	FontSize        *ProtoBoxedUint32         `protobuf:"bytes,2,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	Type            ProtoListLevelSettingType `protobuf:"varint,3,opt,name=type,proto3,enum=ProtoListLevelSettingType" json:"type,omitempty"`
	Level           int32                     `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Prefix          string                    `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix          string                    `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	FixFontFamily   *ProtoFont                `protobuf:"bytes,7,opt,name=fixFontFamily,proto3" json:"fixFontFamily,omitempty"`
	FixBold         bool                      `protobuf:"varint,8,opt,name=fixBold,proto3" json:"fixBold,omitempty"`
	FixItalic       bool                      `protobuf:"varint,9,opt,name=fixItalic,proto3" json:"fixItalic,omitempty"`
	IndentionWidth  int32                     `protobuf:"varint,10,opt,name=indentionWidth,proto3" json:"indentionWidth,omitempty"`
	Color           *ProtoColor               `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	ImageName       string                    `protobuf:"bytes,12,opt,name=imageName,proto3" json:"imageName,omitempty"`
}

func (x *ProtoImageListLevelSetting) Reset() {
	*x = ProtoImageListLevelSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoImageListLevelSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoImageListLevelSetting) ProtoMessage() {}

func (x *ProtoImageListLevelSetting) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoImageListLevelSetting.ProtoReflect.Descriptor instead.
func (*ProtoImageListLevelSetting) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{36}
}

func (x *ProtoImageListLevelSetting) GetListSettingName() string {
	if x != nil {
		return x.ListSettingName
	}
	return ""
}

func (x *ProtoImageListLevelSetting) GetFontSize() *ProtoBoxedUint32 {
	if x != nil {
		return x.FontSize
	}
	return nil
}

func (x *ProtoImageListLevelSetting) GetType() ProtoListLevelSettingType {
	if x != nil {
		return x.Type
	}
	return ProtoListLevelSettingType_UNNUMBERED
}

func (x *ProtoImageListLevelSetting) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProtoImageListLevelSetting) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ProtoImageListLevelSetting) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ProtoImageListLevelSetting) GetFixFontFamily() *ProtoFont {
	if x != nil {
		return x.FixFontFamily
	}
	return nil
}

func (x *ProtoImageListLevelSetting) GetFixBold() bool {
	if x != nil {
		return x.FixBold
	}
	return false
}

func (x *ProtoImageListLevelSetting) GetFixItalic() bool {
	if x != nil {
		return x.FixItalic
	}
	return false
}

func (x *ProtoImageListLevelSetting) GetIndentionWidth() int32 {
	if x != nil {
		return x.IndentionWidth
	}
	return 0
}

func (x *ProtoImageListLevelSetting) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProtoImageListLevelSetting) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type ProtoTextListLevelSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListSettingName string                    `protobuf:"bytes,1,opt,name=listSettingName,proto3" json:"listSettingName,omitempty"`
	FontSize        *ProtoBoxedUint32         `protobuf:"bytes,2,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	Type            ProtoListLevelSettingType `protobuf:"varint,3,opt,name=type,proto3,enum=ProtoListLevelSettingType" json:"type,omitempty"`
	Level           int32                     `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Prefix          string                    `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix          string                    `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	FixFontFamily   *ProtoFont                `protobuf:"bytes,7,opt,name=fixFontFamily,proto3" json:"fixFontFamily,omitempty"`
	FixBold         bool                      `protobuf:"varint,8,opt,name=fixBold,proto3" json:"fixBold,omitempty"`
	FixItalic       bool                      `protobuf:"varint,9,opt,name=fixItalic,proto3" json:"fixItalic,omitempty"`
	IndentionWidth  int32                     `protobuf:"varint,10,opt,name=indentionWidth,proto3" json:"indentionWidth,omitempty"`
	Color           *ProtoColor               `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	FontFamily      *ProtoFont                `protobuf:"bytes,12,opt,name=fontFamily,proto3" json:"fontFamily,omitempty"`
	Bold            *ProtoBoxedBool           `protobuf:"bytes,13,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic          *ProtoBoxedBool           `protobuf:"bytes,14,opt,name=italic,proto3" json:"italic,omitempty"`
}

func (x *ProtoTextListLevelSetting) Reset() {
	*x = ProtoTextListLevelSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTextListLevelSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTextListLevelSetting) ProtoMessage() {}

func (x *ProtoTextListLevelSetting) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTextListLevelSetting.ProtoReflect.Descriptor instead.
func (*ProtoTextListLevelSetting) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{37}
}

func (x *ProtoTextListLevelSetting) GetListSettingName() string {
	if x != nil {
		return x.ListSettingName
	}
	return ""
}

func (x *ProtoTextListLevelSetting) GetFontSize() *ProtoBoxedUint32 {
	if x != nil {
		return x.FontSize
	}
	return nil
}

func (x *ProtoTextListLevelSetting) GetType() ProtoListLevelSettingType {
	if x != nil {
		return x.Type
	}
	return ProtoListLevelSettingType_UNNUMBERED
}

func (x *ProtoTextListLevelSetting) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProtoTextListLevelSetting) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ProtoTextListLevelSetting) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ProtoTextListLevelSetting) GetFixFontFamily() *ProtoFont {
	if x != nil {
		return x.FixFontFamily
	}
	return nil
}

func (x *ProtoTextListLevelSetting) GetFixBold() bool {
	if x != nil {
		return x.FixBold
	}
	return false
}

func (x *ProtoTextListLevelSetting) GetFixItalic() bool {
	if x != nil {
		return x.FixItalic
	}
	return false
}

func (x *ProtoTextListLevelSetting) GetIndentionWidth() int32 {
	if x != nil {
		return x.IndentionWidth
	}
	return 0
}

func (x *ProtoTextListLevelSetting) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProtoTextListLevelSetting) GetFontFamily() *ProtoFont {
	if x != nil {
		return x.FontFamily
	}
	return nil
}

func (x *ProtoTextListLevelSetting) GetBold() *ProtoBoxedBool {
	if x != nil {
		return x.Bold
	}
	return nil
}

func (x *ProtoTextListLevelSetting) GetItalic() *ProtoBoxedBool {
	if x != nil {
		return x.Italic
	}
	return nil
}

type ProtoNumberListLevelSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListSettingName string                    `protobuf:"bytes,1,opt,name=listSettingName,proto3" json:"listSettingName,omitempty"`
	FontSize        *ProtoBoxedUint32         `protobuf:"bytes,2,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	Type            ProtoListLevelSettingType `protobuf:"varint,3,opt,name=type,proto3,enum=ProtoListLevelSettingType" json:"type,omitempty"`
	Level           int32                     `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Prefix          string                    `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix          string                    `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	FixFontFamily   *ProtoFont                `protobuf:"bytes,7,opt,name=fixFontFamily,proto3" json:"fixFontFamily,omitempty"`
	FixBold         bool                      `protobuf:"varint,8,opt,name=fixBold,proto3" json:"fixBold,omitempty"`
	FixItalic       bool                      `protobuf:"varint,9,opt,name=fixItalic,proto3" json:"fixItalic,omitempty"`
	IndentionWidth  int32                     `protobuf:"varint,10,opt,name=indentionWidth,proto3" json:"indentionWidth,omitempty"`
	Color           *ProtoColor               `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	FontFamily      *ProtoFont                `protobuf:"bytes,12,opt,name=fontFamily,proto3" json:"fontFamily,omitempty"`
	Bold            *ProtoBoxedBool           `protobuf:"bytes,13,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic          *ProtoBoxedBool           `protobuf:"bytes,14,opt,name=italic,proto3" json:"italic,omitempty"`
	NumberType      ProtoNumberType           `protobuf:"varint,15,opt,name=numberType,proto3,enum=ProtoNumberType" json:"numberType,omitempty"`
}

func (x *ProtoNumberListLevelSetting) Reset() {
	*x = ProtoNumberListLevelSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoNumberListLevelSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoNumberListLevelSetting) ProtoMessage() {}

func (x *ProtoNumberListLevelSetting) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoNumberListLevelSetting.ProtoReflect.Descriptor instead.
func (*ProtoNumberListLevelSetting) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{38}
}

func (x *ProtoNumberListLevelSetting) GetListSettingName() string {
	if x != nil {
		return x.ListSettingName
	}
	return ""
}

func (x *ProtoNumberListLevelSetting) GetFontSize() *ProtoBoxedUint32 {
	if x != nil {
		return x.FontSize
	}
	return nil
}

func (x *ProtoNumberListLevelSetting) GetType() ProtoListLevelSettingType {
	if x != nil {
		return x.Type
	}
	return ProtoListLevelSettingType_UNNUMBERED
}

func (x *ProtoNumberListLevelSetting) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProtoNumberListLevelSetting) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ProtoNumberListLevelSetting) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ProtoNumberListLevelSetting) GetFixFontFamily() *ProtoFont {
	if x != nil {
		return x.FixFontFamily
	}
	return nil
}

func (x *ProtoNumberListLevelSetting) GetFixBold() bool {
	if x != nil {
		return x.FixBold
	}
	return false
}

func (x *ProtoNumberListLevelSetting) GetFixItalic() bool {
	if x != nil {
		return x.FixItalic
	}
	return false
}

func (x *ProtoNumberListLevelSetting) GetIndentionWidth() int32 {
	if x != nil {
		return x.IndentionWidth
	}
	return 0
}

func (x *ProtoNumberListLevelSetting) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProtoNumberListLevelSetting) GetFontFamily() *ProtoFont {
	if x != nil {
		return x.FontFamily
	}
	return nil
}

func (x *ProtoNumberListLevelSetting) GetBold() *ProtoBoxedBool {
	if x != nil {
		return x.Bold
	}
	return nil
}

func (x *ProtoNumberListLevelSetting) GetItalic() *ProtoBoxedBool {
	if x != nil {
		return x.Italic
	}
	return nil
}

func (x *ProtoNumberListLevelSetting) GetNumberType() ProtoNumberType {
	if x != nil {
		return x.NumberType
	}
	return ProtoNumberType_ARABIC
}

type ProtoUnnumberedListLevelSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListSettingName string                    `protobuf:"bytes,1,opt,name=listSettingName,proto3" json:"listSettingName,omitempty"`
	FontSize        *ProtoBoxedUint32         `protobuf:"bytes,2,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	Type            ProtoListLevelSettingType `protobuf:"varint,3,opt,name=type,proto3,enum=ProtoListLevelSettingType" json:"type,omitempty"`
	Level           int32                     `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Prefix          string                    `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix          string                    `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	FixFontFamily   *ProtoFont                `protobuf:"bytes,7,opt,name=fixFontFamily,proto3" json:"fixFontFamily,omitempty"`
	FixBold         bool                      `protobuf:"varint,8,opt,name=fixBold,proto3" json:"fixBold,omitempty"`
	FixItalic       bool                      `protobuf:"varint,9,opt,name=fixItalic,proto3" json:"fixItalic,omitempty"`
	IndentionWidth  int32                     `protobuf:"varint,10,opt,name=indentionWidth,proto3" json:"indentionWidth,omitempty"`
	Color           *ProtoColor               `protobuf:"bytes,11,opt,name=color,proto3" json:"color,omitempty"`
	FontFamily      *ProtoFont                `protobuf:"bytes,12,opt,name=fontFamily,proto3" json:"fontFamily,omitempty"`
	Bold            *ProtoBoxedBool           `protobuf:"bytes,13,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic          *ProtoBoxedBool           `protobuf:"bytes,14,opt,name=italic,proto3" json:"italic,omitempty"`
	Character       string                    `protobuf:"bytes,15,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *ProtoUnnumberedListLevelSetting) Reset() {
	*x = ProtoUnnumberedListLevelSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoUnnumberedListLevelSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUnnumberedListLevelSetting) ProtoMessage() {}

func (x *ProtoUnnumberedListLevelSetting) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUnnumberedListLevelSetting.ProtoReflect.Descriptor instead.
func (*ProtoUnnumberedListLevelSetting) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{39}
}

func (x *ProtoUnnumberedListLevelSetting) GetListSettingName() string {
	if x != nil {
		return x.ListSettingName
	}
	return ""
}

func (x *ProtoUnnumberedListLevelSetting) GetFontSize() *ProtoBoxedUint32 {
	if x != nil {
		return x.FontSize
	}
	return nil
}

func (x *ProtoUnnumberedListLevelSetting) GetType() ProtoListLevelSettingType {
	if x != nil {
		return x.Type
	}
	return ProtoListLevelSettingType_UNNUMBERED
}

func (x *ProtoUnnumberedListLevelSetting) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProtoUnnumberedListLevelSetting) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ProtoUnnumberedListLevelSetting) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *ProtoUnnumberedListLevelSetting) GetFixFontFamily() *ProtoFont {
	if x != nil {
		return x.FixFontFamily
	}
	return nil
}

func (x *ProtoUnnumberedListLevelSetting) GetFixBold() bool {
	if x != nil {
		return x.FixBold
	}
	return false
}

func (x *ProtoUnnumberedListLevelSetting) GetFixItalic() bool {
	if x != nil {
		return x.FixItalic
	}
	return false
}

func (x *ProtoUnnumberedListLevelSetting) GetIndentionWidth() int32 {
	if x != nil {
		return x.IndentionWidth
	}
	return 0
}

func (x *ProtoUnnumberedListLevelSetting) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProtoUnnumberedListLevelSetting) GetFontFamily() *ProtoFont {
	if x != nil {
		return x.FontFamily
	}
	return nil
}

func (x *ProtoUnnumberedListLevelSetting) GetBold() *ProtoBoxedBool {
	if x != nil {
		return x.Bold
	}
	return nil
}

func (x *ProtoUnnumberedListLevelSetting) GetItalic() *ProtoBoxedBool {
	if x != nil {
		return x.Italic
	}
	return nil
}

func (x *ProtoUnnumberedListLevelSetting) GetCharacter() string {
	if x != nil {
		return x.Character
	}
	return ""
}

type ProtoListSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent                  *ProtoDocumentElement    `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Name                    string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ListLevelSettings       []*ProtoListLevelSetting `protobuf:"bytes,3,rep,name=listLevelSettings,proto3" json:"listLevelSettings,omitempty"`
	DefaultListLevelSetting *ProtoListLevelSetting   `protobuf:"bytes,4,opt,name=defaultListLevelSetting,proto3" json:"defaultListLevelSetting,omitempty"`
}

func (x *ProtoListSetting) Reset() {
	*x = ProtoListSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoListSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoListSetting) ProtoMessage() {}

func (x *ProtoListSetting) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoListSetting.ProtoReflect.Descriptor instead.
func (*ProtoListSetting) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{40}
}

func (x *ProtoListSetting) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoListSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtoListSetting) GetListLevelSettings() []*ProtoListLevelSetting {
	if x != nil {
		return x.ListLevelSettings
	}
	return nil
}

func (x *ProtoListSetting) GetDefaultListLevelSetting() *ProtoListLevelSetting {
	if x != nil {
		return x.DefaultListLevelSetting
	}
	return nil
}

type ProtoBoxedListSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *ProtoListSetting `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IsNull bool              `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedListSetting) Reset() {
	*x = ProtoBoxedListSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedListSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedListSetting) ProtoMessage() {}

func (x *ProtoBoxedListSetting) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedListSetting.ProtoReflect.Descriptor instead.
func (*ProtoBoxedListSetting) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{41}
}

func (x *ProtoBoxedListSetting) GetValue() *ProtoListSetting {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProtoBoxedListSetting) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoNamedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent    *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Name      string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProtoNamedString) Reset() {
	*x = ProtoNamedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoNamedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoNamedString) ProtoMessage() {}

func (x *ProtoNamedString) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoNamedString.ProtoReflect.Descriptor instead.
func (*ProtoNamedString) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{42}
}

func (x *ProtoNamedString) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoNamedString) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoNamedString) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProtoParagraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent    *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Format    *ProtoParagraphFormat   `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Overwrite *ProtoParagraphFormat   `protobuf:"bytes,4,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
}

func (x *ProtoParagraph) Reset() {
	*x = ProtoParagraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoParagraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoParagraph) ProtoMessage() {}

func (x *ProtoParagraph) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoParagraph.ProtoReflect.Descriptor instead.
func (*ProtoParagraph) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{43}
}

func (x *ProtoParagraph) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoParagraph) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoParagraph) GetFormat() *ProtoParagraphFormat {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ProtoParagraph) GetOverwrite() *ProtoParagraphFormat {
	if x != nil {
		return x.Overwrite
	}
	return nil
}

type ProtoParagraphFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseFormat           *ProtoParagraphFormat          `protobuf:"bytes,1,opt,name=baseFormat,proto3" json:"baseFormat,omitempty"`
	Name                 *ProtoBoxedString              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Default              *ProtoBoxedBool                `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	Font                 *ProtoBoxedFont                `protobuf:"bytes,4,opt,name=font,proto3" json:"font,omitempty"`
	Bold                 *ProtoBoxedBool                `protobuf:"bytes,5,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic               *ProtoBoxedBool                `protobuf:"bytes,6,opt,name=italic,proto3" json:"italic,omitempty"`
	FontColor            *ProtoBoxedColor               `protobuf:"bytes,7,opt,name=fontColor,proto3" json:"fontColor,omitempty"`
	Underline            *ProtoBoxedUnderlineSpec       `protobuf:"bytes,8,opt,name=underline,proto3" json:"underline,omitempty"`
	FontSize             *ProtoBoxedMeasure             `protobuf:"bytes,9,opt,name=fontSize,proto3" json:"fontSize,omitempty"`
	CharacterWidth       *ProtoBoxedMeasure             `protobuf:"bytes,10,opt,name=characterWidth,proto3" json:"characterWidth,omitempty"`
	CharacterSpacing     *ProtoBoxedMeasure             `protobuf:"bytes,11,opt,name=characterSpacing,proto3" json:"characterSpacing,omitempty"`
	LineFeed             *ProtoBoxedMeasure             `protobuf:"bytes,12,opt,name=lineFeed,proto3" json:"lineFeed,omitempty"`
	Alignment            *ProtoBoxedHorizontalAlignment `protobuf:"bytes,13,opt,name=alignment,proto3" json:"alignment,omitempty"`
	IndentionWidth       *ProtoBoxedMeasure             `protobuf:"bytes,14,opt,name=indentionWidth,proto3" json:"indentionWidth,omitempty"`
	IndentionLevel       *ProtoBoxedInt32               `protobuf:"bytes,15,opt,name=indentionLevel,proto3" json:"indentionLevel,omitempty"`
	SpaceAbove           *ProtoBoxedMeasure             `protobuf:"bytes,16,opt,name=spaceAbove,proto3" json:"spaceAbove,omitempty"`
	SpaceBelow           *ProtoBoxedMeasure             `protobuf:"bytes,17,opt,name=spaceBelow,proto3" json:"spaceBelow,omitempty"`
	WidowSetting         *ProtoBoxedInt32               `protobuf:"bytes,18,opt,name=widowSetting,proto3" json:"widowSetting,omitempty"`
	OrphanSetting        *ProtoBoxedInt32               `protobuf:"bytes,19,opt,name=orphanSetting,proto3" json:"orphanSetting,omitempty"`
	WidowPriority        *ProtoBoxedInt32               `protobuf:"bytes,20,opt,name=widowPriority,proto3" json:"widowPriority,omitempty"`
	Strikethrough        *ProtoBoxedStrikethroughSpec   `protobuf:"bytes,21,opt,name=strikethrough,proto3" json:"strikethrough,omitempty"`
	SuperscriptSubscript *ProtoBoxedSPBMode             `protobuf:"bytes,22,opt,name=superscriptSubscript,proto3" json:"superscriptSubscript,omitempty"`
	BackgroundColor      *ProtoBoxedColor               `protobuf:"bytes,23,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	ListSetting          *ProtoBoxedListSetting         `protobuf:"bytes,24,opt,name=listSetting,proto3" json:"listSetting,omitempty"`
	Hyphenation          *ProtoBoxedBool                `protobuf:"bytes,25,opt,name=hyphenation,proto3" json:"hyphenation,omitempty"`
	PreNamedString       *ProtoBoxedString              `protobuf:"bytes,26,opt,name=preNamedString,proto3" json:"preNamedString,omitempty"`
	PostNamedString      *ProtoBoxedString              `protobuf:"bytes,27,opt,name=postNamedString,proto3" json:"postNamedString,omitempty"`
	SemanticType         *ProtoBoxedString              `protobuf:"bytes,28,opt,name=semanticType,proto3" json:"semanticType,omitempty"`
}

func (x *ProtoParagraphFormat) Reset() {
	*x = ProtoParagraphFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoParagraphFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoParagraphFormat) ProtoMessage() {}

func (x *ProtoParagraphFormat) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoParagraphFormat.ProtoReflect.Descriptor instead.
func (*ProtoParagraphFormat) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{44}
}

func (x *ProtoParagraphFormat) GetBaseFormat() *ProtoParagraphFormat {
	if x != nil {
		return x.BaseFormat
	}
	return nil
}

func (x *ProtoParagraphFormat) GetName() *ProtoBoxedString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProtoParagraphFormat) GetDefault() *ProtoBoxedBool {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *ProtoParagraphFormat) GetFont() *ProtoBoxedFont {
	if x != nil {
		return x.Font
	}
	return nil
}

func (x *ProtoParagraphFormat) GetBold() *ProtoBoxedBool {
	if x != nil {
		return x.Bold
	}
	return nil
}

func (x *ProtoParagraphFormat) GetItalic() *ProtoBoxedBool {
	if x != nil {
		return x.Italic
	}
	return nil
}

func (x *ProtoParagraphFormat) GetFontColor() *ProtoBoxedColor {
	if x != nil {
		return x.FontColor
	}
	return nil
}

func (x *ProtoParagraphFormat) GetUnderline() *ProtoBoxedUnderlineSpec {
	if x != nil {
		return x.Underline
	}
	return nil
}

func (x *ProtoParagraphFormat) GetFontSize() *ProtoBoxedMeasure {
	if x != nil {
		return x.FontSize
	}
	return nil
}

func (x *ProtoParagraphFormat) GetCharacterWidth() *ProtoBoxedMeasure {
	if x != nil {
		return x.CharacterWidth
	}
	return nil
}

func (x *ProtoParagraphFormat) GetCharacterSpacing() *ProtoBoxedMeasure {
	if x != nil {
		return x.CharacterSpacing
	}
	return nil
}

func (x *ProtoParagraphFormat) GetLineFeed() *ProtoBoxedMeasure {
	if x != nil {
		return x.LineFeed
	}
	return nil
}

func (x *ProtoParagraphFormat) GetAlignment() *ProtoBoxedHorizontalAlignment {
	if x != nil {
		return x.Alignment
	}
	return nil
}

func (x *ProtoParagraphFormat) GetIndentionWidth() *ProtoBoxedMeasure {
	if x != nil {
		return x.IndentionWidth
	}
	return nil
}

func (x *ProtoParagraphFormat) GetIndentionLevel() *ProtoBoxedInt32 {
	if x != nil {
		return x.IndentionLevel
	}
	return nil
}

func (x *ProtoParagraphFormat) GetSpaceAbove() *ProtoBoxedMeasure {
	if x != nil {
		return x.SpaceAbove
	}
	return nil
}

func (x *ProtoParagraphFormat) GetSpaceBelow() *ProtoBoxedMeasure {
	if x != nil {
		return x.SpaceBelow
	}
	return nil
}

func (x *ProtoParagraphFormat) GetWidowSetting() *ProtoBoxedInt32 {
	if x != nil {
		return x.WidowSetting
	}
	return nil
}

func (x *ProtoParagraphFormat) GetOrphanSetting() *ProtoBoxedInt32 {
	if x != nil {
		return x.OrphanSetting
	}
	return nil
}

func (x *ProtoParagraphFormat) GetWidowPriority() *ProtoBoxedInt32 {
	if x != nil {
		return x.WidowPriority
	}
	return nil
}

func (x *ProtoParagraphFormat) GetStrikethrough() *ProtoBoxedStrikethroughSpec {
	if x != nil {
		return x.Strikethrough
	}
	return nil
}

func (x *ProtoParagraphFormat) GetSuperscriptSubscript() *ProtoBoxedSPBMode {
	if x != nil {
		return x.SuperscriptSubscript
	}
	return nil
}

func (x *ProtoParagraphFormat) GetBackgroundColor() *ProtoBoxedColor {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *ProtoParagraphFormat) GetListSetting() *ProtoBoxedListSetting {
	if x != nil {
		return x.ListSetting
	}
	return nil
}

func (x *ProtoParagraphFormat) GetHyphenation() *ProtoBoxedBool {
	if x != nil {
		return x.Hyphenation
	}
	return nil
}

func (x *ProtoParagraphFormat) GetPreNamedString() *ProtoBoxedString {
	if x != nil {
		return x.PreNamedString
	}
	return nil
}

func (x *ProtoParagraphFormat) GetPostNamedString() *ProtoBoxedString {
	if x != nil {
		return x.PostNamedString
	}
	return nil
}

func (x *ProtoParagraphFormat) GetSemanticType() *ProtoBoxedString {
	if x != nil {
		return x.SemanticType
	}
	return nil
}

type ProtoSection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren      []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent         *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	PageWidth      *ProtoMeasure           `protobuf:"bytes,3,opt,name=pageWidth,proto3" json:"pageWidth,omitempty"`
	PageDepth      *ProtoMeasure           `protobuf:"bytes,4,opt,name=pageDepth,proto3" json:"pageDepth,omitempty"`
	ColumnSettings *ProtoColumnSettings    `protobuf:"bytes,5,opt,name=columnSettings,proto3" json:"columnSettings,omitempty"`
}

func (x *ProtoSection) Reset() {
	*x = ProtoSection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoSection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSection) ProtoMessage() {}

func (x *ProtoSection) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSection.ProtoReflect.Descriptor instead.
func (*ProtoSection) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{45}
}

func (x *ProtoSection) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoSection) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoSection) GetPageWidth() *ProtoMeasure {
	if x != nil {
		return x.PageWidth
	}
	return nil
}

func (x *ProtoSection) GetPageDepth() *ProtoMeasure {
	if x != nil {
		return x.PageDepth
	}
	return nil
}

func (x *ProtoSection) GetColumnSettings() *ProtoColumnSettings {
	if x != nil {
		return x.ColumnSettings
	}
	return nil
}

type ProtoSpaceVertically struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *ProtoDocumentElement `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Space  *ProtoMeasure         `protobuf:"bytes,2,opt,name=space,proto3" json:"space,omitempty"`
}

func (x *ProtoSpaceVertically) Reset() {
	*x = ProtoSpaceVertically{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoSpaceVertically) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSpaceVertically) ProtoMessage() {}

func (x *ProtoSpaceVertically) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSpaceVertically.ProtoReflect.Descriptor instead.
func (*ProtoSpaceVertically) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{46}
}

func (x *ProtoSpaceVertically) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoSpaceVertically) GetSpace() *ProtoMeasure {
	if x != nil {
		return x.Space
	}
	return nil
}

type ProtoSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren     []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent        *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Bold          *ProtoBoxedBool         `protobuf:"bytes,3,opt,name=bold,proto3" json:"bold,omitempty"`
	Italic        *ProtoBoxedBool         `protobuf:"bytes,4,opt,name=italic,proto3" json:"italic,omitempty"`
	Color         *ProtoColor             `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Subscript     *ProtoBoxedBool         `protobuf:"bytes,6,opt,name=subscript,proto3" json:"subscript,omitempty"`
	Superscript   *ProtoBoxedBool         `protobuf:"bytes,7,opt,name=superscript,proto3" json:"superscript,omitempty"`
	Underline     *ProtoBoxedBool         `protobuf:"bytes,8,opt,name=underline,proto3" json:"underline,omitempty"`
	Strikethrough *ProtoBoxedBool         `protobuf:"bytes,9,opt,name=strikethrough,proto3" json:"strikethrough,omitempty"`
}

func (x *ProtoSpan) Reset() {
	*x = ProtoSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoSpan) ProtoMessage() {}

func (x *ProtoSpan) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoSpan.ProtoReflect.Descriptor instead.
func (*ProtoSpan) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{47}
}

func (x *ProtoSpan) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoSpan) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoSpan) GetBold() *ProtoBoxedBool {
	if x != nil {
		return x.Bold
	}
	return nil
}

func (x *ProtoSpan) GetItalic() *ProtoBoxedBool {
	if x != nil {
		return x.Italic
	}
	return nil
}

func (x *ProtoSpan) GetColor() *ProtoColor {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ProtoSpan) GetSubscript() *ProtoBoxedBool {
	if x != nil {
		return x.Subscript
	}
	return nil
}

func (x *ProtoSpan) GetSuperscript() *ProtoBoxedBool {
	if x != nil {
		return x.Superscript
	}
	return nil
}

func (x *ProtoSpan) GetUnderline() *ProtoBoxedBool {
	if x != nil {
		return x.Underline
	}
	return nil
}

func (x *ProtoSpan) GetStrikethrough() *ProtoBoxedBool {
	if x != nil {
		return x.Strikethrough
	}
	return nil
}

type ProtoTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren  []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent     *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Settings   *ProtoTableSettings     `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	ConfigName string                  `protobuf:"bytes,4,opt,name=configName,proto3" json:"configName,omitempty"`
}

func (x *ProtoTable) Reset() {
	*x = ProtoTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTable) ProtoMessage() {}

func (x *ProtoTable) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTable.ProtoReflect.Descriptor instead.
func (*ProtoTable) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{48}
}

func (x *ProtoTable) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoTable) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTable) GetSettings() *ProtoTableSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProtoTable) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

type ProtoTableConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent     *ProtoDocumentElement `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Settings   *ProtoTableSettings   `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	ConfigName string                `protobuf:"bytes,3,opt,name=configName,proto3" json:"configName,omitempty"`
}

func (x *ProtoTableConfig) Reset() {
	*x = ProtoTableConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableConfig) ProtoMessage() {}

func (x *ProtoTableConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableConfig.ProtoReflect.Descriptor instead.
func (*ProtoTableConfig) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{49}
}

func (x *ProtoTableConfig) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTableConfig) GetSettings() *ProtoTableSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProtoTableConfig) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

type ProtoTableSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XOffset      *ProtoMeasure     `protobuf:"bytes,1,opt,name=xOffset,proto3" json:"xOffset,omitempty"`
	LeftMeasure  *ProtoBoxedBool   `protobuf:"bytes,2,opt,name=leftMeasure,proto3" json:"leftMeasure,omitempty"`
	Width        *ProtoMeasure     `protobuf:"bytes,3,opt,name=width,proto3" json:"width,omitempty"`
	RepeatHeader *ProtoBoxedUint32 `protobuf:"bytes,4,opt,name=repeatHeader,proto3" json:"repeatHeader,omitempty"`
}

func (x *ProtoTableSettings) Reset() {
	*x = ProtoTableSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableSettings) ProtoMessage() {}

func (x *ProtoTableSettings) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableSettings.ProtoReflect.Descriptor instead.
func (*ProtoTableSettings) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{50}
}

func (x *ProtoTableSettings) GetXOffset() *ProtoMeasure {
	if x != nil {
		return x.XOffset
	}
	return nil
}

func (x *ProtoTableSettings) GetLeftMeasure() *ProtoBoxedBool {
	if x != nil {
		return x.LeftMeasure
	}
	return nil
}

func (x *ProtoTableSettings) GetWidth() *ProtoMeasure {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ProtoTableSettings) GetRepeatHeader() *ProtoBoxedUint32 {
	if x != nil {
		return x.RepeatHeader
	}
	return nil
}

type ProtoBoxedTableContentGroupType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  ProtoTableContentGroupType `protobuf:"varint,1,opt,name=value,proto3,enum=ProtoTableContentGroupType" json:"value,omitempty"`
	IsNull bool                       `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedTableContentGroupType) Reset() {
	*x = ProtoBoxedTableContentGroupType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedTableContentGroupType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedTableContentGroupType) ProtoMessage() {}

func (x *ProtoBoxedTableContentGroupType) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedTableContentGroupType.ProtoReflect.Descriptor instead.
func (*ProtoBoxedTableContentGroupType) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{51}
}

func (x *ProtoBoxedTableContentGroupType) GetValue() ProtoTableContentGroupType {
	if x != nil {
		return x.Value
	}
	return ProtoTableContentGroupType_BODY
}

func (x *ProtoBoxedTableContentGroupType) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoTableContentGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren []*ProtoDocumentElement         `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent    *ProtoDocumentElement           `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Settings  *ProtoTableContentGroupSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *ProtoTableContentGroup) Reset() {
	*x = ProtoTableContentGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableContentGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableContentGroup) ProtoMessage() {}

func (x *ProtoTableContentGroup) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableContentGroup.ProtoReflect.Descriptor instead.
func (*ProtoTableContentGroup) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{52}
}

func (x *ProtoTableContentGroup) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoTableContentGroup) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTableContentGroup) GetSettings() *ProtoTableContentGroupSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type ProtoTableContentGroupConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent     *ProtoDocumentElement           `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Settings   *ProtoTableContentGroupSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	ConfigName string                          `protobuf:"bytes,3,opt,name=configName,proto3" json:"configName,omitempty"`
}

func (x *ProtoTableContentGroupConfig) Reset() {
	*x = ProtoTableContentGroupConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableContentGroupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableContentGroupConfig) ProtoMessage() {}

func (x *ProtoTableContentGroupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableContentGroupConfig.ProtoReflect.Descriptor instead.
func (*ProtoTableContentGroupConfig) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{53}
}

func (x *ProtoTableContentGroupConfig) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTableContentGroupConfig) GetSettings() *ProtoTableContentGroupSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProtoTableContentGroupConfig) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

type ProtoTableContentGroupSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentGroupType *ProtoBoxedTableContentGroupType `protobuf:"bytes,1,opt,name=contentGroupType,proto3" json:"contentGroupType,omitempty"`
	BackgroundColors []*ProtoColor                    `protobuf:"bytes,2,rep,name=backgroundColors,proto3" json:"backgroundColors,omitempty"`
}

func (x *ProtoTableContentGroupSettings) Reset() {
	*x = ProtoTableContentGroupSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableContentGroupSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableContentGroupSettings) ProtoMessage() {}

func (x *ProtoTableContentGroupSettings) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableContentGroupSettings.ProtoReflect.Descriptor instead.
func (*ProtoTableContentGroupSettings) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{54}
}

func (x *ProtoTableContentGroupSettings) GetContentGroupType() *ProtoBoxedTableContentGroupType {
	if x != nil {
		return x.ContentGroupType
	}
	return nil
}

func (x *ProtoTableContentGroupSettings) GetBackgroundColors() []*ProtoColor {
	if x != nil {
		return x.BackgroundColors
	}
	return nil
}

type ProtoTableRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren       []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent          *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Settings        *ProtoTableRowSettings  `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	RowConfigNumber *ProtoBoxedUint32       `protobuf:"bytes,4,opt,name=rowConfigNumber,proto3" json:"rowConfigNumber,omitempty"`
}

func (x *ProtoTableRow) Reset() {
	*x = ProtoTableRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableRow) ProtoMessage() {}

func (x *ProtoTableRow) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableRow.ProtoReflect.Descriptor instead.
func (*ProtoTableRow) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{55}
}

func (x *ProtoTableRow) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoTableRow) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTableRow) GetSettings() *ProtoTableRowSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProtoTableRow) GetRowConfigNumber() *ProtoBoxedUint32 {
	if x != nil {
		return x.RowConfigNumber
	}
	return nil
}

type ProtoTableRowConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent     *ProtoDocumentElement  `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Settings   *ProtoTableRowSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	ConfigName string                 `protobuf:"bytes,3,opt,name=configName,proto3" json:"configName,omitempty"`
	RowHeader  string                 `protobuf:"bytes,4,opt,name=rowHeader,proto3" json:"rowHeader,omitempty"`
	RowFooter  string                 `protobuf:"bytes,5,opt,name=rowFooter,proto3" json:"rowFooter,omitempty"`
}

func (x *ProtoTableRowConfig) Reset() {
	*x = ProtoTableRowConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableRowConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableRowConfig) ProtoMessage() {}

func (x *ProtoTableRowConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableRowConfig.ProtoReflect.Descriptor instead.
func (*ProtoTableRowConfig) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{56}
}

func (x *ProtoTableRowConfig) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTableRowConfig) GetSettings() *ProtoTableRowSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProtoTableRowConfig) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *ProtoTableRowConfig) GetRowHeader() string {
	if x != nil {
		return x.RowHeader
	}
	return ""
}

func (x *ProtoTableRowConfig) GetRowFooter() string {
	if x != nil {
		return x.RowFooter
	}
	return ""
}

type ProtoTableRowSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinHeight *ProtoMeasure `protobuf:"bytes,1,opt,name=minHeight,proto3" json:"minHeight,omitempty"`
}

func (x *ProtoTableRowSettings) Reset() {
	*x = ProtoTableRowSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableRowSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableRowSettings) ProtoMessage() {}

func (x *ProtoTableRowSettings) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableRowSettings.ProtoReflect.Descriptor instead.
func (*ProtoTableRowSettings) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{57}
}

func (x *ProtoTableRowSettings) GetMinHeight() *ProtoMeasure {
	if x != nil {
		return x.MinHeight
	}
	return nil
}

type ProtoBoxedTableCellType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  ProtoTableCellType `protobuf:"varint,1,opt,name=value,proto3,enum=ProtoTableCellType" json:"value,omitempty"`
	IsNull bool               `protobuf:"varint,2,opt,name=isNull,proto3" json:"isNull,omitempty"`
}

func (x *ProtoBoxedTableCellType) Reset() {
	*x = ProtoBoxedTableCellType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBoxedTableCellType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBoxedTableCellType) ProtoMessage() {}

func (x *ProtoBoxedTableCellType) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBoxedTableCellType.ProtoReflect.Descriptor instead.
func (*ProtoBoxedTableCellType) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{58}
}

func (x *ProtoBoxedTableCellType) GetValue() ProtoTableCellType {
	if x != nil {
		return x.Value
	}
	return ProtoTableCellType_TABLE_CELL_BODY
}

func (x *ProtoBoxedTableCellType) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

type ProtoTableCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren        []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent           *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Settings         *ProtoTableCellSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	CellConfigNumber *ProtoBoxedUint32       `protobuf:"bytes,4,opt,name=cellConfigNumber,proto3" json:"cellConfigNumber,omitempty"`
	Index            *ProtoBoxedUint32       `protobuf:"bytes,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ProtoTableCell) Reset() {
	*x = ProtoTableCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableCell) ProtoMessage() {}

func (x *ProtoTableCell) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableCell.ProtoReflect.Descriptor instead.
func (*ProtoTableCell) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{59}
}

func (x *ProtoTableCell) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoTableCell) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTableCell) GetSettings() *ProtoTableCellSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProtoTableCell) GetCellConfigNumber() *ProtoBoxedUint32 {
	if x != nil {
		return x.CellConfigNumber
	}
	return nil
}

func (x *ProtoTableCell) GetIndex() *ProtoBoxedUint32 {
	if x != nil {
		return x.Index
	}
	return nil
}

type ProtoTableCellConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent     *ProtoDocumentElement    `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Settings   *ProtoTableCellSettings  `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	ConfigName string                   `protobuf:"bytes,3,opt,name=configName,proto3" json:"configName,omitempty"`
	CellType   *ProtoBoxedTableCellType `protobuf:"bytes,4,opt,name=cellType,proto3" json:"cellType,omitempty"`
}

func (x *ProtoTableCellConfig) Reset() {
	*x = ProtoTableCellConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableCellConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableCellConfig) ProtoMessage() {}

func (x *ProtoTableCellConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableCellConfig.ProtoReflect.Descriptor instead.
func (*ProtoTableCellConfig) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{60}
}

func (x *ProtoTableCellConfig) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTableCellConfig) GetSettings() *ProtoTableCellSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ProtoTableCellConfig) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

func (x *ProtoTableCellConfig) GetCellType() *ProtoBoxedTableCellType {
	if x != nil {
		return x.CellType
	}
	return nil
}

type ProtoTableCellSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width           *ProtoMeasure                  `protobuf:"bytes,1,opt,name=width,proto3" json:"width,omitempty"`
	Align           *ProtoBoxedHorizontalAlignment `protobuf:"bytes,2,opt,name=align,proto3" json:"align,omitempty"`
	Valign          *ProtoBoxedVerticalAlignment   `protobuf:"bytes,3,opt,name=valign,proto3" json:"valign,omitempty"`
	BackgroundColor *ProtoColor                    `protobuf:"bytes,4,opt,name=backgroundColor,proto3" json:"backgroundColor,omitempty"`
	Padding         *ProtoSideMeasures             `protobuf:"bytes,5,opt,name=padding,proto3" json:"padding,omitempty"`
	Border          *ProtoSideBorders              `protobuf:"bytes,6,opt,name=border,proto3" json:"border,omitempty"`
	Margin          *ProtoSideMeasures             `protobuf:"bytes,7,opt,name=margin,proto3" json:"margin,omitempty"`
	Rotation        float64                        `protobuf:"fixed64,8,opt,name=rotation,proto3" json:"rotation,omitempty"`
}

func (x *ProtoTableCellSettings) Reset() {
	*x = ProtoTableCellSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTableCellSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTableCellSettings) ProtoMessage() {}

func (x *ProtoTableCellSettings) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTableCellSettings.ProtoReflect.Descriptor instead.
func (*ProtoTableCellSettings) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{61}
}

func (x *ProtoTableCellSettings) GetWidth() *ProtoMeasure {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ProtoTableCellSettings) GetAlign() *ProtoBoxedHorizontalAlignment {
	if x != nil {
		return x.Align
	}
	return nil
}

func (x *ProtoTableCellSettings) GetValign() *ProtoBoxedVerticalAlignment {
	if x != nil {
		return x.Valign
	}
	return nil
}

func (x *ProtoTableCellSettings) GetBackgroundColor() *ProtoColor {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *ProtoTableCellSettings) GetPadding() *ProtoSideMeasures {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *ProtoTableCellSettings) GetBorder() *ProtoSideBorders {
	if x != nil {
		return x.Border
	}
	return nil
}

func (x *ProtoTableCellSettings) GetMargin() *ProtoSideMeasures {
	if x != nil {
		return x.Margin
	}
	return nil
}

func (x *ProtoTableCellSettings) GetRotation() float64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

type ProtoText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent  *ProtoDocumentElement `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Content string                `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ProtoText) Reset() {
	*x = ProtoText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoText) ProtoMessage() {}

func (x *ProtoText) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoText.ProtoReflect.Descriptor instead.
func (*ProtoText) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{62}
}

func (x *ProtoText) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoText) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ProtoBarcode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             ProtoBarcodeType         `protobuf:"varint,1,opt,name=type,proto3,enum=ProtoBarcodeType" json:"type,omitempty"`
	X                *ProtoMeasure            `protobuf:"bytes,2,opt,name=x,proto3" json:"x,omitempty"`
	Y                *ProtoMeasure            `protobuf:"bytes,3,opt,name=y,proto3" json:"y,omitempty"`
	ReferencePoint   ProtoImageReferencePoint `protobuf:"varint,4,opt,name=referencePoint,proto3,enum=ProtoImageReferencePoint" json:"referencePoint,omitempty"`
	Rotation         float32                  `protobuf:"fixed32,5,opt,name=rotation,proto3" json:"rotation,omitempty"`
	Width            *ProtoMeasure            `protobuf:"bytes,6,opt,name=width,proto3" json:"width,omitempty"`
	Height           *ProtoMeasure            `protobuf:"bytes,7,opt,name=height,proto3" json:"height,omitempty"`
	Padding          *ProtoMeasure            `protobuf:"bytes,8,opt,name=padding,proto3" json:"padding,omitempty"`
	Data             string                   `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	PositionAbsolute bool                     `protobuf:"varint,10,opt,name=positionAbsolute,proto3" json:"positionAbsolute,omitempty"`
}

func (x *ProtoBarcode) Reset() {
	*x = ProtoBarcode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBarcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBarcode) ProtoMessage() {}

func (x *ProtoBarcode) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBarcode.ProtoReflect.Descriptor instead.
func (*ProtoBarcode) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{63}
}

func (x *ProtoBarcode) GetType() ProtoBarcodeType {
	if x != nil {
		return x.Type
	}
	return ProtoBarcodeType_PDF417
}

func (x *ProtoBarcode) GetX() *ProtoMeasure {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *ProtoBarcode) GetY() *ProtoMeasure {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *ProtoBarcode) GetReferencePoint() ProtoImageReferencePoint {
	if x != nil {
		return x.ReferencePoint
	}
	return ProtoImageReferencePoint_REF_POINT_DO_NOT_USE_AT_ALL
}

func (x *ProtoBarcode) GetRotation() float32 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *ProtoBarcode) GetWidth() *ProtoMeasure {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ProtoBarcode) GetHeight() *ProtoMeasure {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *ProtoBarcode) GetPadding() *ProtoMeasure {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *ProtoBarcode) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *ProtoBarcode) GetPositionAbsolute() bool {
	if x != nil {
		return x.PositionAbsolute
	}
	return false
}

type ProtoBrickReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternName string `protobuf:"bytes,1,opt,name=internName,proto3" json:"internName,omitempty"`
	Version    uint32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ProtoBrickReference) Reset() {
	*x = ProtoBrickReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBrickReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBrickReference) ProtoMessage() {}

func (x *ProtoBrickReference) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBrickReference.ProtoReflect.Descriptor instead.
func (*ProtoBrickReference) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{64}
}

func (x *ProtoBrickReference) GetInternName() string {
	if x != nil {
		return x.InternName
	}
	return ""
}

func (x *ProtoBrickReference) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ProtoBrick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren       []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent          *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Id              uint64                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	InternName      string                  `protobuf:"bytes,4,opt,name=internName,proto3" json:"internName,omitempty"`
	Uuid            string                  `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Editable        bool                    `protobuf:"varint,6,opt,name=editable,proto3" json:"editable,omitempty"`
	ComChannelUUIDs []string                `protobuf:"bytes,7,rep,name=comChannelUUIDs,proto3" json:"comChannelUUIDs,omitempty"`
}

func (x *ProtoBrick) Reset() {
	*x = ProtoBrick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBrick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBrick) ProtoMessage() {}

func (x *ProtoBrick) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBrick.ProtoReflect.Descriptor instead.
func (*ProtoBrick) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{65}
}

func (x *ProtoBrick) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoBrick) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoBrick) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtoBrick) GetInternName() string {
	if x != nil {
		return x.InternName
	}
	return ""
}

func (x *ProtoBrick) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProtoBrick) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

func (x *ProtoBrick) GetComChannelUUIDs() []string {
	if x != nil {
		return x.ComChannelUUIDs
	}
	return nil
}

type ProtoTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren        []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent           *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	ContainerMapping map[string]string       `protobuf:"bytes,3,rep,name=containerMapping,proto3" json:"containerMapping,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ComChannelUUIDs  []string                `protobuf:"bytes,4,rep,name=comChannelUUIDs,proto3" json:"comChannelUUIDs,omitempty"`
}

func (x *ProtoTemplate) Reset() {
	*x = ProtoTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTemplate) ProtoMessage() {}

func (x *ProtoTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTemplate.ProtoReflect.Descriptor instead.
func (*ProtoTemplate) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{66}
}

func (x *ProtoTemplate) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoTemplate) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTemplate) GetContainerMapping() map[string]string {
	if x != nil {
		return x.ContainerMapping
	}
	return nil
}

func (x *ProtoTemplate) GetComChannelUUIDs() []string {
	if x != nil {
		return x.ComChannelUUIDs
	}
	return nil
}

type ProtoHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren       []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent          *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Uuid            string                  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ComChannelUUIDs []string                `protobuf:"bytes,4,rep,name=comChannelUUIDs,proto3" json:"comChannelUUIDs,omitempty"`
}

func (x *ProtoHeader) Reset() {
	*x = ProtoHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHeader) ProtoMessage() {}

func (x *ProtoHeader) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHeader.ProtoReflect.Descriptor instead.
func (*ProtoHeader) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{67}
}

func (x *ProtoHeader) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoHeader) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoHeader) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProtoHeader) GetComChannelUUIDs() []string {
	if x != nil {
		return x.ComChannelUUIDs
	}
	return nil
}

type ProtoFooter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren       []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent          *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Uuid            string                  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ComChannelUUIDs []string                `protobuf:"bytes,4,rep,name=comChannelUUIDs,proto3" json:"comChannelUUIDs,omitempty"`
}

func (x *ProtoFooter) Reset() {
	*x = ProtoFooter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoFooter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoFooter) ProtoMessage() {}

func (x *ProtoFooter) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoFooter.ProtoReflect.Descriptor instead.
func (*ProtoFooter) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{68}
}

func (x *ProtoFooter) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoFooter) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoFooter) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProtoFooter) GetComChannelUUIDs() []string {
	if x != nil {
		return x.ComChannelUUIDs
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*Node `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	// Types that are assignable to Object:
	//
	//	*Node_ListSetting
	//	*Node_Color
	//	*Node_Brick
	//	*Node_Template
	//	*Node_Formatted
	//	*Node_Image
	//	*Node_ParagraphFormat
	//	*Node_TextBrick
	//	*Node_Text
	//	*Node_Linebreak
	//	*Node_SpaceVertically
	//	*Node_Footer
	//	*Node_Header
	//	*Node_Table
	//	*Node_TableRow
	//	*Node_TableCell
	//	*Node_CDef
	//	*Node_PDef
	//	*Node_ApplyCDef
	//	*Node_ApplyPDef
	//	*Node_ApplyPtConfig
	//	*Node_ApplyUlConfig
	//	*Node_PtConfig
	//	*Node_UlConfig
	//	*Node_NewPage
	//	*Node_Variable
	//	*Node_NamedString
	//	*Node_ListLevelSetting
	//	*Node_Paragraph
	//	*Node_Section
	//	*Node_Span
	//	*Node_Link
	//	*Node_Directory
	//	*Node_TableContentGroup
	//	*Node_TableConfig
	//	*Node_TableCellConfig
	//	*Node_TableRowConfig
	//	*Node_TableContentGroupConfig
	//	*Node_BrickReference
	//	*Node_Border
	//	*Node_ColumnSettings
	//	*Node_Font
	//	*Node_GraphicState
	//	*Node_HtmlParser
	//	*Node_Measure
	//	*Node_StrikethroughSpec
	//	*Node_UnderlineSpec
	//	*Node_CropSettings
	//	*Node_FlipSettings
	//	*Node_ImageListLevelSetting
	//	*Node_NumberListLevelSetting
	//	*Node_TextListLevelSetting
	//	*Node_UnnumberedListLevelSetting
	//	*Node_Indentation
	//	*Node_Barcode
	Object isNode_Object `protobuf_oneof:"object"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{69}
}

func (x *Node) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

func (m *Node) GetObject() isNode_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *Node) GetListSetting() *ProtoListSetting {
	if x, ok := x.GetObject().(*Node_ListSetting); ok {
		return x.ListSetting
	}
	return nil
}

func (x *Node) GetColor() *ProtoColor {
	if x, ok := x.GetObject().(*Node_Color); ok {
		return x.Color
	}
	return nil
}

func (x *Node) GetBrick() *ProtoBrick {
	if x, ok := x.GetObject().(*Node_Brick); ok {
		return x.Brick
	}
	return nil
}

func (x *Node) GetTemplate() *ProtoTemplate {
	if x, ok := x.GetObject().(*Node_Template); ok {
		return x.Template
	}
	return nil
}

func (x *Node) GetFormatted() *ProtoFormatted {
	if x, ok := x.GetObject().(*Node_Formatted); ok {
		return x.Formatted
	}
	return nil
}

func (x *Node) GetImage() *ProtoImage {
	if x, ok := x.GetObject().(*Node_Image); ok {
		return x.Image
	}
	return nil
}

func (x *Node) GetParagraphFormat() *ProtoParagraphFormat {
	if x, ok := x.GetObject().(*Node_ParagraphFormat); ok {
		return x.ParagraphFormat
	}
	return nil
}

func (x *Node) GetTextBrick() *ProtoTextBrick {
	if x, ok := x.GetObject().(*Node_TextBrick); ok {
		return x.TextBrick
	}
	return nil
}

func (x *Node) GetText() *ProtoText {
	if x, ok := x.GetObject().(*Node_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Node) GetLinebreak() *ProtoLinebreak {
	if x, ok := x.GetObject().(*Node_Linebreak); ok {
		return x.Linebreak
	}
	return nil
}

func (x *Node) GetSpaceVertically() *ProtoSpaceVertically {
	if x, ok := x.GetObject().(*Node_SpaceVertically); ok {
		return x.SpaceVertically
	}
	return nil
}

func (x *Node) GetFooter() *ProtoFooter {
	if x, ok := x.GetObject().(*Node_Footer); ok {
		return x.Footer
	}
	return nil
}

func (x *Node) GetHeader() *ProtoHeader {
	if x, ok := x.GetObject().(*Node_Header); ok {
		return x.Header
	}
	return nil
}

func (x *Node) GetTable() *ProtoTable {
	if x, ok := x.GetObject().(*Node_Table); ok {
		return x.Table
	}
	return nil
}

func (x *Node) GetTableRow() *ProtoTableRow {
	if x, ok := x.GetObject().(*Node_TableRow); ok {
		return x.TableRow
	}
	return nil
}

func (x *Node) GetTableCell() *ProtoTableCell {
	if x, ok := x.GetObject().(*Node_TableCell); ok {
		return x.TableCell
	}
	return nil
}

func (x *Node) GetCDef() *ProtoCDef {
	if x, ok := x.GetObject().(*Node_CDef); ok {
		return x.CDef
	}
	return nil
}

func (x *Node) GetPDef() *ProtoPDef {
	if x, ok := x.GetObject().(*Node_PDef); ok {
		return x.PDef
	}
	return nil
}

func (x *Node) GetApplyCDef() *ProtoApplyProtoCDef {
	if x, ok := x.GetObject().(*Node_ApplyCDef); ok {
		return x.ApplyCDef
	}
	return nil
}

func (x *Node) GetApplyPDef() *ProtoApplyProtoPDef {
	if x, ok := x.GetObject().(*Node_ApplyPDef); ok {
		return x.ApplyPDef
	}
	return nil
}

func (x *Node) GetApplyPtConfig() *ProtoApplyPtConfig {
	if x, ok := x.GetObject().(*Node_ApplyPtConfig); ok {
		return x.ApplyPtConfig
	}
	return nil
}

func (x *Node) GetApplyUlConfig() *ProtoApplyUlConfig {
	if x, ok := x.GetObject().(*Node_ApplyUlConfig); ok {
		return x.ApplyUlConfig
	}
	return nil
}

func (x *Node) GetPtConfig() *ProtoPtConfig {
	if x, ok := x.GetObject().(*Node_PtConfig); ok {
		return x.PtConfig
	}
	return nil
}

func (x *Node) GetUlConfig() *ProtoUlConfig {
	if x, ok := x.GetObject().(*Node_UlConfig); ok {
		return x.UlConfig
	}
	return nil
}

func (x *Node) GetNewPage() *ProtoNewPage {
	if x, ok := x.GetObject().(*Node_NewPage); ok {
		return x.NewPage
	}
	return nil
}

func (x *Node) GetVariable() *ProtoVariable {
	if x, ok := x.GetObject().(*Node_Variable); ok {
		return x.Variable
	}
	return nil
}

func (x *Node) GetNamedString() *ProtoNamedString {
	if x, ok := x.GetObject().(*Node_NamedString); ok {
		return x.NamedString
	}
	return nil
}

func (x *Node) GetListLevelSetting() *ProtoListLevelSetting {
	if x, ok := x.GetObject().(*Node_ListLevelSetting); ok {
		return x.ListLevelSetting
	}
	return nil
}

func (x *Node) GetParagraph() *ProtoParagraph {
	if x, ok := x.GetObject().(*Node_Paragraph); ok {
		return x.Paragraph
	}
	return nil
}

func (x *Node) GetSection() *ProtoSection {
	if x, ok := x.GetObject().(*Node_Section); ok {
		return x.Section
	}
	return nil
}

func (x *Node) GetSpan() *ProtoSpan {
	if x, ok := x.GetObject().(*Node_Span); ok {
		return x.Span
	}
	return nil
}

func (x *Node) GetLink() *ProtoLink {
	if x, ok := x.GetObject().(*Node_Link); ok {
		return x.Link
	}
	return nil
}

func (x *Node) GetDirectory() *ProtoDirectory {
	if x, ok := x.GetObject().(*Node_Directory); ok {
		return x.Directory
	}
	return nil
}

func (x *Node) GetTableContentGroup() *ProtoTableContentGroup {
	if x, ok := x.GetObject().(*Node_TableContentGroup); ok {
		return x.TableContentGroup
	}
	return nil
}

func (x *Node) GetTableConfig() *ProtoTableConfig {
	if x, ok := x.GetObject().(*Node_TableConfig); ok {
		return x.TableConfig
	}
	return nil
}

func (x *Node) GetTableCellConfig() *ProtoTableCellConfig {
	if x, ok := x.GetObject().(*Node_TableCellConfig); ok {
		return x.TableCellConfig
	}
	return nil
}

func (x *Node) GetTableRowConfig() *ProtoTableRowConfig {
	if x, ok := x.GetObject().(*Node_TableRowConfig); ok {
		return x.TableRowConfig
	}
	return nil
}

func (x *Node) GetTableContentGroupConfig() *ProtoTableContentGroupConfig {
	if x, ok := x.GetObject().(*Node_TableContentGroupConfig); ok {
		return x.TableContentGroupConfig
	}
	return nil
}

func (x *Node) GetBrickReference() *ProtoBrickReference {
	if x, ok := x.GetObject().(*Node_BrickReference); ok {
		return x.BrickReference
	}
	return nil
}

func (x *Node) GetBorder() *ProtoBorder {
	if x, ok := x.GetObject().(*Node_Border); ok {
		return x.Border
	}
	return nil
}

func (x *Node) GetColumnSettings() *ProtoColumnSettings {
	if x, ok := x.GetObject().(*Node_ColumnSettings); ok {
		return x.ColumnSettings
	}
	return nil
}

func (x *Node) GetFont() *ProtoFont {
	if x, ok := x.GetObject().(*Node_Font); ok {
		return x.Font
	}
	return nil
}

func (x *Node) GetGraphicState() *ProtoGraphicState {
	if x, ok := x.GetObject().(*Node_GraphicState); ok {
		return x.GraphicState
	}
	return nil
}

func (x *Node) GetHtmlParser() *ProtoHtmlParser {
	if x, ok := x.GetObject().(*Node_HtmlParser); ok {
		return x.HtmlParser
	}
	return nil
}

func (x *Node) GetMeasure() *ProtoMeasure {
	if x, ok := x.GetObject().(*Node_Measure); ok {
		return x.Measure
	}
	return nil
}

func (x *Node) GetStrikethroughSpec() *ProtoStrikethroughSpec {
	if x, ok := x.GetObject().(*Node_StrikethroughSpec); ok {
		return x.StrikethroughSpec
	}
	return nil
}

func (x *Node) GetUnderlineSpec() *ProtoUnderlineSpec {
	if x, ok := x.GetObject().(*Node_UnderlineSpec); ok {
		return x.UnderlineSpec
	}
	return nil
}

func (x *Node) GetCropSettings() *ProtoCropSettings {
	if x, ok := x.GetObject().(*Node_CropSettings); ok {
		return x.CropSettings
	}
	return nil
}

func (x *Node) GetFlipSettings() *ProtoFlipSettings {
	if x, ok := x.GetObject().(*Node_FlipSettings); ok {
		return x.FlipSettings
	}
	return nil
}

func (x *Node) GetImageListLevelSetting() *ProtoImageListLevelSetting {
	if x, ok := x.GetObject().(*Node_ImageListLevelSetting); ok {
		return x.ImageListLevelSetting
	}
	return nil
}

func (x *Node) GetNumberListLevelSetting() *ProtoNumberListLevelSetting {
	if x, ok := x.GetObject().(*Node_NumberListLevelSetting); ok {
		return x.NumberListLevelSetting
	}
	return nil
}

func (x *Node) GetTextListLevelSetting() *ProtoTextListLevelSetting {
	if x, ok := x.GetObject().(*Node_TextListLevelSetting); ok {
		return x.TextListLevelSetting
	}
	return nil
}

func (x *Node) GetUnnumberedListLevelSetting() *ProtoUnnumberedListLevelSetting {
	if x, ok := x.GetObject().(*Node_UnnumberedListLevelSetting); ok {
		return x.UnnumberedListLevelSetting
	}
	return nil
}

func (x *Node) GetIndentation() *ProtoIndentation {
	if x, ok := x.GetObject().(*Node_Indentation); ok {
		return x.Indentation
	}
	return nil
}

func (x *Node) GetBarcode() *ProtoBarcode {
	if x, ok := x.GetObject().(*Node_Barcode); ok {
		return x.Barcode
	}
	return nil
}

type isNode_Object interface {
	isNode_Object()
}

type Node_ListSetting struct {
	ListSetting *ProtoListSetting `protobuf:"bytes,2,opt,name=list_setting,json=listSetting,proto3,oneof"`
}

type Node_Color struct {
	Color *ProtoColor `protobuf:"bytes,3,opt,name=color,proto3,oneof"`
}

type Node_Brick struct {
	Brick *ProtoBrick `protobuf:"bytes,4,opt,name=brick,proto3,oneof"`
}

type Node_Template struct {
	Template *ProtoTemplate `protobuf:"bytes,5,opt,name=template,proto3,oneof"`
}

type Node_Formatted struct {
	Formatted *ProtoFormatted `protobuf:"bytes,6,opt,name=formatted,proto3,oneof"`
}

type Node_Image struct {
	Image *ProtoImage `protobuf:"bytes,7,opt,name=image,proto3,oneof"`
}

type Node_ParagraphFormat struct {
	ParagraphFormat *ProtoParagraphFormat `protobuf:"bytes,8,opt,name=paragraph_format,json=paragraphFormat,proto3,oneof"`
}

type Node_TextBrick struct {
	TextBrick *ProtoTextBrick `protobuf:"bytes,9,opt,name=text_brick,json=textBrick,proto3,oneof"`
}

type Node_Text struct {
	Text *ProtoText `protobuf:"bytes,10,opt,name=text,proto3,oneof"`
}

type Node_Linebreak struct {
	Linebreak *ProtoLinebreak `protobuf:"bytes,11,opt,name=linebreak,proto3,oneof"`
}

type Node_SpaceVertically struct {
	SpaceVertically *ProtoSpaceVertically `protobuf:"bytes,12,opt,name=space_vertically,json=spaceVertically,proto3,oneof"`
}

type Node_Footer struct {
	Footer *ProtoFooter `protobuf:"bytes,13,opt,name=footer,proto3,oneof"`
}

type Node_Header struct {
	Header *ProtoHeader `protobuf:"bytes,14,opt,name=header,proto3,oneof"`
}

type Node_Table struct {
	Table *ProtoTable `protobuf:"bytes,15,opt,name=table,proto3,oneof"`
}

type Node_TableRow struct {
	TableRow *ProtoTableRow `protobuf:"bytes,16,opt,name=table_row,json=tableRow,proto3,oneof"`
}

type Node_TableCell struct {
	TableCell *ProtoTableCell `protobuf:"bytes,17,opt,name=table_cell,json=tableCell,proto3,oneof"`
}

type Node_CDef struct {
	CDef *ProtoCDef `protobuf:"bytes,18,opt,name=c_def,json=cDef,proto3,oneof"`
}

type Node_PDef struct {
	PDef *ProtoPDef `protobuf:"bytes,19,opt,name=p_def,json=pDef,proto3,oneof"`
}

type Node_ApplyCDef struct {
	ApplyCDef *ProtoApplyProtoCDef `protobuf:"bytes,20,opt,name=apply_c_def,json=applyCDef,proto3,oneof"`
}

type Node_ApplyPDef struct {
	ApplyPDef *ProtoApplyProtoPDef `protobuf:"bytes,21,opt,name=apply_p_def,json=applyPDef,proto3,oneof"`
}

type Node_ApplyPtConfig struct {
	ApplyPtConfig *ProtoApplyPtConfig `protobuf:"bytes,22,opt,name=apply_pt_config,json=applyPtConfig,proto3,oneof"`
}

type Node_ApplyUlConfig struct {
	ApplyUlConfig *ProtoApplyUlConfig `protobuf:"bytes,23,opt,name=apply_ul_config,json=applyUlConfig,proto3,oneof"`
}

type Node_PtConfig struct {
	PtConfig *ProtoPtConfig `protobuf:"bytes,24,opt,name=pt_config,json=ptConfig,proto3,oneof"`
}

type Node_UlConfig struct {
	UlConfig *ProtoUlConfig `protobuf:"bytes,25,opt,name=ul_config,json=ulConfig,proto3,oneof"`
}

type Node_NewPage struct {
	NewPage *ProtoNewPage `protobuf:"bytes,26,opt,name=new_page,json=newPage,proto3,oneof"`
}

type Node_Variable struct {
	Variable *ProtoVariable `protobuf:"bytes,27,opt,name=variable,proto3,oneof"`
}

type Node_NamedString struct {
	NamedString *ProtoNamedString `protobuf:"bytes,28,opt,name=named_string,json=namedString,proto3,oneof"`
}

type Node_ListLevelSetting struct {
	ListLevelSetting *ProtoListLevelSetting `protobuf:"bytes,29,opt,name=list_level_setting,json=listLevelSetting,proto3,oneof"`
}

type Node_Paragraph struct {
	Paragraph *ProtoParagraph `protobuf:"bytes,30,opt,name=paragraph,proto3,oneof"`
}

type Node_Section struct {
	Section *ProtoSection `protobuf:"bytes,31,opt,name=section,proto3,oneof"`
}

type Node_Span struct {
	Span *ProtoSpan `protobuf:"bytes,32,opt,name=span,proto3,oneof"`
}

type Node_Link struct {
	Link *ProtoLink `protobuf:"bytes,33,opt,name=link,proto3,oneof"`
}

type Node_Directory struct {
	Directory *ProtoDirectory `protobuf:"bytes,34,opt,name=directory,proto3,oneof"`
}

type Node_TableContentGroup struct {
	TableContentGroup *ProtoTableContentGroup `protobuf:"bytes,35,opt,name=table_content_group,json=tableContentGroup,proto3,oneof"`
}

type Node_TableConfig struct {
	TableConfig *ProtoTableConfig `protobuf:"bytes,36,opt,name=table_config,json=tableConfig,proto3,oneof"`
}

type Node_TableCellConfig struct {
	TableCellConfig *ProtoTableCellConfig `protobuf:"bytes,37,opt,name=table_cell_config,json=tableCellConfig,proto3,oneof"`
}

type Node_TableRowConfig struct {
	TableRowConfig *ProtoTableRowConfig `protobuf:"bytes,38,opt,name=table_row_config,json=tableRowConfig,proto3,oneof"`
}

type Node_TableContentGroupConfig struct {
	TableContentGroupConfig *ProtoTableContentGroupConfig `protobuf:"bytes,39,opt,name=table_content_group_config,json=tableContentGroupConfig,proto3,oneof"`
}

type Node_BrickReference struct {
	BrickReference *ProtoBrickReference `protobuf:"bytes,40,opt,name=brick_reference,json=brickReference,proto3,oneof"`
}

type Node_Border struct {
	Border *ProtoBorder `protobuf:"bytes,41,opt,name=border,proto3,oneof"`
}

type Node_ColumnSettings struct {
	ColumnSettings *ProtoColumnSettings `protobuf:"bytes,42,opt,name=column_settings,json=columnSettings,proto3,oneof"`
}

type Node_Font struct {
	Font *ProtoFont `protobuf:"bytes,43,opt,name=font,proto3,oneof"`
}

type Node_GraphicState struct {
	GraphicState *ProtoGraphicState `protobuf:"bytes,44,opt,name=graphic_state,json=graphicState,proto3,oneof"`
}

type Node_HtmlParser struct {
	HtmlParser *ProtoHtmlParser `protobuf:"bytes,45,opt,name=html_parser,json=htmlParser,proto3,oneof"`
}

type Node_Measure struct {
	Measure *ProtoMeasure `protobuf:"bytes,46,opt,name=measure,proto3,oneof"`
}

type Node_StrikethroughSpec struct {
	StrikethroughSpec *ProtoStrikethroughSpec `protobuf:"bytes,47,opt,name=strikethrough_spec,json=strikethroughSpec,proto3,oneof"`
}

type Node_UnderlineSpec struct {
	UnderlineSpec *ProtoUnderlineSpec `protobuf:"bytes,48,opt,name=underline_spec,json=underlineSpec,proto3,oneof"`
}

type Node_CropSettings struct {
	CropSettings *ProtoCropSettings `protobuf:"bytes,49,opt,name=crop_settings,json=cropSettings,proto3,oneof"`
}

type Node_FlipSettings struct {
	FlipSettings *ProtoFlipSettings `protobuf:"bytes,50,opt,name=flip_settings,json=flipSettings,proto3,oneof"`
}

type Node_ImageListLevelSetting struct {
	ImageListLevelSetting *ProtoImageListLevelSetting `protobuf:"bytes,51,opt,name=image_list_level_setting,json=imageListLevelSetting,proto3,oneof"`
}

type Node_NumberListLevelSetting struct {
	NumberListLevelSetting *ProtoNumberListLevelSetting `protobuf:"bytes,52,opt,name=number_list_level_setting,json=numberListLevelSetting,proto3,oneof"`
}

type Node_TextListLevelSetting struct {
	TextListLevelSetting *ProtoTextListLevelSetting `protobuf:"bytes,53,opt,name=text_list_level_setting,json=textListLevelSetting,proto3,oneof"`
}

type Node_UnnumberedListLevelSetting struct {
	UnnumberedListLevelSetting *ProtoUnnumberedListLevelSetting `protobuf:"bytes,54,opt,name=unnumbered_list_level_setting,json=unnumberedListLevelSetting,proto3,oneof"`
}

type Node_Indentation struct {
	Indentation *ProtoIndentation `protobuf:"bytes,55,opt,name=indentation,proto3,oneof"`
}

type Node_Barcode struct {
	Barcode *ProtoBarcode `protobuf:"bytes,56,opt,name=barcode,proto3,oneof"`
}

func (*Node_ListSetting) isNode_Object() {}

func (*Node_Color) isNode_Object() {}

func (*Node_Brick) isNode_Object() {}

func (*Node_Template) isNode_Object() {}

func (*Node_Formatted) isNode_Object() {}

func (*Node_Image) isNode_Object() {}

func (*Node_ParagraphFormat) isNode_Object() {}

func (*Node_TextBrick) isNode_Object() {}

func (*Node_Text) isNode_Object() {}

func (*Node_Linebreak) isNode_Object() {}

func (*Node_SpaceVertically) isNode_Object() {}

func (*Node_Footer) isNode_Object() {}

func (*Node_Header) isNode_Object() {}

func (*Node_Table) isNode_Object() {}

func (*Node_TableRow) isNode_Object() {}

func (*Node_TableCell) isNode_Object() {}

func (*Node_CDef) isNode_Object() {}

func (*Node_PDef) isNode_Object() {}

func (*Node_ApplyCDef) isNode_Object() {}

func (*Node_ApplyPDef) isNode_Object() {}

func (*Node_ApplyPtConfig) isNode_Object() {}

func (*Node_ApplyUlConfig) isNode_Object() {}

func (*Node_PtConfig) isNode_Object() {}

func (*Node_UlConfig) isNode_Object() {}

func (*Node_NewPage) isNode_Object() {}

func (*Node_Variable) isNode_Object() {}

func (*Node_NamedString) isNode_Object() {}

func (*Node_ListLevelSetting) isNode_Object() {}

func (*Node_Paragraph) isNode_Object() {}

func (*Node_Section) isNode_Object() {}

func (*Node_Span) isNode_Object() {}

func (*Node_Link) isNode_Object() {}

func (*Node_Directory) isNode_Object() {}

func (*Node_TableContentGroup) isNode_Object() {}

func (*Node_TableConfig) isNode_Object() {}

func (*Node_TableCellConfig) isNode_Object() {}

func (*Node_TableRowConfig) isNode_Object() {}

func (*Node_TableContentGroupConfig) isNode_Object() {}

func (*Node_BrickReference) isNode_Object() {}

func (*Node_Border) isNode_Object() {}

func (*Node_ColumnSettings) isNode_Object() {}

func (*Node_Font) isNode_Object() {}

func (*Node_GraphicState) isNode_Object() {}

func (*Node_HtmlParser) isNode_Object() {}

func (*Node_Measure) isNode_Object() {}

func (*Node_StrikethroughSpec) isNode_Object() {}

func (*Node_UnderlineSpec) isNode_Object() {}

func (*Node_CropSettings) isNode_Object() {}

func (*Node_FlipSettings) isNode_Object() {}

func (*Node_ImageListLevelSetting) isNode_Object() {}

func (*Node_NumberListLevelSetting) isNode_Object() {}

func (*Node_TextListLevelSetting) isNode_Object() {}

func (*Node_UnnumberedListLevelSetting) isNode_Object() {}

func (*Node_Indentation) isNode_Object() {}

func (*Node_Barcode) isNode_Object() {}

type ProtoImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent           *ProtoDocumentElement          `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Alt              string                         `protobuf:"bytes,2,opt,name=alt,proto3" json:"alt,omitempty"`
	Name             string                         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Src              string                         `protobuf:"bytes,4,opt,name=src,proto3" json:"src,omitempty"`
	Filename         string                         `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	Scale            *ProtoBoxedDouble              `protobuf:"bytes,6,opt,name=scale,proto3" json:"scale,omitempty"`
	ColumnScale      *ProtoBoxedDouble              `protobuf:"bytes,7,opt,name=columnScale,proto3" json:"columnScale,omitempty"`
	Width            *ProtoBoxedMeasure             `protobuf:"bytes,8,opt,name=width,proto3" json:"width,omitempty"`
	Height           *ProtoBoxedMeasure             `protobuf:"bytes,9,opt,name=height,proto3" json:"height,omitempty"`
	X                *ProtoBoxedMeasure             `protobuf:"bytes,10,opt,name=x,proto3" json:"x,omitempty"`
	Y                *ProtoBoxedMeasure             `protobuf:"bytes,11,opt,name=y,proto3" json:"y,omitempty"`
	PositionAbsolute *ProtoBoxedBool                `protobuf:"bytes,12,opt,name=positionAbsolute,proto3" json:"positionAbsolute,omitempty"`
	Rotation         float64                        `protobuf:"fixed64,13,opt,name=rotation,proto3" json:"rotation,omitempty"`
	FlipSettings     *ProtoFlipSettings             `protobuf:"bytes,14,opt,name=flipSettings,proto3" json:"flipSettings,omitempty"`
	CropSettings     *ProtoCropSettings             `protobuf:"bytes,15,opt,name=cropSettings,proto3" json:"cropSettings,omitempty"`
	Aia              *ProtoAdvancedIllustrationArea `protobuf:"bytes,16,opt,name=aia,proto3" json:"aia,omitempty"`
	Uuid             string                         `protobuf:"bytes,17,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ReferencePoint   ProtoImageReferencePoint       `protobuf:"varint,18,opt,name=referencePoint,proto3,enum=ProtoImageReferencePoint" json:"referencePoint,omitempty"`
}

func (x *ProtoImage) Reset() {
	*x = ProtoImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoImage) ProtoMessage() {}

func (x *ProtoImage) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoImage.ProtoReflect.Descriptor instead.
func (*ProtoImage) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{70}
}

func (x *ProtoImage) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoImage) GetAlt() string {
	if x != nil {
		return x.Alt
	}
	return ""
}

func (x *ProtoImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtoImage) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *ProtoImage) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ProtoImage) GetScale() *ProtoBoxedDouble {
	if x != nil {
		return x.Scale
	}
	return nil
}

func (x *ProtoImage) GetColumnScale() *ProtoBoxedDouble {
	if x != nil {
		return x.ColumnScale
	}
	return nil
}

func (x *ProtoImage) GetWidth() *ProtoBoxedMeasure {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ProtoImage) GetHeight() *ProtoBoxedMeasure {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *ProtoImage) GetX() *ProtoBoxedMeasure {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *ProtoImage) GetY() *ProtoBoxedMeasure {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *ProtoImage) GetPositionAbsolute() *ProtoBoxedBool {
	if x != nil {
		return x.PositionAbsolute
	}
	return nil
}

func (x *ProtoImage) GetRotation() float64 {
	if x != nil {
		return x.Rotation
	}
	return 0
}

func (x *ProtoImage) GetFlipSettings() *ProtoFlipSettings {
	if x != nil {
		return x.FlipSettings
	}
	return nil
}

func (x *ProtoImage) GetCropSettings() *ProtoCropSettings {
	if x != nil {
		return x.CropSettings
	}
	return nil
}

func (x *ProtoImage) GetAia() *ProtoAdvancedIllustrationArea {
	if x != nil {
		return x.Aia
	}
	return nil
}

func (x *ProtoImage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProtoImage) GetReferencePoint() ProtoImageReferencePoint {
	if x != nil {
		return x.ReferencePoint
	}
	return ProtoImageReferencePoint_REF_POINT_DO_NOT_USE_AT_ALL
}

type ProtoDirectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren       []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent          *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Uuid            string                  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ComChannelUUIDs []string                `protobuf:"bytes,4,rep,name=comChannelUUIDs,proto3" json:"comChannelUUIDs,omitempty"`
}

func (x *ProtoDirectory) Reset() {
	*x = ProtoDirectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDirectory) ProtoMessage() {}

func (x *ProtoDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDirectory.ProtoReflect.Descriptor instead.
func (*ProtoDirectory) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{71}
}

func (x *ProtoDirectory) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoDirectory) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoDirectory) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProtoDirectory) GetComChannelUUIDs() []string {
	if x != nil {
		return x.ComChannelUUIDs
	}
	return nil
}

type ProtoTextBrick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren       []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent          *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Uuid            string                  `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id              uint64                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	ComChannelUUIDs []string                `protobuf:"bytes,5,rep,name=comChannelUUIDs,proto3" json:"comChannelUUIDs,omitempty"`
	Editable        bool                    `protobuf:"varint,6,opt,name=editable,proto3" json:"editable,omitempty"`
}

func (x *ProtoTextBrick) Reset() {
	*x = ProtoTextBrick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTextBrick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTextBrick) ProtoMessage() {}

func (x *ProtoTextBrick) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTextBrick.ProtoReflect.Descriptor instead.
func (*ProtoTextBrick) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{72}
}

func (x *ProtoTextBrick) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoTextBrick) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoTextBrick) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProtoTextBrick) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtoTextBrick) GetComChannelUUIDs() []string {
	if x != nil {
		return x.ComChannelUUIDs
	}
	return nil
}

func (x *ProtoTextBrick) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

type ProtoVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent     *ProtoDocumentElement `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Path       string                `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Content    string                `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"` // Should this be optional or "empty string"
	FormatUuid string                `protobuf:"bytes,4,opt,name=formatUuid,proto3" json:"formatUuid,omitempty"`
}

func (x *ProtoVariable) Reset() {
	*x = ProtoVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoVariable) ProtoMessage() {}

func (x *ProtoVariable) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoVariable.ProtoReflect.Descriptor instead.
func (*ProtoVariable) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{73}
}

func (x *ProtoVariable) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoVariable) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ProtoVariable) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ProtoVariable) GetFormatUuid() string {
	if x != nil {
		return x.FormatUuid
	}
	return ""
}

type ProtoFormatted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent         *ProtoDocumentElement `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	DteditorSyntax bool                  `protobuf:"varint,2,opt,name=dteditorSyntax,proto3" json:"dteditorSyntax,omitempty"`
	DoctypeContent string                `protobuf:"bytes,3,opt,name=doctypeContent,proto3" json:"doctypeContent,omitempty"`
	HtmlContent    string                `protobuf:"bytes,4,opt,name=htmlContent,proto3" json:"htmlContent,omitempty"`
}

func (x *ProtoFormatted) Reset() {
	*x = ProtoFormatted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoFormatted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoFormatted) ProtoMessage() {}

func (x *ProtoFormatted) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoFormatted.ProtoReflect.Descriptor instead.
func (*ProtoFormatted) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{74}
}

func (x *ProtoFormatted) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoFormatted) GetDteditorSyntax() bool {
	if x != nil {
		return x.DteditorSyntax
	}
	return false
}

func (x *ProtoFormatted) GetDoctypeContent() string {
	if x != nil {
		return x.DoctypeContent
	}
	return ""
}

func (x *ProtoFormatted) GetHtmlContent() string {
	if x != nil {
		return x.HtmlContent
	}
	return ""
}

type ProtoApplyProtoCDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CDefUuid string `protobuf:"bytes,1,opt,name=cDefUuid,proto3" json:"cDefUuid,omitempty"`
}

func (x *ProtoApplyProtoCDef) Reset() {
	*x = ProtoApplyProtoCDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoApplyProtoCDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoApplyProtoCDef) ProtoMessage() {}

func (x *ProtoApplyProtoCDef) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoApplyProtoCDef.ProtoReflect.Descriptor instead.
func (*ProtoApplyProtoCDef) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{75}
}

func (x *ProtoApplyProtoCDef) GetCDefUuid() string {
	if x != nil {
		return x.CDefUuid
	}
	return ""
}

type ProtoApplyProtoPDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PDefUuid string `protobuf:"bytes,1,opt,name=pDefUuid,proto3" json:"pDefUuid,omitempty"`
}

func (x *ProtoApplyProtoPDef) Reset() {
	*x = ProtoApplyProtoPDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoApplyProtoPDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoApplyProtoPDef) ProtoMessage() {}

func (x *ProtoApplyProtoPDef) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoApplyProtoPDef.ProtoReflect.Descriptor instead.
func (*ProtoApplyProtoPDef) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{76}
}

func (x *ProtoApplyProtoPDef) GetPDefUuid() string {
	if x != nil {
		return x.PDefUuid
	}
	return ""
}

type ProtoApplyPtConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PtConfigUuid string `protobuf:"bytes,1,opt,name=ptConfigUuid,proto3" json:"ptConfigUuid,omitempty"`
}

func (x *ProtoApplyPtConfig) Reset() {
	*x = ProtoApplyPtConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoApplyPtConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoApplyPtConfig) ProtoMessage() {}

func (x *ProtoApplyPtConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoApplyPtConfig.ProtoReflect.Descriptor instead.
func (*ProtoApplyPtConfig) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{77}
}

func (x *ProtoApplyPtConfig) GetPtConfigUuid() string {
	if x != nil {
		return x.PtConfigUuid
	}
	return ""
}

type ProtoApplyUlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UlConfigUuid string `protobuf:"bytes,1,opt,name=ulConfigUuid,proto3" json:"ulConfigUuid,omitempty"`
}

func (x *ProtoApplyUlConfig) Reset() {
	*x = ProtoApplyUlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoApplyUlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoApplyUlConfig) ProtoMessage() {}

func (x *ProtoApplyUlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoApplyUlConfig.ProtoReflect.Descriptor instead.
func (*ProtoApplyUlConfig) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{78}
}

func (x *ProtoApplyUlConfig) GetUlConfigUuid() string {
	if x != nil {
		return x.UlConfigUuid
	}
	return ""
}

type ProtoCDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumSettings       *ProtoColumnSettings `protobuf:"bytes,1,opt,name=columSettings,proto3" json:"columSettings,omitempty"`
	ApplyToHeaderFooter *ProtoBoxedBool      `protobuf:"bytes,2,opt,name=applyToHeaderFooter,proto3" json:"applyToHeaderFooter,omitempty"`
	ApplyImmediate      *ProtoBoxedBool      `protobuf:"bytes,3,opt,name=applyImmediate,proto3" json:"applyImmediate,omitempty"`
	Uuid                string               `protobuf:"bytes,4,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *ProtoCDef) Reset() {
	*x = ProtoCDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoCDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCDef) ProtoMessage() {}

func (x *ProtoCDef) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCDef.ProtoReflect.Descriptor instead.
func (*ProtoCDef) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{79}
}

func (x *ProtoCDef) GetColumSettings() *ProtoColumnSettings {
	if x != nil {
		return x.ColumSettings
	}
	return nil
}

func (x *ProtoCDef) GetApplyToHeaderFooter() *ProtoBoxedBool {
	if x != nil {
		return x.ApplyToHeaderFooter
	}
	return nil
}

func (x *ProtoCDef) GetApplyImmediate() *ProtoBoxedBool {
	if x != nil {
		return x.ApplyImmediate
	}
	return nil
}

func (x *ProtoCDef) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ProtoPDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageWidth *ProtoBoxedMeasure `protobuf:"bytes,1,opt,name=pageWidth,proto3" json:"pageWidth,omitempty"`
	PageDepth *ProtoBoxedMeasure `protobuf:"bytes,2,opt,name=pageDepth,proto3" json:"pageDepth,omitempty"`
	Uuid      string             `protobuf:"bytes,3,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *ProtoPDef) Reset() {
	*x = ProtoPDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoPDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPDef) ProtoMessage() {}

func (x *ProtoPDef) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPDef.ProtoReflect.Descriptor instead.
func (*ProtoPDef) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{80}
}

func (x *ProtoPDef) GetPageWidth() *ProtoBoxedMeasure {
	if x != nil {
		return x.PageWidth
	}
	return nil
}

func (x *ProtoPDef) GetPageDepth() *ProtoBoxedMeasure {
	if x != nil {
		return x.PageDepth
	}
	return nil
}

func (x *ProtoPDef) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ProtoPtConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height         *ProtoBoxedMeasure `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
	LineFeed       *ProtoBoxedMeasure `protobuf:"bytes,2,opt,name=lineFeed,proto3" json:"lineFeed,omitempty"`
	CharacterWidth *ProtoBoxedMeasure `protobuf:"bytes,3,opt,name=characterWidth,proto3" json:"characterWidth,omitempty"`
	SpaceWidth     *ProtoBoxedMeasure `protobuf:"bytes,4,opt,name=spaceWidth,proto3" json:"spaceWidth,omitempty"`
	Uuid           string             `protobuf:"bytes,5,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *ProtoPtConfig) Reset() {
	*x = ProtoPtConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoPtConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPtConfig) ProtoMessage() {}

func (x *ProtoPtConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPtConfig.ProtoReflect.Descriptor instead.
func (*ProtoPtConfig) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{81}
}

func (x *ProtoPtConfig) GetHeight() *ProtoBoxedMeasure {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *ProtoPtConfig) GetLineFeed() *ProtoBoxedMeasure {
	if x != nil {
		return x.LineFeed
	}
	return nil
}

func (x *ProtoPtConfig) GetCharacterWidth() *ProtoBoxedMeasure {
	if x != nil {
		return x.CharacterWidth
	}
	return nil
}

func (x *ProtoPtConfig) GetSpaceWidth() *ProtoBoxedMeasure {
	if x != nil {
		return x.SpaceWidth
	}
	return nil
}

func (x *ProtoPtConfig) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ProtoUlConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode ProtoUnderlineMode `protobuf:"varint,1,opt,name=mode,proto3,enum=ProtoUnderlineMode" json:"mode,omitempty"`
	Uuid string             `protobuf:"bytes,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *ProtoUlConfig) Reset() {
	*x = ProtoUlConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoUlConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUlConfig) ProtoMessage() {}

func (x *ProtoUlConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUlConfig.ProtoReflect.Descriptor instead.
func (*ProtoUlConfig) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{82}
}

func (x *ProtoUlConfig) GetMode() ProtoUnderlineMode {
	if x != nil {
		return x.Mode
	}
	return ProtoUnderlineMode_DUMMY_UNDERLINE_MODE
}

func (x *ProtoUlConfig) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ProtoNewPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaperTray  uint32        `protobuf:"varint,1,opt,name=paperTray,proto3" json:"paperTray,omitempty"`
	PaperCount uint32        `protobuf:"varint,2,opt,name=paperCount,proto3" json:"paperCount,omitempty"`
	PageMode   ProtoPageMode `protobuf:"varint,3,opt,name=pageMode,proto3,enum=ProtoPageMode" json:"pageMode,omitempty"`
}

func (x *ProtoNewPage) Reset() {
	*x = ProtoNewPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoNewPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoNewPage) ProtoMessage() {}

func (x *ProtoNewPage) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoNewPage.ProtoReflect.Descriptor instead.
func (*ProtoNewPage) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{83}
}

func (x *ProtoNewPage) GetPaperTray() uint32 {
	if x != nil {
		return x.PaperTray
	}
	return 0
}

func (x *ProtoNewPage) GetPaperCount() uint32 {
	if x != nil {
		return x.PaperCount
	}
	return 0
}

func (x *ProtoNewPage) GetPageMode() ProtoPageMode {
	if x != nil {
		return x.PageMode
	}
	return ProtoPageMode_NEXT_PAGE
}

type ProtoIndentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XChildren       []*ProtoDocumentElement `protobuf:"bytes,1,rep,name=_children,json=Children,proto3" json:"_children,omitempty"`
	Parent          *ProtoDocumentElement   `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Left            *ProtoBoxedMeasure      `protobuf:"bytes,3,opt,name=left,proto3" json:"left,omitempty"`
	Right           *ProtoBoxedMeasure      `protobuf:"bytes,4,opt,name=right,proto3" json:"right,omitempty"`
	Uuid            string                  `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ComChannelUUIDs []string                `protobuf:"bytes,6,rep,name=comChannelUUIDs,proto3" json:"comChannelUUIDs,omitempty"`
}

func (x *ProtoIndentation) Reset() {
	*x = ProtoIndentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_docframe_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoIndentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoIndentation) ProtoMessage() {}

func (x *ProtoIndentation) ProtoReflect() protoreflect.Message {
	mi := &file_build_docframe_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoIndentation.ProtoReflect.Descriptor instead.
func (*ProtoIndentation) Descriptor() ([]byte, []int) {
	return file_build_docframe_proto_rawDescGZIP(), []int{84}
}

func (x *ProtoIndentation) GetXChildren() []*ProtoDocumentElement {
	if x != nil {
		return x.XChildren
	}
	return nil
}

func (x *ProtoIndentation) GetParent() *ProtoDocumentElement {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProtoIndentation) GetLeft() *ProtoBoxedMeasure {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *ProtoIndentation) GetRight() *ProtoBoxedMeasure {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *ProtoIndentation) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProtoIndentation) GetComChannelUUIDs() []string {
	if x != nil {
		return x.ComChannelUUIDs
	}
	return nil
}

var File_build_docframe_proto protoreflect.FileDescriptor

var file_build_docframe_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x64, 0x6f, 0x63, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x3f, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x40, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x50, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x53, 0x50, 0x42, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x50, 0x42, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0xce, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x22, 0x64, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x4d, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x6d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x23,
	0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x05, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x8a, 0x01,
	0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49,
	0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x54,
	0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x1d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6c, 0x6c, 0x75,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x12, 0x4b, 0x0a, 0x08,
	0x74, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x41, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0x2f, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x46, 0x6f, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x6f, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x01, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x6d, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x79, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6b, 0x22,
	0x4c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x85, 0x01,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x47, 0x42, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x62, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x4d, 0x59, 0x4b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6d,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6b, 0x22, 0x68, 0x0a, 0x1d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x64, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x3f, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x2d,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x53, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x74,
	0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x24, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x62,
	0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x5a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0xad, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x36, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x22, 0xd6, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x27,
	0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x22, 0x11, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x74, 0x6d, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x22,
	0xca, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x27, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x45, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x45, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x17,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x01, 0x78, 0x12, 0x20, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x01, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2a,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2f, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x6c, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01, 0x79, 0x22, 0x45, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0x7f, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x83, 0x05, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x6f,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12,
	0x30, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f,
	0x6e, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x42, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x66, 0x69, 0x78, 0x42, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x78, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x66, 0x69, 0x78, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f,
	0x6e, 0x74, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x23,
	0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x62,
	0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0xbe, 0x03, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x0d, 0x66, 0x69,
	0x78, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x0d, 0x66,
	0x69, 0x78, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x78, 0x42, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66,
	0x69, 0x78, 0x42, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x49, 0x74, 0x61,
	0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x78, 0x49, 0x74,
	0x61, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x04,
	0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x0d, 0x66, 0x69,
	0x78, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x0d, 0x66,
	0x69, 0x78, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x69, 0x78, 0x42, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66,
	0x69, 0x78, 0x42, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x49, 0x74, 0x61,
	0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x78, 0x49, 0x74,
	0x61, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x2a, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6e, 0x74, 0x52,
	0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x62,
	0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64,
	0x12, 0x27, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x22, 0xcd, 0x04, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78,
	0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x46,
	0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x78,
	0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69,
	0x78, 0x42, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x69, 0x78,
	0x42, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x49, 0x74, 0x61, 0x6c, 0x69,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x78, 0x49, 0x74, 0x61, 0x6c,
	0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a,
	0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x0a, 0x66,
	0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x6c,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x27,
	0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xbd, 0x04, 0x0a, 0x1f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x08, 0x66, 0x6f,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x0d,
	0x66, 0x69, 0x78, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6e, 0x74, 0x52,
	0x0d, 0x66, 0x69, 0x78, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x69, 0x78, 0x42, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x66, 0x69, 0x78, 0x42, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x49,
	0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x78,
	0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6e,
	0x74, 0x52, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x23, 0x0a,
	0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x62, 0x6f,
	0x6c, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x58, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e,
	0x75, 0x6c, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xd7, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0xfc, 0x0b, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x66,
	0x6f, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x46, 0x6f, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x6f, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78,
	0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12, 0x2e,
	0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x36,
	0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x66, 0x6f,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x3e, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x65, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x65,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78,
	0x65, 0x64, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0e, 0x69, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0e,
	0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x62, 0x6f, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0a,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x12, 0x34,
	0x0a, 0x0c, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0d, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0d, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0d,
	0x77, 0x69, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0d, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x46, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x78, 0x65, 0x64, 0x53, 0x50, 0x42, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x3a, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x0b, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x68, 0x79,
	0x70, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x6a, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xa7, 0x03, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x32,
	0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x12,
	0x21, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78,
	0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x78, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x07, 0x78, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x6c, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x22,
	0xb8, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x22, 0xe3, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0f, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x44,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x5c, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x22, 0x90, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a,
	0x10, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd0, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x16, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x34,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x06, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x53, 0x69, 0x64, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x06, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x64, 0x65,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0x83, 0x03, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x01, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x01, 0x78, 0x12, 0x1b, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x01, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x27, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x55, 0x49, 0x44, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x09, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x22, 0xae, 0x01, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x09,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x22, 0xf7, 0x17,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x72, 0x69,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x42, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x72, 0x69, 0x63,
	0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x65, 0x78, 0x74, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74,
	0x42, 0x72, 0x69, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x42, 0x0a, 0x10, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x06,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x12, 0x30, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x44, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x44, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x05, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x44, 0x65, 0x66,
	0x48, 0x00, 0x52, 0x04, 0x70, 0x44, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x63, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43,
	0x44, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x44, 0x65, 0x66,
	0x12, 0x36, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x44, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x50, 0x44, 0x65, 0x66, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x55, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x65,
	0x77, 0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x29, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x70,
	0x61, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x53, 0x70, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x2f,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x49, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x43, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5c, 0x0a, 0x1a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x17,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x20, 0x0a, 0x04, 0x66, 0x6f, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6f, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66,
	0x6f, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x74, 0x6d, 0x6c, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x74, 0x6d, 0x6c, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x48,
	0x0a, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x53,
	0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3c, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x39, 0x0a, 0x0d, 0x66, 0x6c, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x6c, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x66, 0x6c, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x18,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x15, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x53, 0x0a, 0x17, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x14,
	0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x1d, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x1a, 0x75, 0x6e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0b, 0x69,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xd9, 0x05, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x78, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x78, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a,
	0x01, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x01, 0x78, 0x12,
	0x20, 0x0a, 0x01, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x01,
	0x79, 0x12, 0x3b, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x10, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x66, 0x6c,
	0x69, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x6c, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x66, 0x6c, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x36, 0x0a, 0x0c, 0x63, 0x72, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x72, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x63, 0x72,
	0x6f, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x61, 0x69,
	0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x52, 0x03, 0x61, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x65, 0x78, 0x74, 0x42, 0x72, 0x69, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55,
	0x55, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x74, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x64, 0x74, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x74, 0x6d, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x74, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x44, 0x65,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x44, 0x65, 0x66, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x44, 0x65, 0x66, 0x55, 0x75, 0x69, 0x64, 0x22, 0x31, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x44, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x44, 0x65, 0x66, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x44, 0x65, 0x66, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x38, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x75, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x55, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x44,
	0x65, 0x66, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41,
	0x0a, 0x13, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x22, 0x83,
	0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x44, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x30,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x75, 0x69, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x65, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x65,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x32,
	0x0a, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x65, 0x77,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x70, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x70, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x85,
	0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x28,
	0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x55, 0x49, 0x44, 0x73, 0x2a, 0x38, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53,
	0x50, 0x42, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x50, 0x45, 0x52, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x02,
	0x2a, 0xec, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4f, 0x4c,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x53,
	0x48, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x44, 0x4f, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x44, 0x4f,
	0x54, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x44, 0x41, 0x53, 0x48, 0x45, 0x44, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x44, 0x49,
	0x55, 0x4d, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x45, 0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x48,
	0x45, 0x41, 0x56, 0x59, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x41, 0x53, 0x48, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x0b, 0x2a,
	0x47, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x43,
	0x4d, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x4d, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x49,
	0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x12, 0x06, 0x0a, 0x02, 0x50, 0x58, 0x10, 0x05, 0x2a, 0x7b, 0x0a, 0x29, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6c, 0x6c, 0x75, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x5f, 0x41, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x45, 0x47, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x55, 0x4d, 0x4d, 0x59,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x52, 0x47, 0x42, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4d, 0x59, 0x4b, 0x10, 0x04,
	0x2a, 0x92, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x4a, 0x55, 0x53, 0x54, 0x49, 0x46,
	0x59, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x5f, 0x4a, 0x55, 0x53, 0x54, 0x49, 0x46, 0x59, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x47, 0x45, 0x10, 0x05, 0x2a, 0x39, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x44, 0x44,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x02,
	0x2a, 0x83, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x44, 0x46, 0x34, 0x31, 0x37, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x4d, 0x41, 0x54, 0x52, 0x49, 0x58, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x43, 0x31, 0x32, 0x38, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02,
	0x51, 0x52, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x54, 0x46, 0x10, 0x04, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x41, 0x4e, 0x38, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x41, 0x4e, 0x31, 0x33,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x45, 0x33, 0x39, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x57, 0x49, 0x53, 0x53, 0x51, 0x52, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x5a, 0x54, 0x45, 0x43, 0x10, 0x09, 0x2a, 0x52, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x56, 0x45, 0x52,
	0x53, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x49, 0x4f, 0x10, 0x04, 0x2a, 0x8e, 0x01, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x57,
	0x4f, 0x52, 0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x53, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x57, 0x4f, 0x52, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x42, 0x4c,
	0x41, 0x4e, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43,
	0x54, 0x45, 0x52, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x53, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x53, 0x10, 0x04, 0x2a, 0xb9, 0x01, 0x0a, 0x18,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x46, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x5f, 0x41, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x46,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x5f, 0x4c, 0x45,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x46, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x46, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x46, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x46, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x2a, 0x6f, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x52,
	0x41, 0x42, 0x49, 0x43, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4d, 0x5f, 0x55, 0x50,
	0x50, 0x45, 0x52, 0x43, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4d,
	0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x43, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x43, 0x41, 0x53, 0x45,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x57,
	0x45, 0x52, 0x43, 0x41, 0x53, 0x45, 0x10, 0x04, 0x2a, 0x43, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x4e, 0x0a,
	0x1a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42,
	0x4f, 0x44, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x55, 0x42, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x5f, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x8b,
	0x0f, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x52,
	0x49, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x52, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x42, 0x52, 0x45, 0x41, 0x4b,
	0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x25,
	0x0a, 0x21, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x47, 0x52,
	0x41, 0x50, 0x48, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x57, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x41, 0x4c,
	0x49, 0x47, 0x4e, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x42, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x14,
	0x12, 0x0d, 0x0a, 0x09, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x46, 0x4f, 0x4e, 0x54, 0x10, 0x15, 0x12,
	0x16, 0x0a, 0x12, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x54, 0x49, 0x4c, 0x5f,
	0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x52, 0x10, 0x17, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x10, 0x18, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x59,
	0x4c, 0x45, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x53, 0x50, 0x42,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x1a, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x54, 0x49, 0x4c, 0x5f,
	0x53, 0x54, 0x52, 0x49, 0x4b, 0x45, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x1c, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x52, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x1f, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x4f, 0x43, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x20, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x4f, 0x43, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x21, 0x12, 0x21, 0x0a, 0x1d, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x22, 0x12, 0x28,
	0x0a, 0x24, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x23, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x24, 0x12, 0x26, 0x0a, 0x22, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x25, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x4f,
	0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x26, 0x12, 0x2f, 0x0a, 0x2b, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x27, 0x12, 0x19, 0x0a, 0x15, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x28, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x59, 0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x42, 0x52, 0x49, 0x43, 0x4b, 0x10, 0x2a, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x4f, 0x43, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x2b, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x2c, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x56,
	0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x2d, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x44, 0x10, 0x2e, 0x12, 0x20, 0x0a, 0x1c, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x5f, 0x44, 0x45, 0x46, 0x10, 0x2f, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x10, 0x30, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x50, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x31, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f,
	0x55, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x32, 0x12, 0x1a, 0x0a, 0x16, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x5f, 0x44, 0x45, 0x46, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x4f, 0x43, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x5f, 0x44, 0x45,
	0x46, 0x10, 0x34, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x35, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x36, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x41, 0x47, 0x45,
	0x10, 0x37, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x38, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x39, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x54, 0x49, 0x4c, 0x5f, 0x43, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x10, 0x3a, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x54, 0x49, 0x4c, 0x5f, 0x46, 0x4c, 0x49,
	0x50, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x3b, 0x12, 0x20, 0x0a, 0x1c,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3c, 0x12, 0x1c,
	0x0a, 0x18, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x3d, 0x2a, 0x48, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x4f, 0x5f,
	0x50, 0x41, 0x47, 0x45, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_build_docframe_proto_rawDescOnce sync.Once
	file_build_docframe_proto_rawDescData = file_build_docframe_proto_rawDesc
)

func file_build_docframe_proto_rawDescGZIP() []byte {
	file_build_docframe_proto_rawDescOnce.Do(func() {
		file_build_docframe_proto_rawDescData = protoimpl.X.CompressGZIP(file_build_docframe_proto_rawDescData)
	})
	return file_build_docframe_proto_rawDescData
}

var file_build_docframe_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_build_docframe_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_build_docframe_proto_goTypes = []interface{}{
	(ProtoSPBMode)(0),                                      // 0: ProtoSPBMode
	(ProtoRuleStyle)(0),                                    // 1: ProtoRuleStyle
	(ProtoMeasureType)(0),                                  // 2: ProtoMeasureType
	(ProtoAdvancedIllustrationAreaTextFlowType)(0),         // 3: ProtoAdvancedIllustrationAreaTextFlowType
	(ProtoColorType)(0),                                    // 4: ProtoColorType
	(ProtoHorizontalAlignment)(0),                          // 5: ProtoHorizontalAlignment
	(ProtoVerticalAlignment)(0),                            // 6: ProtoVerticalAlignment
	(ProtoBarcodeType)(0),                                  // 7: ProtoBarcodeType
	(ProtoPositionMode)(0),                                 // 8: ProtoPositionMode
	(ProtoUnderlineMode)(0),                                // 9: ProtoUnderlineMode
	(ProtoImageReferencePoint)(0),                          // 10: ProtoImageReferencePoint
	(ProtoNumberType)(0),                                   // 11: ProtoNumberType
	(ProtoListLevelSettingType)(0),                         // 12: ProtoListLevelSettingType
	(ProtoTableContentGroupType)(0),                        // 13: ProtoTableContentGroupType
	(ProtoTableCellType)(0),                                // 14: ProtoTableCellType
	(NodeType)(0),                                          // 15: NodeType
	(ProtoPageMode)(0),                                     // 16: ProtoPageMode
	(*ProtoBoxedBool)(nil),                                 // 17: ProtoBoxedBool
	(*ProtoBoxedDouble)(nil),                               // 18: ProtoBoxedDouble
	(*ProtoBoxedInt32)(nil),                                // 19: ProtoBoxedInt32
	(*ProtoBoxedUint32)(nil),                               // 20: ProtoBoxedUint32
	(*ProtoBoxedString)(nil),                               // 21: ProtoBoxedString
	(*ProtoBoxedSPBMode)(nil),                              // 22: ProtoBoxedSPBMode
	(*ProtoStrikethroughSpec)(nil),                         // 23: ProtoStrikethroughSpec
	(*ProtoBoxedStrikethroughSpec)(nil),                    // 24: ProtoBoxedStrikethroughSpec
	(*ProtoMeasure)(nil),                                   // 25: ProtoMeasure
	(*ProtoBoxedMeasure)(nil),                              // 26: ProtoBoxedMeasure
	(*ProtoSideMeasures)(nil),                              // 27: ProtoSideMeasures
	(*ProtoBoxedAdvancedIllustrationAreaTextFlowType)(nil), // 28: ProtoBoxedAdvancedIllustrationAreaTextFlowType
	(*ProtoAdvancedIllustrationArea)(nil),                  // 29: ProtoAdvancedIllustrationArea
	(*ProtoFont)(nil),                                      // 30: ProtoFont
	(*ProtoBoxedFont)(nil),                                 // 31: ProtoBoxedFont
	(*ProtoColor)(nil),                                     // 32: ProtoColor
	(*ProtoBoxedColor)(nil),                                // 33: ProtoBoxedColor
	(*ProtoRGBColor)(nil),                                  // 34: ProtoRGBColor
	(*ProtoCMYKColor)(nil),                                 // 35: ProtoCMYKColor
	(*ProtoBoxedHorizontalAlignment)(nil),                  // 36: ProtoBoxedHorizontalAlignment
	(*ProtoBoxedVerticalAlignment)(nil),                    // 37: ProtoBoxedVerticalAlignment
	(*ProtoLinebreak)(nil),                                 // 38: ProtoLinebreak
	(*ProtoBorder)(nil),                                    // 39: ProtoBorder
	(*ProtoSideBorders)(nil),                               // 40: ProtoSideBorders
	(*ProtoBoxedPositionMode)(nil),                         // 41: ProtoBoxedPositionMode
	(*ProtoColumnSettings)(nil),                            // 42: ProtoColumnSettings
	(*ProtoGraphicState)(nil),                              // 43: ProtoGraphicState
	(*ProtoHtmlParser)(nil),                                // 44: ProtoHtmlParser
	(*ProtoUnderlineSpec)(nil),                             // 45: ProtoUnderlineSpec
	(*ProtoBoxedUnderlineSpec)(nil),                        // 46: ProtoBoxedUnderlineSpec
	(*ProtoCropSettings)(nil),                              // 47: ProtoCropSettings
	(*ProtoFlipSettings)(nil),                              // 48: ProtoFlipSettings
	(*ProtoDocumentElement)(nil),                           // 49: ProtoDocumentElement
	(*ProtoBranchDocumentElement)(nil),                     // 50: ProtoBranchDocumentElement
	(*ProtoLink)(nil),                                      // 51: ProtoLink
	(*ProtoListLevelSetting)(nil),                          // 52: ProtoListLevelSetting
	(*ProtoImageListLevelSetting)(nil),                     // 53: ProtoImageListLevelSetting
	(*ProtoTextListLevelSetting)(nil),                      // 54: ProtoTextListLevelSetting
	(*ProtoNumberListLevelSetting)(nil),                    // 55: ProtoNumberListLevelSetting
	(*ProtoUnnumberedListLevelSetting)(nil),                // 56: ProtoUnnumberedListLevelSetting
	(*ProtoListSetting)(nil),                               // 57: ProtoListSetting
	(*ProtoBoxedListSetting)(nil),                          // 58: ProtoBoxedListSetting
	(*ProtoNamedString)(nil),                               // 59: ProtoNamedString
	(*ProtoParagraph)(nil),                                 // 60: ProtoParagraph
	(*ProtoParagraphFormat)(nil),                           // 61: ProtoParagraphFormat
	(*ProtoSection)(nil),                                   // 62: ProtoSection
	(*ProtoSpaceVertically)(nil),                           // 63: ProtoSpaceVertically
	(*ProtoSpan)(nil),                                      // 64: ProtoSpan
	(*ProtoTable)(nil),                                     // 65: ProtoTable
	(*ProtoTableConfig)(nil),                               // 66: ProtoTableConfig
	(*ProtoTableSettings)(nil),                             // 67: ProtoTableSettings
	(*ProtoBoxedTableContentGroupType)(nil),                // 68: ProtoBoxedTableContentGroupType
	(*ProtoTableContentGroup)(nil),                         // 69: ProtoTableContentGroup
	(*ProtoTableContentGroupConfig)(nil),                   // 70: ProtoTableContentGroupConfig
	(*ProtoTableContentGroupSettings)(nil),                 // 71: ProtoTableContentGroupSettings
	(*ProtoTableRow)(nil),                                  // 72: ProtoTableRow
	(*ProtoTableRowConfig)(nil),                            // 73: ProtoTableRowConfig
	(*ProtoTableRowSettings)(nil),                          // 74: ProtoTableRowSettings
	(*ProtoBoxedTableCellType)(nil),                        // 75: ProtoBoxedTableCellType
	(*ProtoTableCell)(nil),                                 // 76: ProtoTableCell
	(*ProtoTableCellConfig)(nil),                           // 77: ProtoTableCellConfig
	(*ProtoTableCellSettings)(nil),                         // 78: ProtoTableCellSettings
	(*ProtoText)(nil),                                      // 79: ProtoText
	(*ProtoBarcode)(nil),                                   // 80: ProtoBarcode
	(*ProtoBrickReference)(nil),                            // 81: ProtoBrickReference
	(*ProtoBrick)(nil),                                     // 82: ProtoBrick
	(*ProtoTemplate)(nil),                                  // 83: ProtoTemplate
	(*ProtoHeader)(nil),                                    // 84: ProtoHeader
	(*ProtoFooter)(nil),                                    // 85: ProtoFooter
	(*Node)(nil),                                           // 86: Node
	(*ProtoImage)(nil),                                     // 87: ProtoImage
	(*ProtoDirectory)(nil),                                 // 88: ProtoDirectory
	(*ProtoTextBrick)(nil),                                 // 89: ProtoTextBrick
	(*ProtoVariable)(nil),                                  // 90: ProtoVariable
	(*ProtoFormatted)(nil),                                 // 91: ProtoFormatted
	(*ProtoApplyProtoCDef)(nil),                            // 92: ProtoApplyProtoCDef
	(*ProtoApplyProtoPDef)(nil),                            // 93: ProtoApplyProtoPDef
	(*ProtoApplyPtConfig)(nil),                             // 94: ProtoApplyPtConfig
	(*ProtoApplyUlConfig)(nil),                             // 95: ProtoApplyUlConfig
	(*ProtoCDef)(nil),                                      // 96: ProtoCDef
	(*ProtoPDef)(nil),                                      // 97: ProtoPDef
	(*ProtoPtConfig)(nil),                                  // 98: ProtoPtConfig
	(*ProtoUlConfig)(nil),                                  // 99: ProtoUlConfig
	(*ProtoNewPage)(nil),                                   // 100: ProtoNewPage
	(*ProtoIndentation)(nil),                               // 101: ProtoIndentation
	nil,                                                    // 102: ProtoTemplate.ContainerMappingEntry
}
var file_build_docframe_proto_depIdxs = []int32{
	0,   // 0: ProtoBoxedSPBMode.value:type_name -> ProtoSPBMode
	25,  // 1: ProtoStrikethroughSpec.weight:type_name -> ProtoMeasure
	9,   // 2: ProtoStrikethroughSpec.mode:type_name -> ProtoUnderlineMode
	32,  // 3: ProtoStrikethroughSpec.color:type_name -> ProtoColor
	1,   // 4: ProtoStrikethroughSpec.style:type_name -> ProtoRuleStyle
	23,  // 5: ProtoBoxedStrikethroughSpec.value:type_name -> ProtoStrikethroughSpec
	2,   // 6: ProtoMeasure.mtype:type_name -> ProtoMeasureType
	25,  // 7: ProtoBoxedMeasure.value:type_name -> ProtoMeasure
	25,  // 8: ProtoSideMeasures.top:type_name -> ProtoMeasure
	25,  // 9: ProtoSideMeasures.right:type_name -> ProtoMeasure
	25,  // 10: ProtoSideMeasures.bottom:type_name -> ProtoMeasure
	25,  // 11: ProtoSideMeasures.left:type_name -> ProtoMeasure
	3,   // 12: ProtoBoxedAdvancedIllustrationAreaTextFlowType.value:type_name -> ProtoAdvancedIllustrationAreaTextFlowType
	28,  // 13: ProtoAdvancedIllustrationArea.textFlow:type_name -> ProtoBoxedAdvancedIllustrationAreaTextFlowType
	27,  // 14: ProtoAdvancedIllustrationArea.margin:type_name -> ProtoSideMeasures
	30,  // 15: ProtoBoxedFont.value:type_name -> ProtoFont
	21,  // 16: ProtoColor.name:type_name -> ProtoBoxedString
	4,   // 17: ProtoColor.type:type_name -> ProtoColorType
	32,  // 18: ProtoBoxedColor.value:type_name -> ProtoColor
	21,  // 19: ProtoRGBColor.name:type_name -> ProtoBoxedString
	4,   // 20: ProtoRGBColor.type:type_name -> ProtoColorType
	21,  // 21: ProtoCMYKColor.name:type_name -> ProtoBoxedString
	4,   // 22: ProtoCMYKColor.type:type_name -> ProtoColorType
	5,   // 23: ProtoBoxedHorizontalAlignment.value:type_name -> ProtoHorizontalAlignment
	6,   // 24: ProtoBoxedVerticalAlignment.value:type_name -> ProtoVerticalAlignment
	49,  // 25: ProtoLinebreak.parent:type_name -> ProtoDocumentElement
	25,  // 26: ProtoBorder.weight:type_name -> ProtoMeasure
	32,  // 27: ProtoBorder.color:type_name -> ProtoColor
	39,  // 28: ProtoSideBorders.top:type_name -> ProtoBorder
	39,  // 29: ProtoSideBorders.right:type_name -> ProtoBorder
	39,  // 30: ProtoSideBorders.bottom:type_name -> ProtoBorder
	39,  // 31: ProtoSideBorders.left:type_name -> ProtoBorder
	8,   // 32: ProtoBoxedPositionMode.value:type_name -> ProtoPositionMode
	26,  // 33: ProtoColumnSettings.width:type_name -> ProtoBoxedMeasure
	26,  // 34: ProtoColumnSettings.interColumnSpace:type_name -> ProtoBoxedMeasure
	26,  // 35: ProtoColumnSettings.positionOffset:type_name -> ProtoBoxedMeasure
	8,   // 36: ProtoColumnSettings.positionMode:type_name -> ProtoPositionMode
	26,  // 37: ProtoColumnSettings.outsideMargin:type_name -> ProtoBoxedMeasure
	17,  // 38: ProtoGraphicState.bold:type_name -> ProtoBoxedBool
	17,  // 39: ProtoGraphicState.italic:type_name -> ProtoBoxedBool
	32,  // 40: ProtoGraphicState.colorStack:type_name -> ProtoColor
	17,  // 41: ProtoGraphicState.subscript:type_name -> ProtoBoxedBool
	17,  // 42: ProtoGraphicState.superscript:type_name -> ProtoBoxedBool
	17,  // 43: ProtoGraphicState.underline:type_name -> ProtoBoxedBool
	17,  // 44: ProtoGraphicState.strikethrough:type_name -> ProtoBoxedBool
	25,  // 45: ProtoUnderlineSpec.weight:type_name -> ProtoMeasure
	9,   // 46: ProtoUnderlineSpec.mode:type_name -> ProtoUnderlineMode
	32,  // 47: ProtoUnderlineSpec.color:type_name -> ProtoColor
	1,   // 48: ProtoUnderlineSpec.style:type_name -> ProtoRuleStyle
	45,  // 49: ProtoBoxedUnderlineSpec.value:type_name -> ProtoUnderlineSpec
	26,  // 50: ProtoCropSettings.x:type_name -> ProtoBoxedMeasure
	26,  // 51: ProtoCropSettings.y:type_name -> ProtoBoxedMeasure
	26,  // 52: ProtoCropSettings.width:type_name -> ProtoBoxedMeasure
	26,  // 53: ProtoCropSettings.height:type_name -> ProtoBoxedMeasure
	49,  // 54: ProtoDocumentElement.parent:type_name -> ProtoDocumentElement
	49,  // 55: ProtoBranchDocumentElement._children:type_name -> ProtoDocumentElement
	49,  // 56: ProtoBranchDocumentElement.parent:type_name -> ProtoDocumentElement
	49,  // 57: ProtoLink._children:type_name -> ProtoDocumentElement
	20,  // 58: ProtoListLevelSetting.fontSize:type_name -> ProtoBoxedUint32
	12,  // 59: ProtoListLevelSetting.type:type_name -> ProtoListLevelSettingType
	30,  // 60: ProtoListLevelSetting.fixFontFamily:type_name -> ProtoFont
	32,  // 61: ProtoListLevelSetting.color:type_name -> ProtoColor
	30,  // 62: ProtoListLevelSetting.fontFamily:type_name -> ProtoFont
	17,  // 63: ProtoListLevelSetting.bold:type_name -> ProtoBoxedBool
	17,  // 64: ProtoListLevelSetting.italic:type_name -> ProtoBoxedBool
	11,  // 65: ProtoListLevelSetting.numberType:type_name -> ProtoNumberType
	20,  // 66: ProtoImageListLevelSetting.fontSize:type_name -> ProtoBoxedUint32
	12,  // 67: ProtoImageListLevelSetting.type:type_name -> ProtoListLevelSettingType
	30,  // 68: ProtoImageListLevelSetting.fixFontFamily:type_name -> ProtoFont
	32,  // 69: ProtoImageListLevelSetting.color:type_name -> ProtoColor
	20,  // 70: ProtoTextListLevelSetting.fontSize:type_name -> ProtoBoxedUint32
	12,  // 71: ProtoTextListLevelSetting.type:type_name -> ProtoListLevelSettingType
	30,  // 72: ProtoTextListLevelSetting.fixFontFamily:type_name -> ProtoFont
	32,  // 73: ProtoTextListLevelSetting.color:type_name -> ProtoColor
	30,  // 74: ProtoTextListLevelSetting.fontFamily:type_name -> ProtoFont
	17,  // 75: ProtoTextListLevelSetting.bold:type_name -> ProtoBoxedBool
	17,  // 76: ProtoTextListLevelSetting.italic:type_name -> ProtoBoxedBool
	20,  // 77: ProtoNumberListLevelSetting.fontSize:type_name -> ProtoBoxedUint32
	12,  // 78: ProtoNumberListLevelSetting.type:type_name -> ProtoListLevelSettingType
	30,  // 79: ProtoNumberListLevelSetting.fixFontFamily:type_name -> ProtoFont
	32,  // 80: ProtoNumberListLevelSetting.color:type_name -> ProtoColor
	30,  // 81: ProtoNumberListLevelSetting.fontFamily:type_name -> ProtoFont
	17,  // 82: ProtoNumberListLevelSetting.bold:type_name -> ProtoBoxedBool
	17,  // 83: ProtoNumberListLevelSetting.italic:type_name -> ProtoBoxedBool
	11,  // 84: ProtoNumberListLevelSetting.numberType:type_name -> ProtoNumberType
	20,  // 85: ProtoUnnumberedListLevelSetting.fontSize:type_name -> ProtoBoxedUint32
	12,  // 86: ProtoUnnumberedListLevelSetting.type:type_name -> ProtoListLevelSettingType
	30,  // 87: ProtoUnnumberedListLevelSetting.fixFontFamily:type_name -> ProtoFont
	32,  // 88: ProtoUnnumberedListLevelSetting.color:type_name -> ProtoColor
	30,  // 89: ProtoUnnumberedListLevelSetting.fontFamily:type_name -> ProtoFont
	17,  // 90: ProtoUnnumberedListLevelSetting.bold:type_name -> ProtoBoxedBool
	17,  // 91: ProtoUnnumberedListLevelSetting.italic:type_name -> ProtoBoxedBool
	49,  // 92: ProtoListSetting.parent:type_name -> ProtoDocumentElement
	52,  // 93: ProtoListSetting.listLevelSettings:type_name -> ProtoListLevelSetting
	52,  // 94: ProtoListSetting.defaultListLevelSetting:type_name -> ProtoListLevelSetting
	57,  // 95: ProtoBoxedListSetting.value:type_name -> ProtoListSetting
	49,  // 96: ProtoNamedString._children:type_name -> ProtoDocumentElement
	49,  // 97: ProtoNamedString.parent:type_name -> ProtoDocumentElement
	49,  // 98: ProtoParagraph._children:type_name -> ProtoDocumentElement
	49,  // 99: ProtoParagraph.parent:type_name -> ProtoDocumentElement
	61,  // 100: ProtoParagraph.format:type_name -> ProtoParagraphFormat
	61,  // 101: ProtoParagraph.overwrite:type_name -> ProtoParagraphFormat
	61,  // 102: ProtoParagraphFormat.baseFormat:type_name -> ProtoParagraphFormat
	21,  // 103: ProtoParagraphFormat.name:type_name -> ProtoBoxedString
	17,  // 104: ProtoParagraphFormat.default:type_name -> ProtoBoxedBool
	31,  // 105: ProtoParagraphFormat.font:type_name -> ProtoBoxedFont
	17,  // 106: ProtoParagraphFormat.bold:type_name -> ProtoBoxedBool
	17,  // 107: ProtoParagraphFormat.italic:type_name -> ProtoBoxedBool
	33,  // 108: ProtoParagraphFormat.fontColor:type_name -> ProtoBoxedColor
	46,  // 109: ProtoParagraphFormat.underline:type_name -> ProtoBoxedUnderlineSpec
	26,  // 110: ProtoParagraphFormat.fontSize:type_name -> ProtoBoxedMeasure
	26,  // 111: ProtoParagraphFormat.characterWidth:type_name -> ProtoBoxedMeasure
	26,  // 112: ProtoParagraphFormat.characterSpacing:type_name -> ProtoBoxedMeasure
	26,  // 113: ProtoParagraphFormat.lineFeed:type_name -> ProtoBoxedMeasure
	36,  // 114: ProtoParagraphFormat.alignment:type_name -> ProtoBoxedHorizontalAlignment
	26,  // 115: ProtoParagraphFormat.indentionWidth:type_name -> ProtoBoxedMeasure
	19,  // 116: ProtoParagraphFormat.indentionLevel:type_name -> ProtoBoxedInt32
	26,  // 117: ProtoParagraphFormat.spaceAbove:type_name -> ProtoBoxedMeasure
	26,  // 118: ProtoParagraphFormat.spaceBelow:type_name -> ProtoBoxedMeasure
	19,  // 119: ProtoParagraphFormat.widowSetting:type_name -> ProtoBoxedInt32
	19,  // 120: ProtoParagraphFormat.orphanSetting:type_name -> ProtoBoxedInt32
	19,  // 121: ProtoParagraphFormat.widowPriority:type_name -> ProtoBoxedInt32
	24,  // 122: ProtoParagraphFormat.strikethrough:type_name -> ProtoBoxedStrikethroughSpec
	22,  // 123: ProtoParagraphFormat.superscriptSubscript:type_name -> ProtoBoxedSPBMode
	33,  // 124: ProtoParagraphFormat.backgroundColor:type_name -> ProtoBoxedColor
	58,  // 125: ProtoParagraphFormat.listSetting:type_name -> ProtoBoxedListSetting
	17,  // 126: ProtoParagraphFormat.hyphenation:type_name -> ProtoBoxedBool
	21,  // 127: ProtoParagraphFormat.preNamedString:type_name -> ProtoBoxedString
	21,  // 128: ProtoParagraphFormat.postNamedString:type_name -> ProtoBoxedString
	21,  // 129: ProtoParagraphFormat.semanticType:type_name -> ProtoBoxedString
	49,  // 130: ProtoSection._children:type_name -> ProtoDocumentElement
	49,  // 131: ProtoSection.parent:type_name -> ProtoDocumentElement
	25,  // 132: ProtoSection.pageWidth:type_name -> ProtoMeasure
	25,  // 133: ProtoSection.pageDepth:type_name -> ProtoMeasure
	42,  // 134: ProtoSection.columnSettings:type_name -> ProtoColumnSettings
	49,  // 135: ProtoSpaceVertically.parent:type_name -> ProtoDocumentElement
	25,  // 136: ProtoSpaceVertically.space:type_name -> ProtoMeasure
	49,  // 137: ProtoSpan._children:type_name -> ProtoDocumentElement
	49,  // 138: ProtoSpan.parent:type_name -> ProtoDocumentElement
	17,  // 139: ProtoSpan.bold:type_name -> ProtoBoxedBool
	17,  // 140: ProtoSpan.italic:type_name -> ProtoBoxedBool
	32,  // 141: ProtoSpan.color:type_name -> ProtoColor
	17,  // 142: ProtoSpan.subscript:type_name -> ProtoBoxedBool
	17,  // 143: ProtoSpan.superscript:type_name -> ProtoBoxedBool
	17,  // 144: ProtoSpan.underline:type_name -> ProtoBoxedBool
	17,  // 145: ProtoSpan.strikethrough:type_name -> ProtoBoxedBool
	49,  // 146: ProtoTable._children:type_name -> ProtoDocumentElement
	49,  // 147: ProtoTable.parent:type_name -> ProtoDocumentElement
	67,  // 148: ProtoTable.settings:type_name -> ProtoTableSettings
	49,  // 149: ProtoTableConfig.parent:type_name -> ProtoDocumentElement
	67,  // 150: ProtoTableConfig.settings:type_name -> ProtoTableSettings
	25,  // 151: ProtoTableSettings.xOffset:type_name -> ProtoMeasure
	17,  // 152: ProtoTableSettings.leftMeasure:type_name -> ProtoBoxedBool
	25,  // 153: ProtoTableSettings.width:type_name -> ProtoMeasure
	20,  // 154: ProtoTableSettings.repeatHeader:type_name -> ProtoBoxedUint32
	13,  // 155: ProtoBoxedTableContentGroupType.value:type_name -> ProtoTableContentGroupType
	49,  // 156: ProtoTableContentGroup._children:type_name -> ProtoDocumentElement
	49,  // 157: ProtoTableContentGroup.parent:type_name -> ProtoDocumentElement
	71,  // 158: ProtoTableContentGroup.settings:type_name -> ProtoTableContentGroupSettings
	49,  // 159: ProtoTableContentGroupConfig.parent:type_name -> ProtoDocumentElement
	71,  // 160: ProtoTableContentGroupConfig.settings:type_name -> ProtoTableContentGroupSettings
	68,  // 161: ProtoTableContentGroupSettings.contentGroupType:type_name -> ProtoBoxedTableContentGroupType
	32,  // 162: ProtoTableContentGroupSettings.backgroundColors:type_name -> ProtoColor
	49,  // 163: ProtoTableRow._children:type_name -> ProtoDocumentElement
	49,  // 164: ProtoTableRow.parent:type_name -> ProtoDocumentElement
	74,  // 165: ProtoTableRow.settings:type_name -> ProtoTableRowSettings
	20,  // 166: ProtoTableRow.rowConfigNumber:type_name -> ProtoBoxedUint32
	49,  // 167: ProtoTableRowConfig.parent:type_name -> ProtoDocumentElement
	74,  // 168: ProtoTableRowConfig.settings:type_name -> ProtoTableRowSettings
	25,  // 169: ProtoTableRowSettings.minHeight:type_name -> ProtoMeasure
	14,  // 170: ProtoBoxedTableCellType.value:type_name -> ProtoTableCellType
	49,  // 171: ProtoTableCell._children:type_name -> ProtoDocumentElement
	49,  // 172: ProtoTableCell.parent:type_name -> ProtoDocumentElement
	78,  // 173: ProtoTableCell.settings:type_name -> ProtoTableCellSettings
	20,  // 174: ProtoTableCell.cellConfigNumber:type_name -> ProtoBoxedUint32
	20,  // 175: ProtoTableCell.index:type_name -> ProtoBoxedUint32
	49,  // 176: ProtoTableCellConfig.parent:type_name -> ProtoDocumentElement
	78,  // 177: ProtoTableCellConfig.settings:type_name -> ProtoTableCellSettings
	75,  // 178: ProtoTableCellConfig.cellType:type_name -> ProtoBoxedTableCellType
	25,  // 179: ProtoTableCellSettings.width:type_name -> ProtoMeasure
	36,  // 180: ProtoTableCellSettings.align:type_name -> ProtoBoxedHorizontalAlignment
	37,  // 181: ProtoTableCellSettings.valign:type_name -> ProtoBoxedVerticalAlignment
	32,  // 182: ProtoTableCellSettings.backgroundColor:type_name -> ProtoColor
	27,  // 183: ProtoTableCellSettings.padding:type_name -> ProtoSideMeasures
	40,  // 184: ProtoTableCellSettings.border:type_name -> ProtoSideBorders
	27,  // 185: ProtoTableCellSettings.margin:type_name -> ProtoSideMeasures
	49,  // 186: ProtoText.parent:type_name -> ProtoDocumentElement
	7,   // 187: ProtoBarcode.type:type_name -> ProtoBarcodeType
	25,  // 188: ProtoBarcode.x:type_name -> ProtoMeasure
	25,  // 189: ProtoBarcode.y:type_name -> ProtoMeasure
	10,  // 190: ProtoBarcode.referencePoint:type_name -> ProtoImageReferencePoint
	25,  // 191: ProtoBarcode.width:type_name -> ProtoMeasure
	25,  // 192: ProtoBarcode.height:type_name -> ProtoMeasure
	25,  // 193: ProtoBarcode.padding:type_name -> ProtoMeasure
	49,  // 194: ProtoBrick._children:type_name -> ProtoDocumentElement
	49,  // 195: ProtoBrick.parent:type_name -> ProtoDocumentElement
	49,  // 196: ProtoTemplate._children:type_name -> ProtoDocumentElement
	49,  // 197: ProtoTemplate.parent:type_name -> ProtoDocumentElement
	102, // 198: ProtoTemplate.containerMapping:type_name -> ProtoTemplate.ContainerMappingEntry
	49,  // 199: ProtoHeader._children:type_name -> ProtoDocumentElement
	49,  // 200: ProtoHeader.parent:type_name -> ProtoDocumentElement
	49,  // 201: ProtoFooter._children:type_name -> ProtoDocumentElement
	49,  // 202: ProtoFooter.parent:type_name -> ProtoDocumentElement
	86,  // 203: Node.children:type_name -> Node
	57,  // 204: Node.list_setting:type_name -> ProtoListSetting
	32,  // 205: Node.color:type_name -> ProtoColor
	82,  // 206: Node.brick:type_name -> ProtoBrick
	83,  // 207: Node.template:type_name -> ProtoTemplate
	91,  // 208: Node.formatted:type_name -> ProtoFormatted
	87,  // 209: Node.image:type_name -> ProtoImage
	61,  // 210: Node.paragraph_format:type_name -> ProtoParagraphFormat
	89,  // 211: Node.text_brick:type_name -> ProtoTextBrick
	79,  // 212: Node.text:type_name -> ProtoText
	38,  // 213: Node.linebreak:type_name -> ProtoLinebreak
	63,  // 214: Node.space_vertically:type_name -> ProtoSpaceVertically
	85,  // 215: Node.footer:type_name -> ProtoFooter
	84,  // 216: Node.header:type_name -> ProtoHeader
	65,  // 217: Node.table:type_name -> ProtoTable
	72,  // 218: Node.table_row:type_name -> ProtoTableRow
	76,  // 219: Node.table_cell:type_name -> ProtoTableCell
	96,  // 220: Node.c_def:type_name -> ProtoCDef
	97,  // 221: Node.p_def:type_name -> ProtoPDef
	92,  // 222: Node.apply_c_def:type_name -> ProtoApplyProtoCDef
	93,  // 223: Node.apply_p_def:type_name -> ProtoApplyProtoPDef
	94,  // 224: Node.apply_pt_config:type_name -> ProtoApplyPtConfig
	95,  // 225: Node.apply_ul_config:type_name -> ProtoApplyUlConfig
	98,  // 226: Node.pt_config:type_name -> ProtoPtConfig
	99,  // 227: Node.ul_config:type_name -> ProtoUlConfig
	100, // 228: Node.new_page:type_name -> ProtoNewPage
	90,  // 229: Node.variable:type_name -> ProtoVariable
	59,  // 230: Node.named_string:type_name -> ProtoNamedString
	52,  // 231: Node.list_level_setting:type_name -> ProtoListLevelSetting
	60,  // 232: Node.paragraph:type_name -> ProtoParagraph
	62,  // 233: Node.section:type_name -> ProtoSection
	64,  // 234: Node.span:type_name -> ProtoSpan
	51,  // 235: Node.link:type_name -> ProtoLink
	88,  // 236: Node.directory:type_name -> ProtoDirectory
	69,  // 237: Node.table_content_group:type_name -> ProtoTableContentGroup
	66,  // 238: Node.table_config:type_name -> ProtoTableConfig
	77,  // 239: Node.table_cell_config:type_name -> ProtoTableCellConfig
	73,  // 240: Node.table_row_config:type_name -> ProtoTableRowConfig
	70,  // 241: Node.table_content_group_config:type_name -> ProtoTableContentGroupConfig
	81,  // 242: Node.brick_reference:type_name -> ProtoBrickReference
	39,  // 243: Node.border:type_name -> ProtoBorder
	42,  // 244: Node.column_settings:type_name -> ProtoColumnSettings
	30,  // 245: Node.font:type_name -> ProtoFont
	43,  // 246: Node.graphic_state:type_name -> ProtoGraphicState
	44,  // 247: Node.html_parser:type_name -> ProtoHtmlParser
	25,  // 248: Node.measure:type_name -> ProtoMeasure
	23,  // 249: Node.strikethrough_spec:type_name -> ProtoStrikethroughSpec
	45,  // 250: Node.underline_spec:type_name -> ProtoUnderlineSpec
	47,  // 251: Node.crop_settings:type_name -> ProtoCropSettings
	48,  // 252: Node.flip_settings:type_name -> ProtoFlipSettings
	53,  // 253: Node.image_list_level_setting:type_name -> ProtoImageListLevelSetting
	55,  // 254: Node.number_list_level_setting:type_name -> ProtoNumberListLevelSetting
	54,  // 255: Node.text_list_level_setting:type_name -> ProtoTextListLevelSetting
	56,  // 256: Node.unnumbered_list_level_setting:type_name -> ProtoUnnumberedListLevelSetting
	101, // 257: Node.indentation:type_name -> ProtoIndentation
	80,  // 258: Node.barcode:type_name -> ProtoBarcode
	49,  // 259: ProtoImage.parent:type_name -> ProtoDocumentElement
	18,  // 260: ProtoImage.scale:type_name -> ProtoBoxedDouble
	18,  // 261: ProtoImage.columnScale:type_name -> ProtoBoxedDouble
	26,  // 262: ProtoImage.width:type_name -> ProtoBoxedMeasure
	26,  // 263: ProtoImage.height:type_name -> ProtoBoxedMeasure
	26,  // 264: ProtoImage.x:type_name -> ProtoBoxedMeasure
	26,  // 265: ProtoImage.y:type_name -> ProtoBoxedMeasure
	17,  // 266: ProtoImage.positionAbsolute:type_name -> ProtoBoxedBool
	48,  // 267: ProtoImage.flipSettings:type_name -> ProtoFlipSettings
	47,  // 268: ProtoImage.cropSettings:type_name -> ProtoCropSettings
	29,  // 269: ProtoImage.aia:type_name -> ProtoAdvancedIllustrationArea
	10,  // 270: ProtoImage.referencePoint:type_name -> ProtoImageReferencePoint
	49,  // 271: ProtoDirectory._children:type_name -> ProtoDocumentElement
	49,  // 272: ProtoDirectory.parent:type_name -> ProtoDocumentElement
	49,  // 273: ProtoTextBrick._children:type_name -> ProtoDocumentElement
	49,  // 274: ProtoTextBrick.parent:type_name -> ProtoDocumentElement
	49,  // 275: ProtoVariable.parent:type_name -> ProtoDocumentElement
	49,  // 276: ProtoFormatted.parent:type_name -> ProtoDocumentElement
	42,  // 277: ProtoCDef.columSettings:type_name -> ProtoColumnSettings
	17,  // 278: ProtoCDef.applyToHeaderFooter:type_name -> ProtoBoxedBool
	17,  // 279: ProtoCDef.applyImmediate:type_name -> ProtoBoxedBool
	26,  // 280: ProtoPDef.pageWidth:type_name -> ProtoBoxedMeasure
	26,  // 281: ProtoPDef.pageDepth:type_name -> ProtoBoxedMeasure
	26,  // 282: ProtoPtConfig.height:type_name -> ProtoBoxedMeasure
	26,  // 283: ProtoPtConfig.lineFeed:type_name -> ProtoBoxedMeasure
	26,  // 284: ProtoPtConfig.characterWidth:type_name -> ProtoBoxedMeasure
	26,  // 285: ProtoPtConfig.spaceWidth:type_name -> ProtoBoxedMeasure
	9,   // 286: ProtoUlConfig.mode:type_name -> ProtoUnderlineMode
	16,  // 287: ProtoNewPage.pageMode:type_name -> ProtoPageMode
	49,  // 288: ProtoIndentation._children:type_name -> ProtoDocumentElement
	49,  // 289: ProtoIndentation.parent:type_name -> ProtoDocumentElement
	26,  // 290: ProtoIndentation.left:type_name -> ProtoBoxedMeasure
	26,  // 291: ProtoIndentation.right:type_name -> ProtoBoxedMeasure
	292, // [292:292] is the sub-list for method output_type
	292, // [292:292] is the sub-list for method input_type
	292, // [292:292] is the sub-list for extension type_name
	292, // [292:292] is the sub-list for extension extendee
	0,   // [0:292] is the sub-list for field type_name
}

func init() { file_build_docframe_proto_init() }
func file_build_docframe_proto_init() {
	if File_build_docframe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_build_docframe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedUint32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedSPBMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoStrikethroughSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedStrikethroughSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoMeasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedMeasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoSideMeasures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedAdvancedIllustrationAreaTextFlowType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoAdvancedIllustrationArea); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoFont); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedFont); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoRGBColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoCMYKColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedHorizontalAlignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedVerticalAlignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoLinebreak); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoSideBorders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedPositionMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoColumnSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoGraphicState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHtmlParser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoUnderlineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedUnderlineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoCropSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoFlipSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDocumentElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBranchDocumentElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoListLevelSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoImageListLevelSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTextListLevelSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoNumberListLevelSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoUnnumberedListLevelSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoListSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedListSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoNamedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoParagraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoParagraphFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoSection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoSpaceVertically); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedTableContentGroupType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableContentGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableContentGroupConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableContentGroupSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableRowConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableRowSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBoxedTableCellType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableCellConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTableCellSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBarcode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBrickReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBrick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoFooter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDirectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTextBrick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoFormatted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoApplyProtoCDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoApplyProtoPDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoApplyPtConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoApplyUlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoCDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoPDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoPtConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoUlConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoNewPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_docframe_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoIndentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_build_docframe_proto_msgTypes[69].OneofWrappers = []interface{}{
		(*Node_ListSetting)(nil),
		(*Node_Color)(nil),
		(*Node_Brick)(nil),
		(*Node_Template)(nil),
		(*Node_Formatted)(nil),
		(*Node_Image)(nil),
		(*Node_ParagraphFormat)(nil),
		(*Node_TextBrick)(nil),
		(*Node_Text)(nil),
		(*Node_Linebreak)(nil),
		(*Node_SpaceVertically)(nil),
		(*Node_Footer)(nil),
		(*Node_Header)(nil),
		(*Node_Table)(nil),
		(*Node_TableRow)(nil),
		(*Node_TableCell)(nil),
		(*Node_CDef)(nil),
		(*Node_PDef)(nil),
		(*Node_ApplyCDef)(nil),
		(*Node_ApplyPDef)(nil),
		(*Node_ApplyPtConfig)(nil),
		(*Node_ApplyUlConfig)(nil),
		(*Node_PtConfig)(nil),
		(*Node_UlConfig)(nil),
		(*Node_NewPage)(nil),
		(*Node_Variable)(nil),
		(*Node_NamedString)(nil),
		(*Node_ListLevelSetting)(nil),
		(*Node_Paragraph)(nil),
		(*Node_Section)(nil),
		(*Node_Span)(nil),
		(*Node_Link)(nil),
		(*Node_Directory)(nil),
		(*Node_TableContentGroup)(nil),
		(*Node_TableConfig)(nil),
		(*Node_TableCellConfig)(nil),
		(*Node_TableRowConfig)(nil),
		(*Node_TableContentGroupConfig)(nil),
		(*Node_BrickReference)(nil),
		(*Node_Border)(nil),
		(*Node_ColumnSettings)(nil),
		(*Node_Font)(nil),
		(*Node_GraphicState)(nil),
		(*Node_HtmlParser)(nil),
		(*Node_Measure)(nil),
		(*Node_StrikethroughSpec)(nil),
		(*Node_UnderlineSpec)(nil),
		(*Node_CropSettings)(nil),
		(*Node_FlipSettings)(nil),
		(*Node_ImageListLevelSetting)(nil),
		(*Node_NumberListLevelSetting)(nil),
		(*Node_TextListLevelSetting)(nil),
		(*Node_UnnumberedListLevelSetting)(nil),
		(*Node_Indentation)(nil),
		(*Node_Barcode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_build_docframe_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_build_docframe_proto_goTypes,
		DependencyIndexes: file_build_docframe_proto_depIdxs,
		EnumInfos:         file_build_docframe_proto_enumTypes,
		MessageInfos:      file_build_docframe_proto_msgTypes,
	}.Build()
	File_build_docframe_proto = out.File
	file_build_docframe_proto_rawDesc = nil
	file_build_docframe_proto_goTypes = nil
	file_build_docframe_proto_depIdxs = nil
}
