// @generated by protoc-gen-es v1.9.0
// @generated from file utils/v1/color.proto (package utils.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ProtoBoxedString } from "../../box/v1/string_pb.js";

/**
 * @generated from enum utils.v1.ProtoColorType
 */
export declare enum ProtoColorType {
  /**
   * dummy is needed here, because otherwise protoc command produces error
   *
   * @generated from enum value: PROTO_COLOR_TYPE_DUMMY_COLOR_TYPE = 0;
   */
  DUMMY_COLOR_TYPE = 0,

  /**
   * @generated from enum value: PROTO_COLOR_TYPE_RGB = 3;
   */
  RGB = 3,

  /**
   * @generated from enum value: PROTO_COLOR_TYPE_CMYK = 4;
   */
  CMYK = 4,
}

/**
 * Use ProtoColor both for ProtoRGBColor
 * and ProtoCMYKColor. Inheritance is not
 * supported by protobuf and this is the
 * easiest and fastest way found.
 *
 * @generated from message utils.v1.ProtoColor
 */
export declare class ProtoColor extends Message<ProtoColor> {
  /**
   * @generated from field: box.v1.ProtoBoxedString name = 1;
   */
  name?: ProtoBoxedString;

  /**
   * set to RGB or CMYK
   *
   * @generated from field: utils.v1.ProtoColorType type = 2;
   */
  type: ProtoColorType;

  /**
   * @generated from field: int32 r = 3;
   */
  r: number;

  /**
   * @generated from field: int32 g = 4;
   */
  g: number;

  /**
   * @generated from field: int32 b = 5;
   */
  b: number;

  /**
   * @generated from field: int32 c = 6;
   */
  c: number;

  /**
   * @generated from field: int32 m = 7;
   */
  m: number;

  /**
   * @generated from field: int32 y = 8;
   */
  y: number;

  /**
   * @generated from field: int32 k = 9;
   */
  k: number;

  constructor(data?: PartialMessage<ProtoColor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "utils.v1.ProtoColor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtoColor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtoColor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtoColor;

  static equals(a: ProtoColor | PlainMessage<ProtoColor> | undefined, b: ProtoColor | PlainMessage<ProtoColor> | undefined): boolean;
}

/**
 * @generated from message utils.v1.ProtoBoxedColor
 */
export declare class ProtoBoxedColor extends Message<ProtoBoxedColor> {
  /**
   * @generated from field: utils.v1.ProtoColor value = 1;
   */
  value?: ProtoColor;

  /**
   * @generated from field: bool is_null = 2;
   */
  isNull: boolean;

  constructor(data?: PartialMessage<ProtoBoxedColor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "utils.v1.ProtoBoxedColor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtoBoxedColor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtoBoxedColor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtoBoxedColor;

  static equals(a: ProtoBoxedColor | PlainMessage<ProtoBoxedColor> | undefined, b: ProtoBoxedColor | PlainMessage<ProtoBoxedColor> | undefined): boolean;
}

/**
 * @generated from message utils.v1.ProtoRGBColor
 */
export declare class ProtoRGBColor extends Message<ProtoRGBColor> {
  /**
   * extends Color
   *
   * @generated from field: box.v1.ProtoBoxedString name = 1;
   */
  name?: ProtoBoxedString;

  /**
   * set to RGB
   *
   * @generated from field: utils.v1.ProtoColorType type = 2;
   */
  type: ProtoColorType;

  /**
   * @generated from field: int32 r = 3;
   */
  r: number;

  /**
   * @generated from field: int32 g = 4;
   */
  g: number;

  /**
   * @generated from field: int32 b = 5;
   */
  b: number;

  constructor(data?: PartialMessage<ProtoRGBColor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "utils.v1.ProtoRGBColor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtoRGBColor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtoRGBColor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtoRGBColor;

  static equals(a: ProtoRGBColor | PlainMessage<ProtoRGBColor> | undefined, b: ProtoRGBColor | PlainMessage<ProtoRGBColor> | undefined): boolean;
}

/**
 * @generated from message utils.v1.ProtoCMYKColor
 */
export declare class ProtoCMYKColor extends Message<ProtoCMYKColor> {
  /**
   * extends Color
   *
   * @generated from field: box.v1.ProtoBoxedString name = 1;
   */
  name?: ProtoBoxedString;

  /**
   * set to CMYK
   *
   * @generated from field: utils.v1.ProtoColorType type = 2;
   */
  type: ProtoColorType;

  /**
   * @generated from field: int32 c = 3;
   */
  c: number;

  /**
   * @generated from field: int32 m = 4;
   */
  m: number;

  /**
   * @generated from field: int32 y = 5;
   */
  y: number;

  /**
   * @generated from field: int32 k = 6;
   */
  k: number;

  constructor(data?: PartialMessage<ProtoCMYKColor>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "utils.v1.ProtoCMYKColor";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProtoCMYKColor;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProtoCMYKColor;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProtoCMYKColor;

  static equals(a: ProtoCMYKColor | PlainMessage<ProtoCMYKColor> | undefined, b: ProtoCMYKColor | PlainMessage<ProtoCMYKColor> | undefined): boolean;
}

