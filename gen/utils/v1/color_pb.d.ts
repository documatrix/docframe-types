// @generated by protoc-gen-es v2.2.5
// @generated from file utils/v1/color.proto (package utils.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { ProtoBoxedString } from "../../box/v1/string_pb";

/**
 * Describes the file utils/v1/color.proto.
 */
export declare const file_utils_v1_color: GenFile;

/**
 * Use ProtoColor both for ProtoRGBColor
 * and ProtoCMYKColor. Inheritance is not
 * supported by protobuf and this is the
 * easiest and fastest way found.
 *
 * @generated from message utils.v1.ProtoColor
 */
export declare type ProtoColor = Message<"utils.v1.ProtoColor"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * set to RGB or CMYK
   *
   * @generated from field: utils.v1.ProtoColorType type = 2;
   */
  type: ProtoColorType;

  /**
   * @generated from field: int32 r = 3;
   */
  r: number;

  /**
   * @generated from field: int32 g = 4;
   */
  g: number;

  /**
   * @generated from field: int32 b = 5;
   */
  b: number;

  /**
   * @generated from field: int32 c = 6;
   */
  c: number;

  /**
   * @generated from field: int32 m = 7;
   */
  m: number;

  /**
   * @generated from field: int32 y = 8;
   */
  y: number;

  /**
   * @generated from field: int32 k = 9;
   */
  k: number;
};

/**
 * Describes the message utils.v1.ProtoColor.
 * Use `create(ProtoColorSchema)` to create a new message.
 */
export declare const ProtoColorSchema: GenMessage<ProtoColor>;

/**
 * @generated from message utils.v1.ProtoBoxedColor
 */
export declare type ProtoBoxedColor = Message<"utils.v1.ProtoBoxedColor"> & {
  /**
   * @generated from field: utils.v1.ProtoColor value = 1;
   */
  value?: ProtoColor;

  /**
   * @generated from field: bool is_null = 2;
   */
  isNull: boolean;
};

/**
 * Describes the message utils.v1.ProtoBoxedColor.
 * Use `create(ProtoBoxedColorSchema)` to create a new message.
 */
export declare const ProtoBoxedColorSchema: GenMessage<ProtoBoxedColor>;

/**
 * @generated from message utils.v1.ProtoRGBColor
 */
export declare type ProtoRGBColor = Message<"utils.v1.ProtoRGBColor"> & {
  /**
   * extends Color
   *
   * @generated from field: box.v1.ProtoBoxedString name = 1;
   */
  name?: ProtoBoxedString;

  /**
   * set to RGB
   *
   * @generated from field: utils.v1.ProtoColorType type = 2;
   */
  type: ProtoColorType;

  /**
   * @generated from field: int32 r = 3;
   */
  r: number;

  /**
   * @generated from field: int32 g = 4;
   */
  g: number;

  /**
   * @generated from field: int32 b = 5;
   */
  b: number;
};

/**
 * Describes the message utils.v1.ProtoRGBColor.
 * Use `create(ProtoRGBColorSchema)` to create a new message.
 */
export declare const ProtoRGBColorSchema: GenMessage<ProtoRGBColor>;

/**
 * @generated from message utils.v1.ProtoCMYKColor
 */
export declare type ProtoCMYKColor = Message<"utils.v1.ProtoCMYKColor"> & {
  /**
   * extends Color
   *
   * @generated from field: box.v1.ProtoBoxedString name = 1;
   */
  name?: ProtoBoxedString;

  /**
   * set to CMYK
   *
   * @generated from field: utils.v1.ProtoColorType type = 2;
   */
  type: ProtoColorType;

  /**
   * @generated from field: int32 c = 3;
   */
  c: number;

  /**
   * @generated from field: int32 m = 4;
   */
  m: number;

  /**
   * @generated from field: int32 y = 5;
   */
  y: number;

  /**
   * @generated from field: int32 k = 6;
   */
  k: number;
};

/**
 * Describes the message utils.v1.ProtoCMYKColor.
 * Use `create(ProtoCMYKColorSchema)` to create a new message.
 */
export declare const ProtoCMYKColorSchema: GenMessage<ProtoCMYKColor>;

/**
 * @generated from enum utils.v1.ProtoColorType
 */
export enum ProtoColorType {
  /**
   * dummy is needed here, because otherwise protoc command produces error
   *
   * @generated from enum value: PROTO_COLOR_TYPE_DUMMY_COLOR_TYPE = 0;
   */
  DUMMY_COLOR_TYPE = 0,

  /**
   * @generated from enum value: PROTO_COLOR_TYPE_RGB = 3;
   */
  RGB = 3,

  /**
   * @generated from enum value: PROTO_COLOR_TYPE_CMYK = 4;
   */
  CMYK = 4,
}

/**
 * Describes the enum utils.v1.ProtoColorType.
 */
export declare const ProtoColorTypeSchema: GenEnum<ProtoColorType>;

