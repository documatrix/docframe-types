/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.ProtoBoxedBool = (function() {

    /**
     * Properties of a ProtoBoxedBool.
     * @name IProtoBoxedBool
     * @interface IProtoBoxedBool
     * @property {boolean|null} [value] ProtoBoxedBool value
     * @property {boolean|null} [isNull] ProtoBoxedBool isNull
     */

    /**
     * Constructs a new ProtoBoxedBool.
     * @name ProtoBoxedBool
     * @classdesc Represents a ProtoBoxedBool.
     * @implements IProtoBoxedBool
     * @constructor
     * @param {IProtoBoxedBool=} [properties] Properties to set
     */
    function ProtoBoxedBool(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedBool value.
     * @member {boolean} value
     * @memberof ProtoBoxedBool
     * @instance
     */
    ProtoBoxedBool.prototype.value = false;

    /**
     * ProtoBoxedBool isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedBool
     * @instance
     */
    ProtoBoxedBool.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedBool instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedBool
     * @static
     * @param {IProtoBoxedBool=} [properties] Properties to set
     * @returns {ProtoBoxedBool} ProtoBoxedBool instance
     */
    ProtoBoxedBool.create = function create(properties) {
        return new ProtoBoxedBool(properties);
    };

    /**
     * Encodes the specified ProtoBoxedBool message. Does not implicitly {@link ProtoBoxedBool.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedBool
     * @static
     * @param {IProtoBoxedBool} message ProtoBoxedBool message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedBool.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedBool message, length delimited. Does not implicitly {@link ProtoBoxedBool.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedBool
     * @static
     * @param {IProtoBoxedBool} message ProtoBoxedBool message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedBool.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedBool message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedBool
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedBool} ProtoBoxedBool
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedBool.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedBool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.bool();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedBool message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedBool
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedBool} ProtoBoxedBool
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedBool.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedBool message.
     * @function verify
     * @memberof ProtoBoxedBool
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedBool.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (typeof message.value !== "boolean")
                return "value: boolean expected";
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedBool message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedBool
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedBool} ProtoBoxedBool
     */
    ProtoBoxedBool.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedBool)
            return object;
        var message = new $root.ProtoBoxedBool();
        if (object.value != null)
            message.value = Boolean(object.value);
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedBool message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedBool
     * @static
     * @param {ProtoBoxedBool} message ProtoBoxedBool
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedBool.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = false;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedBool to JSON.
     * @function toJSON
     * @memberof ProtoBoxedBool
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedBool.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedBool
     * @function getTypeUrl
     * @memberof ProtoBoxedBool
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedBool.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedBool";
    };

    return ProtoBoxedBool;
})();

$root.ProtoBoxedDouble = (function() {

    /**
     * Properties of a ProtoBoxedDouble.
     * @name IProtoBoxedDouble
     * @interface IProtoBoxedDouble
     * @property {number|null} [value] ProtoBoxedDouble value
     * @property {boolean|null} [isNull] ProtoBoxedDouble isNull
     */

    /**
     * Constructs a new ProtoBoxedDouble.
     * @name ProtoBoxedDouble
     * @classdesc Represents a ProtoBoxedDouble.
     * @implements IProtoBoxedDouble
     * @constructor
     * @param {IProtoBoxedDouble=} [properties] Properties to set
     */
    function ProtoBoxedDouble(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedDouble value.
     * @member {number} value
     * @memberof ProtoBoxedDouble
     * @instance
     */
    ProtoBoxedDouble.prototype.value = 0;

    /**
     * ProtoBoxedDouble isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedDouble
     * @instance
     */
    ProtoBoxedDouble.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedDouble instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedDouble
     * @static
     * @param {IProtoBoxedDouble=} [properties] Properties to set
     * @returns {ProtoBoxedDouble} ProtoBoxedDouble instance
     */
    ProtoBoxedDouble.create = function create(properties) {
        return new ProtoBoxedDouble(properties);
    };

    /**
     * Encodes the specified ProtoBoxedDouble message. Does not implicitly {@link ProtoBoxedDouble.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedDouble
     * @static
     * @param {IProtoBoxedDouble} message ProtoBoxedDouble message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedDouble.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedDouble message, length delimited. Does not implicitly {@link ProtoBoxedDouble.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedDouble
     * @static
     * @param {IProtoBoxedDouble} message ProtoBoxedDouble message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedDouble.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedDouble message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedDouble
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedDouble} ProtoBoxedDouble
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedDouble.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedDouble();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.double();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedDouble message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedDouble
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedDouble} ProtoBoxedDouble
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedDouble.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedDouble message.
     * @function verify
     * @memberof ProtoBoxedDouble
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedDouble.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (typeof message.value !== "number")
                return "value: number expected";
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedDouble message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedDouble
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedDouble} ProtoBoxedDouble
     */
    ProtoBoxedDouble.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedDouble)
            return object;
        var message = new $root.ProtoBoxedDouble();
        if (object.value != null)
            message.value = Number(object.value);
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedDouble message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedDouble
     * @static
     * @param {ProtoBoxedDouble} message ProtoBoxedDouble
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedDouble.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedDouble to JSON.
     * @function toJSON
     * @memberof ProtoBoxedDouble
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedDouble.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedDouble
     * @function getTypeUrl
     * @memberof ProtoBoxedDouble
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedDouble.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedDouble";
    };

    return ProtoBoxedDouble;
})();

$root.ProtoBoxedInt32 = (function() {

    /**
     * Properties of a ProtoBoxedInt32.
     * @name IProtoBoxedInt32
     * @interface IProtoBoxedInt32
     * @property {number|null} [value] ProtoBoxedInt32 value
     * @property {boolean|null} [isNull] ProtoBoxedInt32 isNull
     */

    /**
     * Constructs a new ProtoBoxedInt32.
     * @name ProtoBoxedInt32
     * @classdesc Represents a ProtoBoxedInt32.
     * @implements IProtoBoxedInt32
     * @constructor
     * @param {IProtoBoxedInt32=} [properties] Properties to set
     */
    function ProtoBoxedInt32(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedInt32 value.
     * @member {number} value
     * @memberof ProtoBoxedInt32
     * @instance
     */
    ProtoBoxedInt32.prototype.value = 0;

    /**
     * ProtoBoxedInt32 isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedInt32
     * @instance
     */
    ProtoBoxedInt32.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedInt32 instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedInt32
     * @static
     * @param {IProtoBoxedInt32=} [properties] Properties to set
     * @returns {ProtoBoxedInt32} ProtoBoxedInt32 instance
     */
    ProtoBoxedInt32.create = function create(properties) {
        return new ProtoBoxedInt32(properties);
    };

    /**
     * Encodes the specified ProtoBoxedInt32 message. Does not implicitly {@link ProtoBoxedInt32.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedInt32
     * @static
     * @param {IProtoBoxedInt32} message ProtoBoxedInt32 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedInt32.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedInt32 message, length delimited. Does not implicitly {@link ProtoBoxedInt32.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedInt32
     * @static
     * @param {IProtoBoxedInt32} message ProtoBoxedInt32 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedInt32.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedInt32 message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedInt32
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedInt32} ProtoBoxedInt32
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedInt32.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedInt32();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.int32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedInt32 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedInt32
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedInt32} ProtoBoxedInt32
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedInt32.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedInt32 message.
     * @function verify
     * @memberof ProtoBoxedInt32
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedInt32.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isInteger(message.value))
                return "value: integer expected";
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedInt32 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedInt32
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedInt32} ProtoBoxedInt32
     */
    ProtoBoxedInt32.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedInt32)
            return object;
        var message = new $root.ProtoBoxedInt32();
        if (object.value != null)
            message.value = object.value | 0;
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedInt32 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedInt32
     * @static
     * @param {ProtoBoxedInt32} message ProtoBoxedInt32
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedInt32.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedInt32 to JSON.
     * @function toJSON
     * @memberof ProtoBoxedInt32
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedInt32.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedInt32
     * @function getTypeUrl
     * @memberof ProtoBoxedInt32
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedInt32.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedInt32";
    };

    return ProtoBoxedInt32;
})();

$root.ProtoBoxedUint32 = (function() {

    /**
     * Properties of a ProtoBoxedUint32.
     * @name IProtoBoxedUint32
     * @interface IProtoBoxedUint32
     * @property {number|null} [value] ProtoBoxedUint32 value
     * @property {boolean|null} [isNull] ProtoBoxedUint32 isNull
     */

    /**
     * Constructs a new ProtoBoxedUint32.
     * @name ProtoBoxedUint32
     * @classdesc Represents a ProtoBoxedUint32.
     * @implements IProtoBoxedUint32
     * @constructor
     * @param {IProtoBoxedUint32=} [properties] Properties to set
     */
    function ProtoBoxedUint32(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedUint32 value.
     * @member {number} value
     * @memberof ProtoBoxedUint32
     * @instance
     */
    ProtoBoxedUint32.prototype.value = 0;

    /**
     * ProtoBoxedUint32 isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedUint32
     * @instance
     */
    ProtoBoxedUint32.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedUint32 instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedUint32
     * @static
     * @param {IProtoBoxedUint32=} [properties] Properties to set
     * @returns {ProtoBoxedUint32} ProtoBoxedUint32 instance
     */
    ProtoBoxedUint32.create = function create(properties) {
        return new ProtoBoxedUint32(properties);
    };

    /**
     * Encodes the specified ProtoBoxedUint32 message. Does not implicitly {@link ProtoBoxedUint32.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedUint32
     * @static
     * @param {IProtoBoxedUint32} message ProtoBoxedUint32 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedUint32.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedUint32 message, length delimited. Does not implicitly {@link ProtoBoxedUint32.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedUint32
     * @static
     * @param {IProtoBoxedUint32} message ProtoBoxedUint32 message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedUint32.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedUint32 message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedUint32
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedUint32} ProtoBoxedUint32
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedUint32.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedUint32();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.uint32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedUint32 message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedUint32
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedUint32} ProtoBoxedUint32
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedUint32.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedUint32 message.
     * @function verify
     * @memberof ProtoBoxedUint32
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedUint32.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isInteger(message.value))
                return "value: integer expected";
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedUint32 message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedUint32
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedUint32} ProtoBoxedUint32
     */
    ProtoBoxedUint32.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedUint32)
            return object;
        var message = new $root.ProtoBoxedUint32();
        if (object.value != null)
            message.value = object.value >>> 0;
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedUint32 message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedUint32
     * @static
     * @param {ProtoBoxedUint32} message ProtoBoxedUint32
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedUint32.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedUint32 to JSON.
     * @function toJSON
     * @memberof ProtoBoxedUint32
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedUint32.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedUint32
     * @function getTypeUrl
     * @memberof ProtoBoxedUint32
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedUint32.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedUint32";
    };

    return ProtoBoxedUint32;
})();

$root.ProtoBoxedString = (function() {

    /**
     * Properties of a ProtoBoxedString.
     * @name IProtoBoxedString
     * @interface IProtoBoxedString
     * @property {string|null} [value] ProtoBoxedString value
     * @property {boolean|null} [isNull] ProtoBoxedString isNull
     */

    /**
     * Constructs a new ProtoBoxedString.
     * @name ProtoBoxedString
     * @classdesc Represents a ProtoBoxedString.
     * @implements IProtoBoxedString
     * @constructor
     * @param {IProtoBoxedString=} [properties] Properties to set
     */
    function ProtoBoxedString(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedString value.
     * @member {string} value
     * @memberof ProtoBoxedString
     * @instance
     */
    ProtoBoxedString.prototype.value = "";

    /**
     * ProtoBoxedString isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedString
     * @instance
     */
    ProtoBoxedString.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedString instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedString
     * @static
     * @param {IProtoBoxedString=} [properties] Properties to set
     * @returns {ProtoBoxedString} ProtoBoxedString instance
     */
    ProtoBoxedString.create = function create(properties) {
        return new ProtoBoxedString(properties);
    };

    /**
     * Encodes the specified ProtoBoxedString message. Does not implicitly {@link ProtoBoxedString.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedString
     * @static
     * @param {IProtoBoxedString} message ProtoBoxedString message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedString.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedString message, length delimited. Does not implicitly {@link ProtoBoxedString.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedString
     * @static
     * @param {IProtoBoxedString} message ProtoBoxedString message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedString.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedString message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedString
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedString} ProtoBoxedString
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedString.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedString();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.string();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedString message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedString
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedString} ProtoBoxedString
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedString.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedString message.
     * @function verify
     * @memberof ProtoBoxedString
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedString.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isString(message.value))
                return "value: string expected";
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedString message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedString
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedString} ProtoBoxedString
     */
    ProtoBoxedString.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedString)
            return object;
        var message = new $root.ProtoBoxedString();
        if (object.value != null)
            message.value = String(object.value);
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedString message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedString
     * @static
     * @param {ProtoBoxedString} message ProtoBoxedString
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedString.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = "";
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedString to JSON.
     * @function toJSON
     * @memberof ProtoBoxedString
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedString.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedString
     * @function getTypeUrl
     * @memberof ProtoBoxedString
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedString.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedString";
    };

    return ProtoBoxedString;
})();

/**
 * ProtoSPBMode enum.
 * @name ProtoSPBMode
 * @enum {number}
 * @property {number} NONE=0 NONE value
 * @property {number} SUPERSCRIPT=1 SUPERSCRIPT value
 * @property {number} SUBSCRIPT=2 SUBSCRIPT value
 */
$root.ProtoSPBMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NONE"] = 0;
    values[valuesById[1] = "SUPERSCRIPT"] = 1;
    values[valuesById[2] = "SUBSCRIPT"] = 2;
    return values;
})();

$root.ProtoBoxedSPBMode = (function() {

    /**
     * Properties of a ProtoBoxedSPBMode.
     * @name IProtoBoxedSPBMode
     * @interface IProtoBoxedSPBMode
     * @property {ProtoSPBMode|null} [value] ProtoBoxedSPBMode value
     * @property {boolean|null} [isNull] ProtoBoxedSPBMode isNull
     */

    /**
     * Constructs a new ProtoBoxedSPBMode.
     * @name ProtoBoxedSPBMode
     * @classdesc Represents a ProtoBoxedSPBMode.
     * @implements IProtoBoxedSPBMode
     * @constructor
     * @param {IProtoBoxedSPBMode=} [properties] Properties to set
     */
    function ProtoBoxedSPBMode(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedSPBMode value.
     * @member {ProtoSPBMode} value
     * @memberof ProtoBoxedSPBMode
     * @instance
     */
    ProtoBoxedSPBMode.prototype.value = 0;

    /**
     * ProtoBoxedSPBMode isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedSPBMode
     * @instance
     */
    ProtoBoxedSPBMode.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedSPBMode instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {IProtoBoxedSPBMode=} [properties] Properties to set
     * @returns {ProtoBoxedSPBMode} ProtoBoxedSPBMode instance
     */
    ProtoBoxedSPBMode.create = function create(properties) {
        return new ProtoBoxedSPBMode(properties);
    };

    /**
     * Encodes the specified ProtoBoxedSPBMode message. Does not implicitly {@link ProtoBoxedSPBMode.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {IProtoBoxedSPBMode} message ProtoBoxedSPBMode message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedSPBMode.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedSPBMode message, length delimited. Does not implicitly {@link ProtoBoxedSPBMode.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {IProtoBoxedSPBMode} message ProtoBoxedSPBMode message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedSPBMode.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedSPBMode message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedSPBMode} ProtoBoxedSPBMode
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedSPBMode.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedSPBMode();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.int32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedSPBMode message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedSPBMode} ProtoBoxedSPBMode
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedSPBMode.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedSPBMode message.
     * @function verify
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedSPBMode.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            switch (message.value) {
            default:
                return "value: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedSPBMode message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedSPBMode} ProtoBoxedSPBMode
     */
    ProtoBoxedSPBMode.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedSPBMode)
            return object;
        var message = new $root.ProtoBoxedSPBMode();
        switch (object.value) {
        default:
            if (typeof object.value === "number") {
                message.value = object.value;
                break;
            }
            break;
        case "NONE":
        case 0:
            message.value = 0;
            break;
        case "SUPERSCRIPT":
        case 1:
            message.value = 1;
            break;
        case "SUBSCRIPT":
        case 2:
            message.value = 2;
            break;
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedSPBMode message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {ProtoBoxedSPBMode} message ProtoBoxedSPBMode
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedSPBMode.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = options.enums === String ? "NONE" : 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.enums === String ? $root.ProtoSPBMode[message.value] === undefined ? message.value : $root.ProtoSPBMode[message.value] : message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedSPBMode to JSON.
     * @function toJSON
     * @memberof ProtoBoxedSPBMode
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedSPBMode.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedSPBMode
     * @function getTypeUrl
     * @memberof ProtoBoxedSPBMode
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedSPBMode.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedSPBMode";
    };

    return ProtoBoxedSPBMode;
})();

/**
 * ProtoRuleStyle enum.
 * @name ProtoRuleStyle
 * @enum {number}
 * @property {number} DUMMY_RULE_STYLE=0 DUMMY_RULE_STYLE value
 * @property {number} SOLID=1 SOLID value
 * @property {number} SPARSE_SHADING=2 SPARSE_SHADING value
 * @property {number} MEDIUM_SHADING=3 MEDIUM_SHADING value
 * @property {number} DENSE_SHADING=4 DENSE_SHADING value
 * @property {number} LIGHT_DOTTED=5 LIGHT_DOTTED value
 * @property {number} MEDIUM_DOTTED=6 MEDIUM_DOTTED value
 * @property {number} HEAVY_DOTTED=7 HEAVY_DOTTED value
 * @property {number} LIGHT_DASHED=8 LIGHT_DASHED value
 * @property {number} MEDIUM_DASHED=9 MEDIUM_DASHED value
 * @property {number} HEAVY_DASHED=10 HEAVY_DASHED value
 * @property {number} DASH_PATTERN=11 DASH_PATTERN value
 * @property {number} DOUBLE=254 DOUBLE value
 */
$root.ProtoRuleStyle = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "DUMMY_RULE_STYLE"] = 0;
    values[valuesById[1] = "SOLID"] = 1;
    values[valuesById[2] = "SPARSE_SHADING"] = 2;
    values[valuesById[3] = "MEDIUM_SHADING"] = 3;
    values[valuesById[4] = "DENSE_SHADING"] = 4;
    values[valuesById[5] = "LIGHT_DOTTED"] = 5;
    values[valuesById[6] = "MEDIUM_DOTTED"] = 6;
    values[valuesById[7] = "HEAVY_DOTTED"] = 7;
    values[valuesById[8] = "LIGHT_DASHED"] = 8;
    values[valuesById[9] = "MEDIUM_DASHED"] = 9;
    values[valuesById[10] = "HEAVY_DASHED"] = 10;
    values[valuesById[11] = "DASH_PATTERN"] = 11;
    values[valuesById[254] = "DOUBLE"] = 254;
    return values;
})();

$root.ProtoStrikethroughSpec = (function() {

    /**
     * Properties of a ProtoStrikethroughSpec.
     * @name IProtoStrikethroughSpec
     * @interface IProtoStrikethroughSpec
     * @property {IProtoMeasure|null} [weight] ProtoStrikethroughSpec weight
     * @property {ProtoUnderlineMode|null} [mode] ProtoStrikethroughSpec mode
     * @property {IProtoColor|null} [color] ProtoStrikethroughSpec color
     * @property {number|null} [offsetEm] ProtoStrikethroughSpec offsetEm
     * @property {ProtoRuleStyle|null} [style] ProtoStrikethroughSpec style
     */

    /**
     * Constructs a new ProtoStrikethroughSpec.
     * @name ProtoStrikethroughSpec
     * @classdesc Represents a ProtoStrikethroughSpec.
     * @implements IProtoStrikethroughSpec
     * @constructor
     * @param {IProtoStrikethroughSpec=} [properties] Properties to set
     */
    function ProtoStrikethroughSpec(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoStrikethroughSpec weight.
     * @member {IProtoMeasure|null|undefined} weight
     * @memberof ProtoStrikethroughSpec
     * @instance
     */
    ProtoStrikethroughSpec.prototype.weight = null;

    /**
     * ProtoStrikethroughSpec mode.
     * @member {ProtoUnderlineMode} mode
     * @memberof ProtoStrikethroughSpec
     * @instance
     */
    ProtoStrikethroughSpec.prototype.mode = 0;

    /**
     * ProtoStrikethroughSpec color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoStrikethroughSpec
     * @instance
     */
    ProtoStrikethroughSpec.prototype.color = null;

    /**
     * ProtoStrikethroughSpec offsetEm.
     * @member {number} offsetEm
     * @memberof ProtoStrikethroughSpec
     * @instance
     */
    ProtoStrikethroughSpec.prototype.offsetEm = 0;

    /**
     * ProtoStrikethroughSpec style.
     * @member {ProtoRuleStyle} style
     * @memberof ProtoStrikethroughSpec
     * @instance
     */
    ProtoStrikethroughSpec.prototype.style = 0;

    /**
     * Creates a new ProtoStrikethroughSpec instance using the specified properties.
     * @function create
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {IProtoStrikethroughSpec=} [properties] Properties to set
     * @returns {ProtoStrikethroughSpec} ProtoStrikethroughSpec instance
     */
    ProtoStrikethroughSpec.create = function create(properties) {
        return new ProtoStrikethroughSpec(properties);
    };

    /**
     * Encodes the specified ProtoStrikethroughSpec message. Does not implicitly {@link ProtoStrikethroughSpec.verify|verify} messages.
     * @function encode
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {IProtoStrikethroughSpec} message ProtoStrikethroughSpec message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoStrikethroughSpec.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.weight != null && Object.hasOwnProperty.call(message, "weight"))
            $root.ProtoMeasure.encode(message.weight, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mode);
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.offsetEm != null && Object.hasOwnProperty.call(message, "offsetEm"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.offsetEm);
        if (message.style != null && Object.hasOwnProperty.call(message, "style"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.style);
        return writer;
    };

    /**
     * Encodes the specified ProtoStrikethroughSpec message, length delimited. Does not implicitly {@link ProtoStrikethroughSpec.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {IProtoStrikethroughSpec} message ProtoStrikethroughSpec message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoStrikethroughSpec.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoStrikethroughSpec message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoStrikethroughSpec} ProtoStrikethroughSpec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoStrikethroughSpec.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoStrikethroughSpec();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.weight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.mode = reader.int32();
                    break;
                }
            case 3: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.offsetEm = reader.int32();
                    break;
                }
            case 5: {
                    message.style = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoStrikethroughSpec message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoStrikethroughSpec} ProtoStrikethroughSpec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoStrikethroughSpec.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoStrikethroughSpec message.
     * @function verify
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoStrikethroughSpec.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.weight != null && message.hasOwnProperty("weight")) {
            var error = $root.ProtoMeasure.verify(message.weight);
            if (error)
                return "weight." + error;
        }
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.offsetEm != null && message.hasOwnProperty("offsetEm"))
            if (!$util.isInteger(message.offsetEm))
                return "offsetEm: integer expected";
        if (message.style != null && message.hasOwnProperty("style"))
            switch (message.style) {
            default:
                return "style: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 254:
                break;
            }
        return null;
    };

    /**
     * Creates a ProtoStrikethroughSpec message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoStrikethroughSpec} ProtoStrikethroughSpec
     */
    ProtoStrikethroughSpec.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoStrikethroughSpec)
            return object;
        var message = new $root.ProtoStrikethroughSpec();
        if (object.weight != null) {
            if (typeof object.weight !== "object")
                throw TypeError(".ProtoStrikethroughSpec.weight: object expected");
            message.weight = $root.ProtoMeasure.fromObject(object.weight);
        }
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "DUMMY_UNDERLINE_MODE":
        case 0:
            message.mode = 0;
            break;
        case "WORDS_NO_BLANKS":
        case 1:
            message.mode = 1;
            break;
        case "WORDS_AND_BLANKS":
        case 2:
            message.mode = 2;
            break;
        case "CHARACTERS_NO_BLANKS":
        case 3:
            message.mode = 3;
            break;
        case "CHARACTERS_AND_BLANKS":
        case 4:
            message.mode = 4;
            break;
        }
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoStrikethroughSpec.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.offsetEm != null)
            message.offsetEm = object.offsetEm | 0;
        switch (object.style) {
        default:
            if (typeof object.style === "number") {
                message.style = object.style;
                break;
            }
            break;
        case "DUMMY_RULE_STYLE":
        case 0:
            message.style = 0;
            break;
        case "SOLID":
        case 1:
            message.style = 1;
            break;
        case "SPARSE_SHADING":
        case 2:
            message.style = 2;
            break;
        case "MEDIUM_SHADING":
        case 3:
            message.style = 3;
            break;
        case "DENSE_SHADING":
        case 4:
            message.style = 4;
            break;
        case "LIGHT_DOTTED":
        case 5:
            message.style = 5;
            break;
        case "MEDIUM_DOTTED":
        case 6:
            message.style = 6;
            break;
        case "HEAVY_DOTTED":
        case 7:
            message.style = 7;
            break;
        case "LIGHT_DASHED":
        case 8:
            message.style = 8;
            break;
        case "MEDIUM_DASHED":
        case 9:
            message.style = 9;
            break;
        case "HEAVY_DASHED":
        case 10:
            message.style = 10;
            break;
        case "DASH_PATTERN":
        case 11:
            message.style = 11;
            break;
        case "DOUBLE":
        case 254:
            message.style = 254;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoStrikethroughSpec message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {ProtoStrikethroughSpec} message ProtoStrikethroughSpec
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoStrikethroughSpec.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.weight = null;
            object.mode = options.enums === String ? "DUMMY_UNDERLINE_MODE" : 0;
            object.color = null;
            object.offsetEm = 0;
            object.style = options.enums === String ? "DUMMY_RULE_STYLE" : 0;
        }
        if (message.weight != null && message.hasOwnProperty("weight"))
            object.weight = $root.ProtoMeasure.toObject(message.weight, options);
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.ProtoUnderlineMode[message.mode] === undefined ? message.mode : $root.ProtoUnderlineMode[message.mode] : message.mode;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.offsetEm != null && message.hasOwnProperty("offsetEm"))
            object.offsetEm = message.offsetEm;
        if (message.style != null && message.hasOwnProperty("style"))
            object.style = options.enums === String ? $root.ProtoRuleStyle[message.style] === undefined ? message.style : $root.ProtoRuleStyle[message.style] : message.style;
        return object;
    };

    /**
     * Converts this ProtoStrikethroughSpec to JSON.
     * @function toJSON
     * @memberof ProtoStrikethroughSpec
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoStrikethroughSpec.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoStrikethroughSpec
     * @function getTypeUrl
     * @memberof ProtoStrikethroughSpec
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoStrikethroughSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoStrikethroughSpec";
    };

    return ProtoStrikethroughSpec;
})();

$root.ProtoBoxedStrikethroughSpec = (function() {

    /**
     * Properties of a ProtoBoxedStrikethroughSpec.
     * @name IProtoBoxedStrikethroughSpec
     * @interface IProtoBoxedStrikethroughSpec
     * @property {IProtoStrikethroughSpec|null} [value] ProtoBoxedStrikethroughSpec value
     * @property {boolean|null} [isNull] ProtoBoxedStrikethroughSpec isNull
     */

    /**
     * Constructs a new ProtoBoxedStrikethroughSpec.
     * @name ProtoBoxedStrikethroughSpec
     * @classdesc Represents a ProtoBoxedStrikethroughSpec.
     * @implements IProtoBoxedStrikethroughSpec
     * @constructor
     * @param {IProtoBoxedStrikethroughSpec=} [properties] Properties to set
     */
    function ProtoBoxedStrikethroughSpec(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedStrikethroughSpec value.
     * @member {IProtoStrikethroughSpec|null|undefined} value
     * @memberof ProtoBoxedStrikethroughSpec
     * @instance
     */
    ProtoBoxedStrikethroughSpec.prototype.value = null;

    /**
     * ProtoBoxedStrikethroughSpec isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedStrikethroughSpec
     * @instance
     */
    ProtoBoxedStrikethroughSpec.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedStrikethroughSpec instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {IProtoBoxedStrikethroughSpec=} [properties] Properties to set
     * @returns {ProtoBoxedStrikethroughSpec} ProtoBoxedStrikethroughSpec instance
     */
    ProtoBoxedStrikethroughSpec.create = function create(properties) {
        return new ProtoBoxedStrikethroughSpec(properties);
    };

    /**
     * Encodes the specified ProtoBoxedStrikethroughSpec message. Does not implicitly {@link ProtoBoxedStrikethroughSpec.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {IProtoBoxedStrikethroughSpec} message ProtoBoxedStrikethroughSpec message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedStrikethroughSpec.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            $root.ProtoStrikethroughSpec.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedStrikethroughSpec message, length delimited. Does not implicitly {@link ProtoBoxedStrikethroughSpec.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {IProtoBoxedStrikethroughSpec} message ProtoBoxedStrikethroughSpec message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedStrikethroughSpec.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedStrikethroughSpec message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedStrikethroughSpec} ProtoBoxedStrikethroughSpec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedStrikethroughSpec.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedStrikethroughSpec();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = $root.ProtoStrikethroughSpec.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedStrikethroughSpec message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedStrikethroughSpec} ProtoBoxedStrikethroughSpec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedStrikethroughSpec.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedStrikethroughSpec message.
     * @function verify
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedStrikethroughSpec.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value")) {
            var error = $root.ProtoStrikethroughSpec.verify(message.value);
            if (error)
                return "value." + error;
        }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedStrikethroughSpec message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedStrikethroughSpec} ProtoBoxedStrikethroughSpec
     */
    ProtoBoxedStrikethroughSpec.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedStrikethroughSpec)
            return object;
        var message = new $root.ProtoBoxedStrikethroughSpec();
        if (object.value != null) {
            if (typeof object.value !== "object")
                throw TypeError(".ProtoBoxedStrikethroughSpec.value: object expected");
            message.value = $root.ProtoStrikethroughSpec.fromObject(object.value);
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedStrikethroughSpec message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {ProtoBoxedStrikethroughSpec} message ProtoBoxedStrikethroughSpec
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedStrikethroughSpec.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = null;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = $root.ProtoStrikethroughSpec.toObject(message.value, options);
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedStrikethroughSpec to JSON.
     * @function toJSON
     * @memberof ProtoBoxedStrikethroughSpec
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedStrikethroughSpec.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedStrikethroughSpec
     * @function getTypeUrl
     * @memberof ProtoBoxedStrikethroughSpec
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedStrikethroughSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedStrikethroughSpec";
    };

    return ProtoBoxedStrikethroughSpec;
})();

/**
 * ProtoMeasureType enum.
 * @name ProtoMeasureType
 * @enum {number}
 * @property {number} PT=0 PT value
 * @property {number} CM=1 CM value
 * @property {number} MM=2 MM value
 * @property {number} IN=3 IN value
 * @property {number} PERCENT=4 PERCENT value
 * @property {number} PX=5 PX value
 */
$root.ProtoMeasureType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "PT"] = 0;
    values[valuesById[1] = "CM"] = 1;
    values[valuesById[2] = "MM"] = 2;
    values[valuesById[3] = "IN"] = 3;
    values[valuesById[4] = "PERCENT"] = 4;
    values[valuesById[5] = "PX"] = 5;
    return values;
})();

$root.ProtoMeasure = (function() {

    /**
     * Properties of a ProtoMeasure.
     * @name IProtoMeasure
     * @interface IProtoMeasure
     * @property {number|null} [value] ProtoMeasure value
     * @property {ProtoMeasureType|null} [mtype] ProtoMeasure mtype
     */

    /**
     * Constructs a new ProtoMeasure.
     * @name ProtoMeasure
     * @classdesc Represents a ProtoMeasure.
     * @implements IProtoMeasure
     * @constructor
     * @param {IProtoMeasure=} [properties] Properties to set
     */
    function ProtoMeasure(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoMeasure value.
     * @member {number} value
     * @memberof ProtoMeasure
     * @instance
     */
    ProtoMeasure.prototype.value = 0;

    /**
     * ProtoMeasure mtype.
     * @member {ProtoMeasureType} mtype
     * @memberof ProtoMeasure
     * @instance
     */
    ProtoMeasure.prototype.mtype = 0;

    /**
     * Creates a new ProtoMeasure instance using the specified properties.
     * @function create
     * @memberof ProtoMeasure
     * @static
     * @param {IProtoMeasure=} [properties] Properties to set
     * @returns {ProtoMeasure} ProtoMeasure instance
     */
    ProtoMeasure.create = function create(properties) {
        return new ProtoMeasure(properties);
    };

    /**
     * Encodes the specified ProtoMeasure message. Does not implicitly {@link ProtoMeasure.verify|verify} messages.
     * @function encode
     * @memberof ProtoMeasure
     * @static
     * @param {IProtoMeasure} message ProtoMeasure message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoMeasure.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
        if (message.mtype != null && Object.hasOwnProperty.call(message, "mtype"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mtype);
        return writer;
    };

    /**
     * Encodes the specified ProtoMeasure message, length delimited. Does not implicitly {@link ProtoMeasure.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoMeasure
     * @static
     * @param {IProtoMeasure} message ProtoMeasure message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoMeasure.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoMeasure message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoMeasure
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoMeasure} ProtoMeasure
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoMeasure.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoMeasure();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.double();
                    break;
                }
            case 2: {
                    message.mtype = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoMeasure message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoMeasure
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoMeasure} ProtoMeasure
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoMeasure.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoMeasure message.
     * @function verify
     * @memberof ProtoMeasure
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoMeasure.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (typeof message.value !== "number")
                return "value: number expected";
        if (message.mtype != null && message.hasOwnProperty("mtype"))
            switch (message.mtype) {
            default:
                return "mtype: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        return null;
    };

    /**
     * Creates a ProtoMeasure message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoMeasure
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoMeasure} ProtoMeasure
     */
    ProtoMeasure.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoMeasure)
            return object;
        var message = new $root.ProtoMeasure();
        if (object.value != null)
            message.value = Number(object.value);
        switch (object.mtype) {
        default:
            if (typeof object.mtype === "number") {
                message.mtype = object.mtype;
                break;
            }
            break;
        case "PT":
        case 0:
            message.mtype = 0;
            break;
        case "CM":
        case 1:
            message.mtype = 1;
            break;
        case "MM":
        case 2:
            message.mtype = 2;
            break;
        case "IN":
        case 3:
            message.mtype = 3;
            break;
        case "PERCENT":
        case 4:
            message.mtype = 4;
            break;
        case "PX":
        case 5:
            message.mtype = 5;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoMeasure message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoMeasure
     * @static
     * @param {ProtoMeasure} message ProtoMeasure
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoMeasure.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = 0;
            object.mtype = options.enums === String ? "PT" : 0;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
        if (message.mtype != null && message.hasOwnProperty("mtype"))
            object.mtype = options.enums === String ? $root.ProtoMeasureType[message.mtype] === undefined ? message.mtype : $root.ProtoMeasureType[message.mtype] : message.mtype;
        return object;
    };

    /**
     * Converts this ProtoMeasure to JSON.
     * @function toJSON
     * @memberof ProtoMeasure
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoMeasure.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoMeasure
     * @function getTypeUrl
     * @memberof ProtoMeasure
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoMeasure.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoMeasure";
    };

    return ProtoMeasure;
})();

$root.ProtoBoxedMeasure = (function() {

    /**
     * Properties of a ProtoBoxedMeasure.
     * @name IProtoBoxedMeasure
     * @interface IProtoBoxedMeasure
     * @property {IProtoMeasure|null} [value] ProtoBoxedMeasure value
     * @property {boolean|null} [isNull] ProtoBoxedMeasure isNull
     */

    /**
     * Constructs a new ProtoBoxedMeasure.
     * @name ProtoBoxedMeasure
     * @classdesc Represents a ProtoBoxedMeasure.
     * @implements IProtoBoxedMeasure
     * @constructor
     * @param {IProtoBoxedMeasure=} [properties] Properties to set
     */
    function ProtoBoxedMeasure(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedMeasure value.
     * @member {IProtoMeasure|null|undefined} value
     * @memberof ProtoBoxedMeasure
     * @instance
     */
    ProtoBoxedMeasure.prototype.value = null;

    /**
     * ProtoBoxedMeasure isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedMeasure
     * @instance
     */
    ProtoBoxedMeasure.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedMeasure instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {IProtoBoxedMeasure=} [properties] Properties to set
     * @returns {ProtoBoxedMeasure} ProtoBoxedMeasure instance
     */
    ProtoBoxedMeasure.create = function create(properties) {
        return new ProtoBoxedMeasure(properties);
    };

    /**
     * Encodes the specified ProtoBoxedMeasure message. Does not implicitly {@link ProtoBoxedMeasure.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {IProtoBoxedMeasure} message ProtoBoxedMeasure message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedMeasure.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            $root.ProtoMeasure.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedMeasure message, length delimited. Does not implicitly {@link ProtoBoxedMeasure.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {IProtoBoxedMeasure} message ProtoBoxedMeasure message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedMeasure.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedMeasure message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedMeasure} ProtoBoxedMeasure
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedMeasure.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedMeasure();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedMeasure message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedMeasure} ProtoBoxedMeasure
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedMeasure.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedMeasure message.
     * @function verify
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedMeasure.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value")) {
            var error = $root.ProtoMeasure.verify(message.value);
            if (error)
                return "value." + error;
        }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedMeasure message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedMeasure} ProtoBoxedMeasure
     */
    ProtoBoxedMeasure.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedMeasure)
            return object;
        var message = new $root.ProtoBoxedMeasure();
        if (object.value != null) {
            if (typeof object.value !== "object")
                throw TypeError(".ProtoBoxedMeasure.value: object expected");
            message.value = $root.ProtoMeasure.fromObject(object.value);
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedMeasure message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {ProtoBoxedMeasure} message ProtoBoxedMeasure
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedMeasure.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = null;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = $root.ProtoMeasure.toObject(message.value, options);
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedMeasure to JSON.
     * @function toJSON
     * @memberof ProtoBoxedMeasure
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedMeasure.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedMeasure
     * @function getTypeUrl
     * @memberof ProtoBoxedMeasure
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedMeasure.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedMeasure";
    };

    return ProtoBoxedMeasure;
})();

$root.ProtoSideMeasures = (function() {

    /**
     * Properties of a ProtoSideMeasures.
     * @name IProtoSideMeasures
     * @interface IProtoSideMeasures
     * @property {IProtoMeasure|null} [top] ProtoSideMeasures top
     * @property {IProtoMeasure|null} [right] ProtoSideMeasures right
     * @property {IProtoMeasure|null} [bottom] ProtoSideMeasures bottom
     * @property {IProtoMeasure|null} [left] ProtoSideMeasures left
     */

    /**
     * Constructs a new ProtoSideMeasures.
     * @name ProtoSideMeasures
     * @classdesc Represents a ProtoSideMeasures.
     * @implements IProtoSideMeasures
     * @constructor
     * @param {IProtoSideMeasures=} [properties] Properties to set
     */
    function ProtoSideMeasures(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSideMeasures top.
     * @member {IProtoMeasure|null|undefined} top
     * @memberof ProtoSideMeasures
     * @instance
     */
    ProtoSideMeasures.prototype.top = null;

    /**
     * ProtoSideMeasures right.
     * @member {IProtoMeasure|null|undefined} right
     * @memberof ProtoSideMeasures
     * @instance
     */
    ProtoSideMeasures.prototype.right = null;

    /**
     * ProtoSideMeasures bottom.
     * @member {IProtoMeasure|null|undefined} bottom
     * @memberof ProtoSideMeasures
     * @instance
     */
    ProtoSideMeasures.prototype.bottom = null;

    /**
     * ProtoSideMeasures left.
     * @member {IProtoMeasure|null|undefined} left
     * @memberof ProtoSideMeasures
     * @instance
     */
    ProtoSideMeasures.prototype.left = null;

    /**
     * Creates a new ProtoSideMeasures instance using the specified properties.
     * @function create
     * @memberof ProtoSideMeasures
     * @static
     * @param {IProtoSideMeasures=} [properties] Properties to set
     * @returns {ProtoSideMeasures} ProtoSideMeasures instance
     */
    ProtoSideMeasures.create = function create(properties) {
        return new ProtoSideMeasures(properties);
    };

    /**
     * Encodes the specified ProtoSideMeasures message. Does not implicitly {@link ProtoSideMeasures.verify|verify} messages.
     * @function encode
     * @memberof ProtoSideMeasures
     * @static
     * @param {IProtoSideMeasures} message ProtoSideMeasures message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSideMeasures.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.top != null && Object.hasOwnProperty.call(message, "top"))
            $root.ProtoMeasure.encode(message.top, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.right != null && Object.hasOwnProperty.call(message, "right"))
            $root.ProtoMeasure.encode(message.right, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.bottom != null && Object.hasOwnProperty.call(message, "bottom"))
            $root.ProtoMeasure.encode(message.bottom, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.left != null && Object.hasOwnProperty.call(message, "left"))
            $root.ProtoMeasure.encode(message.left, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoSideMeasures message, length delimited. Does not implicitly {@link ProtoSideMeasures.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSideMeasures
     * @static
     * @param {IProtoSideMeasures} message ProtoSideMeasures message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSideMeasures.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSideMeasures message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSideMeasures
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSideMeasures} ProtoSideMeasures
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSideMeasures.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSideMeasures();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.top = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.right = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.bottom = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.left = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSideMeasures message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSideMeasures
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSideMeasures} ProtoSideMeasures
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSideMeasures.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSideMeasures message.
     * @function verify
     * @memberof ProtoSideMeasures
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSideMeasures.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.top != null && message.hasOwnProperty("top")) {
            var error = $root.ProtoMeasure.verify(message.top);
            if (error)
                return "top." + error;
        }
        if (message.right != null && message.hasOwnProperty("right")) {
            var error = $root.ProtoMeasure.verify(message.right);
            if (error)
                return "right." + error;
        }
        if (message.bottom != null && message.hasOwnProperty("bottom")) {
            var error = $root.ProtoMeasure.verify(message.bottom);
            if (error)
                return "bottom." + error;
        }
        if (message.left != null && message.hasOwnProperty("left")) {
            var error = $root.ProtoMeasure.verify(message.left);
            if (error)
                return "left." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoSideMeasures message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSideMeasures
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSideMeasures} ProtoSideMeasures
     */
    ProtoSideMeasures.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSideMeasures)
            return object;
        var message = new $root.ProtoSideMeasures();
        if (object.top != null) {
            if (typeof object.top !== "object")
                throw TypeError(".ProtoSideMeasures.top: object expected");
            message.top = $root.ProtoMeasure.fromObject(object.top);
        }
        if (object.right != null) {
            if (typeof object.right !== "object")
                throw TypeError(".ProtoSideMeasures.right: object expected");
            message.right = $root.ProtoMeasure.fromObject(object.right);
        }
        if (object.bottom != null) {
            if (typeof object.bottom !== "object")
                throw TypeError(".ProtoSideMeasures.bottom: object expected");
            message.bottom = $root.ProtoMeasure.fromObject(object.bottom);
        }
        if (object.left != null) {
            if (typeof object.left !== "object")
                throw TypeError(".ProtoSideMeasures.left: object expected");
            message.left = $root.ProtoMeasure.fromObject(object.left);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoSideMeasures message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSideMeasures
     * @static
     * @param {ProtoSideMeasures} message ProtoSideMeasures
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSideMeasures.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.top = null;
            object.right = null;
            object.bottom = null;
            object.left = null;
        }
        if (message.top != null && message.hasOwnProperty("top"))
            object.top = $root.ProtoMeasure.toObject(message.top, options);
        if (message.right != null && message.hasOwnProperty("right"))
            object.right = $root.ProtoMeasure.toObject(message.right, options);
        if (message.bottom != null && message.hasOwnProperty("bottom"))
            object.bottom = $root.ProtoMeasure.toObject(message.bottom, options);
        if (message.left != null && message.hasOwnProperty("left"))
            object.left = $root.ProtoMeasure.toObject(message.left, options);
        return object;
    };

    /**
     * Converts this ProtoSideMeasures to JSON.
     * @function toJSON
     * @memberof ProtoSideMeasures
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSideMeasures.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSideMeasures
     * @function getTypeUrl
     * @memberof ProtoSideMeasures
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSideMeasures.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSideMeasures";
    };

    return ProtoSideMeasures;
})();

/**
 * ProtoAdvancedIllustrationAreaTextFlowType enum.
 * @name ProtoAdvancedIllustrationAreaTextFlowType
 * @enum {number}
 * @property {number} DO_NOT_USE_AT_ALL=0 DO_NOT_USE_AT_ALL value
 * @property {number} AROUND=1 AROUND value
 * @property {number} NO_FLOW=2 NO_FLOW value
 * @property {number} FOREGROUND=3 FOREGROUND value
 * @property {number} BACKGROUND=4 BACKGROUND value
 */
$root.ProtoAdvancedIllustrationAreaTextFlowType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "DO_NOT_USE_AT_ALL"] = 0;
    values[valuesById[1] = "AROUND"] = 1;
    values[valuesById[2] = "NO_FLOW"] = 2;
    values[valuesById[3] = "FOREGROUND"] = 3;
    values[valuesById[4] = "BACKGROUND"] = 4;
    return values;
})();

$root.ProtoBoxedAdvancedIllustrationAreaTextFlowType = (function() {

    /**
     * Properties of a ProtoBoxedAdvancedIllustrationAreaTextFlowType.
     * @name IProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @interface IProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @property {ProtoAdvancedIllustrationAreaTextFlowType|null} [value] ProtoBoxedAdvancedIllustrationAreaTextFlowType value
     * @property {boolean|null} [isNull] ProtoBoxedAdvancedIllustrationAreaTextFlowType isNull
     */

    /**
     * Constructs a new ProtoBoxedAdvancedIllustrationAreaTextFlowType.
     * @name ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @classdesc Represents a ProtoBoxedAdvancedIllustrationAreaTextFlowType.
     * @implements IProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @constructor
     * @param {IProtoBoxedAdvancedIllustrationAreaTextFlowType=} [properties] Properties to set
     */
    function ProtoBoxedAdvancedIllustrationAreaTextFlowType(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedAdvancedIllustrationAreaTextFlowType value.
     * @member {ProtoAdvancedIllustrationAreaTextFlowType} value
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @instance
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.prototype.value = 0;

    /**
     * ProtoBoxedAdvancedIllustrationAreaTextFlowType isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @instance
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedAdvancedIllustrationAreaTextFlowType instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {IProtoBoxedAdvancedIllustrationAreaTextFlowType=} [properties] Properties to set
     * @returns {ProtoBoxedAdvancedIllustrationAreaTextFlowType} ProtoBoxedAdvancedIllustrationAreaTextFlowType instance
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.create = function create(properties) {
        return new ProtoBoxedAdvancedIllustrationAreaTextFlowType(properties);
    };

    /**
     * Encodes the specified ProtoBoxedAdvancedIllustrationAreaTextFlowType message. Does not implicitly {@link ProtoBoxedAdvancedIllustrationAreaTextFlowType.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {IProtoBoxedAdvancedIllustrationAreaTextFlowType} message ProtoBoxedAdvancedIllustrationAreaTextFlowType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedAdvancedIllustrationAreaTextFlowType message, length delimited. Does not implicitly {@link ProtoBoxedAdvancedIllustrationAreaTextFlowType.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {IProtoBoxedAdvancedIllustrationAreaTextFlowType} message ProtoBoxedAdvancedIllustrationAreaTextFlowType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedAdvancedIllustrationAreaTextFlowType message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedAdvancedIllustrationAreaTextFlowType} ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedAdvancedIllustrationAreaTextFlowType();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.int32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedAdvancedIllustrationAreaTextFlowType message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedAdvancedIllustrationAreaTextFlowType} ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedAdvancedIllustrationAreaTextFlowType message.
     * @function verify
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            switch (message.value) {
            default:
                return "value: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedAdvancedIllustrationAreaTextFlowType message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedAdvancedIllustrationAreaTextFlowType} ProtoBoxedAdvancedIllustrationAreaTextFlowType
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedAdvancedIllustrationAreaTextFlowType)
            return object;
        var message = new $root.ProtoBoxedAdvancedIllustrationAreaTextFlowType();
        switch (object.value) {
        default:
            if (typeof object.value === "number") {
                message.value = object.value;
                break;
            }
            break;
        case "DO_NOT_USE_AT_ALL":
        case 0:
            message.value = 0;
            break;
        case "AROUND":
        case 1:
            message.value = 1;
            break;
        case "NO_FLOW":
        case 2:
            message.value = 2;
            break;
        case "FOREGROUND":
        case 3:
            message.value = 3;
            break;
        case "BACKGROUND":
        case 4:
            message.value = 4;
            break;
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedAdvancedIllustrationAreaTextFlowType message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {ProtoBoxedAdvancedIllustrationAreaTextFlowType} message ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = options.enums === String ? "DO_NOT_USE_AT_ALL" : 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.enums === String ? $root.ProtoAdvancedIllustrationAreaTextFlowType[message.value] === undefined ? message.value : $root.ProtoAdvancedIllustrationAreaTextFlowType[message.value] : message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedAdvancedIllustrationAreaTextFlowType to JSON.
     * @function toJSON
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @function getTypeUrl
     * @memberof ProtoBoxedAdvancedIllustrationAreaTextFlowType
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedAdvancedIllustrationAreaTextFlowType.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedAdvancedIllustrationAreaTextFlowType";
    };

    return ProtoBoxedAdvancedIllustrationAreaTextFlowType;
})();

$root.ProtoAdvancedIllustrationAreaImageSettings = (function() {

    /**
     * Properties of a ProtoAdvancedIllustrationAreaImageSettings.
     * @name IProtoAdvancedIllustrationAreaImageSettings
     * @interface IProtoAdvancedIllustrationAreaImageSettings
     * @property {IProtoBoxedAdvancedIllustrationAreaTextFlowType|null} [textFlow] ProtoAdvancedIllustrationAreaImageSettings textFlow
     * @property {IProtoSideMeasures|null} [margin] ProtoAdvancedIllustrationAreaImageSettings margin
     */

    /**
     * Constructs a new ProtoAdvancedIllustrationAreaImageSettings.
     * @name ProtoAdvancedIllustrationAreaImageSettings
     * @classdesc Represents a ProtoAdvancedIllustrationAreaImageSettings.
     * @implements IProtoAdvancedIllustrationAreaImageSettings
     * @constructor
     * @param {IProtoAdvancedIllustrationAreaImageSettings=} [properties] Properties to set
     */
    function ProtoAdvancedIllustrationAreaImageSettings(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoAdvancedIllustrationAreaImageSettings textFlow.
     * @member {IProtoBoxedAdvancedIllustrationAreaTextFlowType|null|undefined} textFlow
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @instance
     */
    ProtoAdvancedIllustrationAreaImageSettings.prototype.textFlow = null;

    /**
     * ProtoAdvancedIllustrationAreaImageSettings margin.
     * @member {IProtoSideMeasures|null|undefined} margin
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @instance
     */
    ProtoAdvancedIllustrationAreaImageSettings.prototype.margin = null;

    /**
     * Creates a new ProtoAdvancedIllustrationAreaImageSettings instance using the specified properties.
     * @function create
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {IProtoAdvancedIllustrationAreaImageSettings=} [properties] Properties to set
     * @returns {ProtoAdvancedIllustrationAreaImageSettings} ProtoAdvancedIllustrationAreaImageSettings instance
     */
    ProtoAdvancedIllustrationAreaImageSettings.create = function create(properties) {
        return new ProtoAdvancedIllustrationAreaImageSettings(properties);
    };

    /**
     * Encodes the specified ProtoAdvancedIllustrationAreaImageSettings message. Does not implicitly {@link ProtoAdvancedIllustrationAreaImageSettings.verify|verify} messages.
     * @function encode
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {IProtoAdvancedIllustrationAreaImageSettings} message ProtoAdvancedIllustrationAreaImageSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoAdvancedIllustrationAreaImageSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.textFlow != null && Object.hasOwnProperty.call(message, "textFlow"))
            $root.ProtoBoxedAdvancedIllustrationAreaTextFlowType.encode(message.textFlow, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.margin != null && Object.hasOwnProperty.call(message, "margin"))
            $root.ProtoSideMeasures.encode(message.margin, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoAdvancedIllustrationAreaImageSettings message, length delimited. Does not implicitly {@link ProtoAdvancedIllustrationAreaImageSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {IProtoAdvancedIllustrationAreaImageSettings} message ProtoAdvancedIllustrationAreaImageSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoAdvancedIllustrationAreaImageSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoAdvancedIllustrationAreaImageSettings message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoAdvancedIllustrationAreaImageSettings} ProtoAdvancedIllustrationAreaImageSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoAdvancedIllustrationAreaImageSettings.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoAdvancedIllustrationAreaImageSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.textFlow = $root.ProtoBoxedAdvancedIllustrationAreaTextFlowType.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.margin = $root.ProtoSideMeasures.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoAdvancedIllustrationAreaImageSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoAdvancedIllustrationAreaImageSettings} ProtoAdvancedIllustrationAreaImageSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoAdvancedIllustrationAreaImageSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoAdvancedIllustrationAreaImageSettings message.
     * @function verify
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoAdvancedIllustrationAreaImageSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.textFlow != null && message.hasOwnProperty("textFlow")) {
            var error = $root.ProtoBoxedAdvancedIllustrationAreaTextFlowType.verify(message.textFlow);
            if (error)
                return "textFlow." + error;
        }
        if (message.margin != null && message.hasOwnProperty("margin")) {
            var error = $root.ProtoSideMeasures.verify(message.margin);
            if (error)
                return "margin." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoAdvancedIllustrationAreaImageSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoAdvancedIllustrationAreaImageSettings} ProtoAdvancedIllustrationAreaImageSettings
     */
    ProtoAdvancedIllustrationAreaImageSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoAdvancedIllustrationAreaImageSettings)
            return object;
        var message = new $root.ProtoAdvancedIllustrationAreaImageSettings();
        if (object.textFlow != null) {
            if (typeof object.textFlow !== "object")
                throw TypeError(".ProtoAdvancedIllustrationAreaImageSettings.textFlow: object expected");
            message.textFlow = $root.ProtoBoxedAdvancedIllustrationAreaTextFlowType.fromObject(object.textFlow);
        }
        if (object.margin != null) {
            if (typeof object.margin !== "object")
                throw TypeError(".ProtoAdvancedIllustrationAreaImageSettings.margin: object expected");
            message.margin = $root.ProtoSideMeasures.fromObject(object.margin);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoAdvancedIllustrationAreaImageSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {ProtoAdvancedIllustrationAreaImageSettings} message ProtoAdvancedIllustrationAreaImageSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoAdvancedIllustrationAreaImageSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.textFlow = null;
            object.margin = null;
        }
        if (message.textFlow != null && message.hasOwnProperty("textFlow"))
            object.textFlow = $root.ProtoBoxedAdvancedIllustrationAreaTextFlowType.toObject(message.textFlow, options);
        if (message.margin != null && message.hasOwnProperty("margin"))
            object.margin = $root.ProtoSideMeasures.toObject(message.margin, options);
        return object;
    };

    /**
     * Converts this ProtoAdvancedIllustrationAreaImageSettings to JSON.
     * @function toJSON
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoAdvancedIllustrationAreaImageSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoAdvancedIllustrationAreaImageSettings
     * @function getTypeUrl
     * @memberof ProtoAdvancedIllustrationAreaImageSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoAdvancedIllustrationAreaImageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoAdvancedIllustrationAreaImageSettings";
    };

    return ProtoAdvancedIllustrationAreaImageSettings;
})();

$root.ProtoFont = (function() {

    /**
     * Properties of a ProtoFont.
     * @name IProtoFont
     * @interface IProtoFont
     * @property {number|null} [id] ProtoFont id
     * @property {string|null} [name] ProtoFont name
     */

    /**
     * Constructs a new ProtoFont.
     * @name ProtoFont
     * @classdesc Represents a ProtoFont.
     * @implements IProtoFont
     * @constructor
     * @param {IProtoFont=} [properties] Properties to set
     */
    function ProtoFont(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoFont id.
     * @member {number} id
     * @memberof ProtoFont
     * @instance
     */
    ProtoFont.prototype.id = 0;

    /**
     * ProtoFont name.
     * @member {string} name
     * @memberof ProtoFont
     * @instance
     */
    ProtoFont.prototype.name = "";

    /**
     * Creates a new ProtoFont instance using the specified properties.
     * @function create
     * @memberof ProtoFont
     * @static
     * @param {IProtoFont=} [properties] Properties to set
     * @returns {ProtoFont} ProtoFont instance
     */
    ProtoFont.create = function create(properties) {
        return new ProtoFont(properties);
    };

    /**
     * Encodes the specified ProtoFont message. Does not implicitly {@link ProtoFont.verify|verify} messages.
     * @function encode
     * @memberof ProtoFont
     * @static
     * @param {IProtoFont} message ProtoFont message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoFont.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.id);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        return writer;
    };

    /**
     * Encodes the specified ProtoFont message, length delimited. Does not implicitly {@link ProtoFont.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoFont
     * @static
     * @param {IProtoFont} message ProtoFont message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoFont.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoFont message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoFont
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoFont} ProtoFont
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoFont.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoFont();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.id = reader.int32();
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoFont message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoFont
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoFont} ProtoFont
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoFont.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoFont message.
     * @function verify
     * @memberof ProtoFont
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoFont.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id))
                return "id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };

    /**
     * Creates a ProtoFont message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoFont
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoFont} ProtoFont
     */
    ProtoFont.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoFont)
            return object;
        var message = new $root.ProtoFont();
        if (object.id != null)
            message.id = object.id | 0;
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };

    /**
     * Creates a plain object from a ProtoFont message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoFont
     * @static
     * @param {ProtoFont} message ProtoFont
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoFont.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.id = 0;
            object.name = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };

    /**
     * Converts this ProtoFont to JSON.
     * @function toJSON
     * @memberof ProtoFont
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoFont.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoFont
     * @function getTypeUrl
     * @memberof ProtoFont
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoFont.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoFont";
    };

    return ProtoFont;
})();

$root.ProtoBoxedFont = (function() {

    /**
     * Properties of a ProtoBoxedFont.
     * @name IProtoBoxedFont
     * @interface IProtoBoxedFont
     * @property {IProtoFont|null} [value] ProtoBoxedFont value
     * @property {boolean|null} [isNull] ProtoBoxedFont isNull
     */

    /**
     * Constructs a new ProtoBoxedFont.
     * @name ProtoBoxedFont
     * @classdesc Represents a ProtoBoxedFont.
     * @implements IProtoBoxedFont
     * @constructor
     * @param {IProtoBoxedFont=} [properties] Properties to set
     */
    function ProtoBoxedFont(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedFont value.
     * @member {IProtoFont|null|undefined} value
     * @memberof ProtoBoxedFont
     * @instance
     */
    ProtoBoxedFont.prototype.value = null;

    /**
     * ProtoBoxedFont isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedFont
     * @instance
     */
    ProtoBoxedFont.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedFont instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedFont
     * @static
     * @param {IProtoBoxedFont=} [properties] Properties to set
     * @returns {ProtoBoxedFont} ProtoBoxedFont instance
     */
    ProtoBoxedFont.create = function create(properties) {
        return new ProtoBoxedFont(properties);
    };

    /**
     * Encodes the specified ProtoBoxedFont message. Does not implicitly {@link ProtoBoxedFont.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedFont
     * @static
     * @param {IProtoBoxedFont} message ProtoBoxedFont message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedFont.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            $root.ProtoFont.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedFont message, length delimited. Does not implicitly {@link ProtoBoxedFont.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedFont
     * @static
     * @param {IProtoBoxedFont} message ProtoBoxedFont message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedFont.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedFont message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedFont
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedFont} ProtoBoxedFont
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedFont.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedFont();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedFont message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedFont
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedFont} ProtoBoxedFont
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedFont.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedFont message.
     * @function verify
     * @memberof ProtoBoxedFont
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedFont.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value")) {
            var error = $root.ProtoFont.verify(message.value);
            if (error)
                return "value." + error;
        }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedFont message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedFont
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedFont} ProtoBoxedFont
     */
    ProtoBoxedFont.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedFont)
            return object;
        var message = new $root.ProtoBoxedFont();
        if (object.value != null) {
            if (typeof object.value !== "object")
                throw TypeError(".ProtoBoxedFont.value: object expected");
            message.value = $root.ProtoFont.fromObject(object.value);
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedFont message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedFont
     * @static
     * @param {ProtoBoxedFont} message ProtoBoxedFont
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedFont.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = null;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = $root.ProtoFont.toObject(message.value, options);
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedFont to JSON.
     * @function toJSON
     * @memberof ProtoBoxedFont
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedFont.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedFont
     * @function getTypeUrl
     * @memberof ProtoBoxedFont
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedFont.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedFont";
    };

    return ProtoBoxedFont;
})();

/**
 * ProtoColorType enum.
 * @name ProtoColorType
 * @enum {number}
 * @property {number} DUMMY_COLOR_TYPE=0 DUMMY_COLOR_TYPE value
 * @property {number} RGB=3 RGB value
 * @property {number} CMYK=4 CMYK value
 */
$root.ProtoColorType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "DUMMY_COLOR_TYPE"] = 0;
    values[valuesById[3] = "RGB"] = 3;
    values[valuesById[4] = "CMYK"] = 4;
    return values;
})();

$root.ProtoColor = (function() {

    /**
     * Properties of a ProtoColor.
     * @name IProtoColor
     * @interface IProtoColor
     * @property {IProtoBoxedString|null} [name] ProtoColor name
     * @property {ProtoColorType|null} [type] ProtoColor type
     * @property {number|null} [r] ProtoColor r
     * @property {number|null} [g] ProtoColor g
     * @property {number|null} [b] ProtoColor b
     * @property {number|null} [c] ProtoColor c
     * @property {number|null} [m] ProtoColor m
     * @property {number|null} [y] ProtoColor y
     * @property {number|null} [k] ProtoColor k
     */

    /**
     * Constructs a new ProtoColor.
     * @name ProtoColor
     * @classdesc Represents a ProtoColor.
     * @implements IProtoColor
     * @constructor
     * @param {IProtoColor=} [properties] Properties to set
     */
    function ProtoColor(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoColor name.
     * @member {IProtoBoxedString|null|undefined} name
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.name = null;

    /**
     * ProtoColor type.
     * @member {ProtoColorType} type
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.type = 0;

    /**
     * ProtoColor r.
     * @member {number} r
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.r = 0;

    /**
     * ProtoColor g.
     * @member {number} g
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.g = 0;

    /**
     * ProtoColor b.
     * @member {number} b
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.b = 0;

    /**
     * ProtoColor c.
     * @member {number} c
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.c = 0;

    /**
     * ProtoColor m.
     * @member {number} m
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.m = 0;

    /**
     * ProtoColor y.
     * @member {number} y
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.y = 0;

    /**
     * ProtoColor k.
     * @member {number} k
     * @memberof ProtoColor
     * @instance
     */
    ProtoColor.prototype.k = 0;

    /**
     * Creates a new ProtoColor instance using the specified properties.
     * @function create
     * @memberof ProtoColor
     * @static
     * @param {IProtoColor=} [properties] Properties to set
     * @returns {ProtoColor} ProtoColor instance
     */
    ProtoColor.create = function create(properties) {
        return new ProtoColor(properties);
    };

    /**
     * Encodes the specified ProtoColor message. Does not implicitly {@link ProtoColor.verify|verify} messages.
     * @function encode
     * @memberof ProtoColor
     * @static
     * @param {IProtoColor} message ProtoColor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoColor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            $root.ProtoBoxedString.encode(message.name, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.r != null && Object.hasOwnProperty.call(message, "r"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.r);
        if (message.g != null && Object.hasOwnProperty.call(message, "g"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.g);
        if (message.b != null && Object.hasOwnProperty.call(message, "b"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.b);
        if (message.c != null && Object.hasOwnProperty.call(message, "c"))
            writer.uint32(/* id 6, wireType 5 =*/53).float(message.c);
        if (message.m != null && Object.hasOwnProperty.call(message, "m"))
            writer.uint32(/* id 7, wireType 5 =*/61).float(message.m);
        if (message.y != null && Object.hasOwnProperty.call(message, "y"))
            writer.uint32(/* id 8, wireType 5 =*/69).float(message.y);
        if (message.k != null && Object.hasOwnProperty.call(message, "k"))
            writer.uint32(/* id 9, wireType 5 =*/77).float(message.k);
        return writer;
    };

    /**
     * Encodes the specified ProtoColor message, length delimited. Does not implicitly {@link ProtoColor.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoColor
     * @static
     * @param {IProtoColor} message ProtoColor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoColor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoColor message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoColor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoColor} ProtoColor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoColor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoColor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.name = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.type = reader.int32();
                    break;
                }
            case 3: {
                    message.r = reader.int32();
                    break;
                }
            case 4: {
                    message.g = reader.int32();
                    break;
                }
            case 5: {
                    message.b = reader.int32();
                    break;
                }
            case 6: {
                    message.c = reader.float();
                    break;
                }
            case 7: {
                    message.m = reader.float();
                    break;
                }
            case 8: {
                    message.y = reader.float();
                    break;
                }
            case 9: {
                    message.k = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoColor message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoColor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoColor} ProtoColor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoColor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoColor message.
     * @function verify
     * @memberof ProtoColor
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoColor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name")) {
            var error = $root.ProtoBoxedString.verify(message.name);
            if (error)
                return "name." + error;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 3:
            case 4:
                break;
            }
        if (message.r != null && message.hasOwnProperty("r"))
            if (!$util.isInteger(message.r))
                return "r: integer expected";
        if (message.g != null && message.hasOwnProperty("g"))
            if (!$util.isInteger(message.g))
                return "g: integer expected";
        if (message.b != null && message.hasOwnProperty("b"))
            if (!$util.isInteger(message.b))
                return "b: integer expected";
        if (message.c != null && message.hasOwnProperty("c"))
            if (typeof message.c !== "number")
                return "c: number expected";
        if (message.m != null && message.hasOwnProperty("m"))
            if (typeof message.m !== "number")
                return "m: number expected";
        if (message.y != null && message.hasOwnProperty("y"))
            if (typeof message.y !== "number")
                return "y: number expected";
        if (message.k != null && message.hasOwnProperty("k"))
            if (typeof message.k !== "number")
                return "k: number expected";
        return null;
    };

    /**
     * Creates a ProtoColor message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoColor
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoColor} ProtoColor
     */
    ProtoColor.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoColor)
            return object;
        var message = new $root.ProtoColor();
        if (object.name != null) {
            if (typeof object.name !== "object")
                throw TypeError(".ProtoColor.name: object expected");
            message.name = $root.ProtoBoxedString.fromObject(object.name);
        }
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "DUMMY_COLOR_TYPE":
        case 0:
            message.type = 0;
            break;
        case "RGB":
        case 3:
            message.type = 3;
            break;
        case "CMYK":
        case 4:
            message.type = 4;
            break;
        }
        if (object.r != null)
            message.r = object.r | 0;
        if (object.g != null)
            message.g = object.g | 0;
        if (object.b != null)
            message.b = object.b | 0;
        if (object.c != null)
            message.c = Number(object.c);
        if (object.m != null)
            message.m = Number(object.m);
        if (object.y != null)
            message.y = Number(object.y);
        if (object.k != null)
            message.k = Number(object.k);
        return message;
    };

    /**
     * Creates a plain object from a ProtoColor message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoColor
     * @static
     * @param {ProtoColor} message ProtoColor
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoColor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = null;
            object.type = options.enums === String ? "DUMMY_COLOR_TYPE" : 0;
            object.r = 0;
            object.g = 0;
            object.b = 0;
            object.c = 0;
            object.m = 0;
            object.y = 0;
            object.k = 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = $root.ProtoBoxedString.toObject(message.name, options);
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoColorType[message.type] === undefined ? message.type : $root.ProtoColorType[message.type] : message.type;
        if (message.r != null && message.hasOwnProperty("r"))
            object.r = message.r;
        if (message.g != null && message.hasOwnProperty("g"))
            object.g = message.g;
        if (message.b != null && message.hasOwnProperty("b"))
            object.b = message.b;
        if (message.c != null && message.hasOwnProperty("c"))
            object.c = options.json && !isFinite(message.c) ? String(message.c) : message.c;
        if (message.m != null && message.hasOwnProperty("m"))
            object.m = options.json && !isFinite(message.m) ? String(message.m) : message.m;
        if (message.y != null && message.hasOwnProperty("y"))
            object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
        if (message.k != null && message.hasOwnProperty("k"))
            object.k = options.json && !isFinite(message.k) ? String(message.k) : message.k;
        return object;
    };

    /**
     * Converts this ProtoColor to JSON.
     * @function toJSON
     * @memberof ProtoColor
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoColor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoColor
     * @function getTypeUrl
     * @memberof ProtoColor
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoColor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoColor";
    };

    return ProtoColor;
})();

$root.ProtoBoxedColor = (function() {

    /**
     * Properties of a ProtoBoxedColor.
     * @name IProtoBoxedColor
     * @interface IProtoBoxedColor
     * @property {IProtoColor|null} [value] ProtoBoxedColor value
     * @property {boolean|null} [isNull] ProtoBoxedColor isNull
     */

    /**
     * Constructs a new ProtoBoxedColor.
     * @name ProtoBoxedColor
     * @classdesc Represents a ProtoBoxedColor.
     * @implements IProtoBoxedColor
     * @constructor
     * @param {IProtoBoxedColor=} [properties] Properties to set
     */
    function ProtoBoxedColor(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedColor value.
     * @member {IProtoColor|null|undefined} value
     * @memberof ProtoBoxedColor
     * @instance
     */
    ProtoBoxedColor.prototype.value = null;

    /**
     * ProtoBoxedColor isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedColor
     * @instance
     */
    ProtoBoxedColor.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedColor instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedColor
     * @static
     * @param {IProtoBoxedColor=} [properties] Properties to set
     * @returns {ProtoBoxedColor} ProtoBoxedColor instance
     */
    ProtoBoxedColor.create = function create(properties) {
        return new ProtoBoxedColor(properties);
    };

    /**
     * Encodes the specified ProtoBoxedColor message. Does not implicitly {@link ProtoBoxedColor.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedColor
     * @static
     * @param {IProtoBoxedColor} message ProtoBoxedColor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedColor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            $root.ProtoColor.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedColor message, length delimited. Does not implicitly {@link ProtoBoxedColor.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedColor
     * @static
     * @param {IProtoBoxedColor} message ProtoBoxedColor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedColor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedColor message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedColor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedColor} ProtoBoxedColor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedColor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedColor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedColor message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedColor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedColor} ProtoBoxedColor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedColor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedColor message.
     * @function verify
     * @memberof ProtoBoxedColor
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedColor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value")) {
            var error = $root.ProtoColor.verify(message.value);
            if (error)
                return "value." + error;
        }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedColor message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedColor
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedColor} ProtoBoxedColor
     */
    ProtoBoxedColor.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedColor)
            return object;
        var message = new $root.ProtoBoxedColor();
        if (object.value != null) {
            if (typeof object.value !== "object")
                throw TypeError(".ProtoBoxedColor.value: object expected");
            message.value = $root.ProtoColor.fromObject(object.value);
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedColor message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedColor
     * @static
     * @param {ProtoBoxedColor} message ProtoBoxedColor
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedColor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = null;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = $root.ProtoColor.toObject(message.value, options);
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedColor to JSON.
     * @function toJSON
     * @memberof ProtoBoxedColor
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedColor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedColor
     * @function getTypeUrl
     * @memberof ProtoBoxedColor
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedColor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedColor";
    };

    return ProtoBoxedColor;
})();

$root.ProtoRGBColor = (function() {

    /**
     * Properties of a ProtoRGBColor.
     * @name IProtoRGBColor
     * @interface IProtoRGBColor
     * @property {IProtoBoxedString|null} [name] ProtoRGBColor name
     * @property {ProtoColorType|null} [type] ProtoRGBColor type
     * @property {number|null} [r] ProtoRGBColor r
     * @property {number|null} [g] ProtoRGBColor g
     * @property {number|null} [b] ProtoRGBColor b
     */

    /**
     * Constructs a new ProtoRGBColor.
     * @name ProtoRGBColor
     * @classdesc Represents a ProtoRGBColor.
     * @implements IProtoRGBColor
     * @constructor
     * @param {IProtoRGBColor=} [properties] Properties to set
     */
    function ProtoRGBColor(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoRGBColor name.
     * @member {IProtoBoxedString|null|undefined} name
     * @memberof ProtoRGBColor
     * @instance
     */
    ProtoRGBColor.prototype.name = null;

    /**
     * ProtoRGBColor type.
     * @member {ProtoColorType} type
     * @memberof ProtoRGBColor
     * @instance
     */
    ProtoRGBColor.prototype.type = 0;

    /**
     * ProtoRGBColor r.
     * @member {number} r
     * @memberof ProtoRGBColor
     * @instance
     */
    ProtoRGBColor.prototype.r = 0;

    /**
     * ProtoRGBColor g.
     * @member {number} g
     * @memberof ProtoRGBColor
     * @instance
     */
    ProtoRGBColor.prototype.g = 0;

    /**
     * ProtoRGBColor b.
     * @member {number} b
     * @memberof ProtoRGBColor
     * @instance
     */
    ProtoRGBColor.prototype.b = 0;

    /**
     * Creates a new ProtoRGBColor instance using the specified properties.
     * @function create
     * @memberof ProtoRGBColor
     * @static
     * @param {IProtoRGBColor=} [properties] Properties to set
     * @returns {ProtoRGBColor} ProtoRGBColor instance
     */
    ProtoRGBColor.create = function create(properties) {
        return new ProtoRGBColor(properties);
    };

    /**
     * Encodes the specified ProtoRGBColor message. Does not implicitly {@link ProtoRGBColor.verify|verify} messages.
     * @function encode
     * @memberof ProtoRGBColor
     * @static
     * @param {IProtoRGBColor} message ProtoRGBColor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoRGBColor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            $root.ProtoBoxedString.encode(message.name, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.r != null && Object.hasOwnProperty.call(message, "r"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.r);
        if (message.g != null && Object.hasOwnProperty.call(message, "g"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.g);
        if (message.b != null && Object.hasOwnProperty.call(message, "b"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.b);
        return writer;
    };

    /**
     * Encodes the specified ProtoRGBColor message, length delimited. Does not implicitly {@link ProtoRGBColor.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoRGBColor
     * @static
     * @param {IProtoRGBColor} message ProtoRGBColor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoRGBColor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoRGBColor message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoRGBColor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoRGBColor} ProtoRGBColor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoRGBColor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoRGBColor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.name = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.type = reader.int32();
                    break;
                }
            case 3: {
                    message.r = reader.int32();
                    break;
                }
            case 4: {
                    message.g = reader.int32();
                    break;
                }
            case 5: {
                    message.b = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoRGBColor message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoRGBColor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoRGBColor} ProtoRGBColor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoRGBColor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoRGBColor message.
     * @function verify
     * @memberof ProtoRGBColor
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoRGBColor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name")) {
            var error = $root.ProtoBoxedString.verify(message.name);
            if (error)
                return "name." + error;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 3:
            case 4:
                break;
            }
        if (message.r != null && message.hasOwnProperty("r"))
            if (!$util.isInteger(message.r))
                return "r: integer expected";
        if (message.g != null && message.hasOwnProperty("g"))
            if (!$util.isInteger(message.g))
                return "g: integer expected";
        if (message.b != null && message.hasOwnProperty("b"))
            if (!$util.isInteger(message.b))
                return "b: integer expected";
        return null;
    };

    /**
     * Creates a ProtoRGBColor message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoRGBColor
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoRGBColor} ProtoRGBColor
     */
    ProtoRGBColor.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoRGBColor)
            return object;
        var message = new $root.ProtoRGBColor();
        if (object.name != null) {
            if (typeof object.name !== "object")
                throw TypeError(".ProtoRGBColor.name: object expected");
            message.name = $root.ProtoBoxedString.fromObject(object.name);
        }
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "DUMMY_COLOR_TYPE":
        case 0:
            message.type = 0;
            break;
        case "RGB":
        case 3:
            message.type = 3;
            break;
        case "CMYK":
        case 4:
            message.type = 4;
            break;
        }
        if (object.r != null)
            message.r = object.r | 0;
        if (object.g != null)
            message.g = object.g | 0;
        if (object.b != null)
            message.b = object.b | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProtoRGBColor message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoRGBColor
     * @static
     * @param {ProtoRGBColor} message ProtoRGBColor
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoRGBColor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = null;
            object.type = options.enums === String ? "DUMMY_COLOR_TYPE" : 0;
            object.r = 0;
            object.g = 0;
            object.b = 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = $root.ProtoBoxedString.toObject(message.name, options);
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoColorType[message.type] === undefined ? message.type : $root.ProtoColorType[message.type] : message.type;
        if (message.r != null && message.hasOwnProperty("r"))
            object.r = message.r;
        if (message.g != null && message.hasOwnProperty("g"))
            object.g = message.g;
        if (message.b != null && message.hasOwnProperty("b"))
            object.b = message.b;
        return object;
    };

    /**
     * Converts this ProtoRGBColor to JSON.
     * @function toJSON
     * @memberof ProtoRGBColor
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoRGBColor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoRGBColor
     * @function getTypeUrl
     * @memberof ProtoRGBColor
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoRGBColor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoRGBColor";
    };

    return ProtoRGBColor;
})();

$root.ProtoCMYKColor = (function() {

    /**
     * Properties of a ProtoCMYKColor.
     * @name IProtoCMYKColor
     * @interface IProtoCMYKColor
     * @property {IProtoBoxedString|null} [name] ProtoCMYKColor name
     * @property {ProtoColorType|null} [type] ProtoCMYKColor type
     * @property {number|null} [c] ProtoCMYKColor c
     * @property {number|null} [m] ProtoCMYKColor m
     * @property {number|null} [y] ProtoCMYKColor y
     * @property {number|null} [k] ProtoCMYKColor k
     */

    /**
     * Constructs a new ProtoCMYKColor.
     * @name ProtoCMYKColor
     * @classdesc Represents a ProtoCMYKColor.
     * @implements IProtoCMYKColor
     * @constructor
     * @param {IProtoCMYKColor=} [properties] Properties to set
     */
    function ProtoCMYKColor(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoCMYKColor name.
     * @member {IProtoBoxedString|null|undefined} name
     * @memberof ProtoCMYKColor
     * @instance
     */
    ProtoCMYKColor.prototype.name = null;

    /**
     * ProtoCMYKColor type.
     * @member {ProtoColorType} type
     * @memberof ProtoCMYKColor
     * @instance
     */
    ProtoCMYKColor.prototype.type = 0;

    /**
     * ProtoCMYKColor c.
     * @member {number} c
     * @memberof ProtoCMYKColor
     * @instance
     */
    ProtoCMYKColor.prototype.c = 0;

    /**
     * ProtoCMYKColor m.
     * @member {number} m
     * @memberof ProtoCMYKColor
     * @instance
     */
    ProtoCMYKColor.prototype.m = 0;

    /**
     * ProtoCMYKColor y.
     * @member {number} y
     * @memberof ProtoCMYKColor
     * @instance
     */
    ProtoCMYKColor.prototype.y = 0;

    /**
     * ProtoCMYKColor k.
     * @member {number} k
     * @memberof ProtoCMYKColor
     * @instance
     */
    ProtoCMYKColor.prototype.k = 0;

    /**
     * Creates a new ProtoCMYKColor instance using the specified properties.
     * @function create
     * @memberof ProtoCMYKColor
     * @static
     * @param {IProtoCMYKColor=} [properties] Properties to set
     * @returns {ProtoCMYKColor} ProtoCMYKColor instance
     */
    ProtoCMYKColor.create = function create(properties) {
        return new ProtoCMYKColor(properties);
    };

    /**
     * Encodes the specified ProtoCMYKColor message. Does not implicitly {@link ProtoCMYKColor.verify|verify} messages.
     * @function encode
     * @memberof ProtoCMYKColor
     * @static
     * @param {IProtoCMYKColor} message ProtoCMYKColor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCMYKColor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            $root.ProtoBoxedString.encode(message.name, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        if (message.c != null && Object.hasOwnProperty.call(message, "c"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.c);
        if (message.m != null && Object.hasOwnProperty.call(message, "m"))
            writer.uint32(/* id 4, wireType 5 =*/37).float(message.m);
        if (message.y != null && Object.hasOwnProperty.call(message, "y"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.y);
        if (message.k != null && Object.hasOwnProperty.call(message, "k"))
            writer.uint32(/* id 6, wireType 5 =*/53).float(message.k);
        return writer;
    };

    /**
     * Encodes the specified ProtoCMYKColor message, length delimited. Does not implicitly {@link ProtoCMYKColor.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoCMYKColor
     * @static
     * @param {IProtoCMYKColor} message ProtoCMYKColor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCMYKColor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoCMYKColor message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoCMYKColor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoCMYKColor} ProtoCMYKColor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCMYKColor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoCMYKColor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.name = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.type = reader.int32();
                    break;
                }
            case 3: {
                    message.c = reader.float();
                    break;
                }
            case 4: {
                    message.m = reader.float();
                    break;
                }
            case 5: {
                    message.y = reader.float();
                    break;
                }
            case 6: {
                    message.k = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoCMYKColor message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoCMYKColor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoCMYKColor} ProtoCMYKColor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCMYKColor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoCMYKColor message.
     * @function verify
     * @memberof ProtoCMYKColor
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoCMYKColor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name")) {
            var error = $root.ProtoBoxedString.verify(message.name);
            if (error)
                return "name." + error;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 3:
            case 4:
                break;
            }
        if (message.c != null && message.hasOwnProperty("c"))
            if (typeof message.c !== "number")
                return "c: number expected";
        if (message.m != null && message.hasOwnProperty("m"))
            if (typeof message.m !== "number")
                return "m: number expected";
        if (message.y != null && message.hasOwnProperty("y"))
            if (typeof message.y !== "number")
                return "y: number expected";
        if (message.k != null && message.hasOwnProperty("k"))
            if (typeof message.k !== "number")
                return "k: number expected";
        return null;
    };

    /**
     * Creates a ProtoCMYKColor message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoCMYKColor
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoCMYKColor} ProtoCMYKColor
     */
    ProtoCMYKColor.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoCMYKColor)
            return object;
        var message = new $root.ProtoCMYKColor();
        if (object.name != null) {
            if (typeof object.name !== "object")
                throw TypeError(".ProtoCMYKColor.name: object expected");
            message.name = $root.ProtoBoxedString.fromObject(object.name);
        }
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "DUMMY_COLOR_TYPE":
        case 0:
            message.type = 0;
            break;
        case "RGB":
        case 3:
            message.type = 3;
            break;
        case "CMYK":
        case 4:
            message.type = 4;
            break;
        }
        if (object.c != null)
            message.c = Number(object.c);
        if (object.m != null)
            message.m = Number(object.m);
        if (object.y != null)
            message.y = Number(object.y);
        if (object.k != null)
            message.k = Number(object.k);
        return message;
    };

    /**
     * Creates a plain object from a ProtoCMYKColor message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoCMYKColor
     * @static
     * @param {ProtoCMYKColor} message ProtoCMYKColor
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoCMYKColor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = null;
            object.type = options.enums === String ? "DUMMY_COLOR_TYPE" : 0;
            object.c = 0;
            object.m = 0;
            object.y = 0;
            object.k = 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = $root.ProtoBoxedString.toObject(message.name, options);
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoColorType[message.type] === undefined ? message.type : $root.ProtoColorType[message.type] : message.type;
        if (message.c != null && message.hasOwnProperty("c"))
            object.c = options.json && !isFinite(message.c) ? String(message.c) : message.c;
        if (message.m != null && message.hasOwnProperty("m"))
            object.m = options.json && !isFinite(message.m) ? String(message.m) : message.m;
        if (message.y != null && message.hasOwnProperty("y"))
            object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
        if (message.k != null && message.hasOwnProperty("k"))
            object.k = options.json && !isFinite(message.k) ? String(message.k) : message.k;
        return object;
    };

    /**
     * Converts this ProtoCMYKColor to JSON.
     * @function toJSON
     * @memberof ProtoCMYKColor
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoCMYKColor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoCMYKColor
     * @function getTypeUrl
     * @memberof ProtoCMYKColor
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoCMYKColor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoCMYKColor";
    };

    return ProtoCMYKColor;
})();

/**
 * ProtoHorizontalAlignment enum.
 * @name ProtoHorizontalAlignment
 * @enum {number}
 * @property {number} ALIGN_LEFT=0 ALIGN_LEFT value
 * @property {number} ALIGN_CENTER=1 ALIGN_CENTER value
 * @property {number} ALIGN_RIGHT=2 ALIGN_RIGHT value
 * @property {number} ALIGN_JUSTIFY=3 ALIGN_JUSTIFY value
 * @property {number} ALIGN_FULL_JUSTIFY=4 ALIGN_FULL_JUSTIFY value
 * @property {number} ALIGN_CENTER_ON_PAGE=5 ALIGN_CENTER_ON_PAGE value
 */
$root.ProtoHorizontalAlignment = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ALIGN_LEFT"] = 0;
    values[valuesById[1] = "ALIGN_CENTER"] = 1;
    values[valuesById[2] = "ALIGN_RIGHT"] = 2;
    values[valuesById[3] = "ALIGN_JUSTIFY"] = 3;
    values[valuesById[4] = "ALIGN_FULL_JUSTIFY"] = 4;
    values[valuesById[5] = "ALIGN_CENTER_ON_PAGE"] = 5;
    return values;
})();

/**
 * ProtoVerticalAlignment enum.
 * @name ProtoVerticalAlignment
 * @enum {number}
 * @property {number} TOP=0 TOP value
 * @property {number} MIDDLE=1 MIDDLE value
 * @property {number} BOTTOM=2 BOTTOM value
 */
$root.ProtoVerticalAlignment = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "TOP"] = 0;
    values[valuesById[1] = "MIDDLE"] = 1;
    values[valuesById[2] = "BOTTOM"] = 2;
    return values;
})();

$root.ProtoBoxedHorizontalAlignment = (function() {

    /**
     * Properties of a ProtoBoxedHorizontalAlignment.
     * @name IProtoBoxedHorizontalAlignment
     * @interface IProtoBoxedHorizontalAlignment
     * @property {ProtoHorizontalAlignment|null} [value] ProtoBoxedHorizontalAlignment value
     * @property {boolean|null} [isNull] ProtoBoxedHorizontalAlignment isNull
     */

    /**
     * Constructs a new ProtoBoxedHorizontalAlignment.
     * @name ProtoBoxedHorizontalAlignment
     * @classdesc Represents a ProtoBoxedHorizontalAlignment.
     * @implements IProtoBoxedHorizontalAlignment
     * @constructor
     * @param {IProtoBoxedHorizontalAlignment=} [properties] Properties to set
     */
    function ProtoBoxedHorizontalAlignment(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedHorizontalAlignment value.
     * @member {ProtoHorizontalAlignment} value
     * @memberof ProtoBoxedHorizontalAlignment
     * @instance
     */
    ProtoBoxedHorizontalAlignment.prototype.value = 0;

    /**
     * ProtoBoxedHorizontalAlignment isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedHorizontalAlignment
     * @instance
     */
    ProtoBoxedHorizontalAlignment.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedHorizontalAlignment instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {IProtoBoxedHorizontalAlignment=} [properties] Properties to set
     * @returns {ProtoBoxedHorizontalAlignment} ProtoBoxedHorizontalAlignment instance
     */
    ProtoBoxedHorizontalAlignment.create = function create(properties) {
        return new ProtoBoxedHorizontalAlignment(properties);
    };

    /**
     * Encodes the specified ProtoBoxedHorizontalAlignment message. Does not implicitly {@link ProtoBoxedHorizontalAlignment.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {IProtoBoxedHorizontalAlignment} message ProtoBoxedHorizontalAlignment message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedHorizontalAlignment.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedHorizontalAlignment message, length delimited. Does not implicitly {@link ProtoBoxedHorizontalAlignment.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {IProtoBoxedHorizontalAlignment} message ProtoBoxedHorizontalAlignment message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedHorizontalAlignment.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedHorizontalAlignment message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedHorizontalAlignment} ProtoBoxedHorizontalAlignment
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedHorizontalAlignment.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedHorizontalAlignment();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.int32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedHorizontalAlignment message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedHorizontalAlignment} ProtoBoxedHorizontalAlignment
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedHorizontalAlignment.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedHorizontalAlignment message.
     * @function verify
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedHorizontalAlignment.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            switch (message.value) {
            default:
                return "value: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedHorizontalAlignment message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedHorizontalAlignment} ProtoBoxedHorizontalAlignment
     */
    ProtoBoxedHorizontalAlignment.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedHorizontalAlignment)
            return object;
        var message = new $root.ProtoBoxedHorizontalAlignment();
        switch (object.value) {
        default:
            if (typeof object.value === "number") {
                message.value = object.value;
                break;
            }
            break;
        case "ALIGN_LEFT":
        case 0:
            message.value = 0;
            break;
        case "ALIGN_CENTER":
        case 1:
            message.value = 1;
            break;
        case "ALIGN_RIGHT":
        case 2:
            message.value = 2;
            break;
        case "ALIGN_JUSTIFY":
        case 3:
            message.value = 3;
            break;
        case "ALIGN_FULL_JUSTIFY":
        case 4:
            message.value = 4;
            break;
        case "ALIGN_CENTER_ON_PAGE":
        case 5:
            message.value = 5;
            break;
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedHorizontalAlignment message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {ProtoBoxedHorizontalAlignment} message ProtoBoxedHorizontalAlignment
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedHorizontalAlignment.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = options.enums === String ? "ALIGN_LEFT" : 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.enums === String ? $root.ProtoHorizontalAlignment[message.value] === undefined ? message.value : $root.ProtoHorizontalAlignment[message.value] : message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedHorizontalAlignment to JSON.
     * @function toJSON
     * @memberof ProtoBoxedHorizontalAlignment
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedHorizontalAlignment.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedHorizontalAlignment
     * @function getTypeUrl
     * @memberof ProtoBoxedHorizontalAlignment
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedHorizontalAlignment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedHorizontalAlignment";
    };

    return ProtoBoxedHorizontalAlignment;
})();

$root.ProtoBoxedVerticalAlignment = (function() {

    /**
     * Properties of a ProtoBoxedVerticalAlignment.
     * @name IProtoBoxedVerticalAlignment
     * @interface IProtoBoxedVerticalAlignment
     * @property {ProtoVerticalAlignment|null} [value] ProtoBoxedVerticalAlignment value
     * @property {boolean|null} [isNull] ProtoBoxedVerticalAlignment isNull
     */

    /**
     * Constructs a new ProtoBoxedVerticalAlignment.
     * @name ProtoBoxedVerticalAlignment
     * @classdesc Represents a ProtoBoxedVerticalAlignment.
     * @implements IProtoBoxedVerticalAlignment
     * @constructor
     * @param {IProtoBoxedVerticalAlignment=} [properties] Properties to set
     */
    function ProtoBoxedVerticalAlignment(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedVerticalAlignment value.
     * @member {ProtoVerticalAlignment} value
     * @memberof ProtoBoxedVerticalAlignment
     * @instance
     */
    ProtoBoxedVerticalAlignment.prototype.value = 0;

    /**
     * ProtoBoxedVerticalAlignment isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedVerticalAlignment
     * @instance
     */
    ProtoBoxedVerticalAlignment.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedVerticalAlignment instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {IProtoBoxedVerticalAlignment=} [properties] Properties to set
     * @returns {ProtoBoxedVerticalAlignment} ProtoBoxedVerticalAlignment instance
     */
    ProtoBoxedVerticalAlignment.create = function create(properties) {
        return new ProtoBoxedVerticalAlignment(properties);
    };

    /**
     * Encodes the specified ProtoBoxedVerticalAlignment message. Does not implicitly {@link ProtoBoxedVerticalAlignment.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {IProtoBoxedVerticalAlignment} message ProtoBoxedVerticalAlignment message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedVerticalAlignment.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedVerticalAlignment message, length delimited. Does not implicitly {@link ProtoBoxedVerticalAlignment.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {IProtoBoxedVerticalAlignment} message ProtoBoxedVerticalAlignment message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedVerticalAlignment.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedVerticalAlignment message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedVerticalAlignment} ProtoBoxedVerticalAlignment
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedVerticalAlignment.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedVerticalAlignment();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.int32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedVerticalAlignment message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedVerticalAlignment} ProtoBoxedVerticalAlignment
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedVerticalAlignment.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedVerticalAlignment message.
     * @function verify
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedVerticalAlignment.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            switch (message.value) {
            default:
                return "value: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedVerticalAlignment message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedVerticalAlignment} ProtoBoxedVerticalAlignment
     */
    ProtoBoxedVerticalAlignment.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedVerticalAlignment)
            return object;
        var message = new $root.ProtoBoxedVerticalAlignment();
        switch (object.value) {
        default:
            if (typeof object.value === "number") {
                message.value = object.value;
                break;
            }
            break;
        case "TOP":
        case 0:
            message.value = 0;
            break;
        case "MIDDLE":
        case 1:
            message.value = 1;
            break;
        case "BOTTOM":
        case 2:
            message.value = 2;
            break;
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedVerticalAlignment message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {ProtoBoxedVerticalAlignment} message ProtoBoxedVerticalAlignment
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedVerticalAlignment.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = options.enums === String ? "TOP" : 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.enums === String ? $root.ProtoVerticalAlignment[message.value] === undefined ? message.value : $root.ProtoVerticalAlignment[message.value] : message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedVerticalAlignment to JSON.
     * @function toJSON
     * @memberof ProtoBoxedVerticalAlignment
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedVerticalAlignment.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedVerticalAlignment
     * @function getTypeUrl
     * @memberof ProtoBoxedVerticalAlignment
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedVerticalAlignment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedVerticalAlignment";
    };

    return ProtoBoxedVerticalAlignment;
})();

/**
 * ProtoBarcodeType enum.
 * @name ProtoBarcodeType
 * @enum {number}
 * @property {number} PDF417=0 PDF417 value
 * @property {number} DATAMATRIX=1 DATAMATRIX value
 * @property {number} BC128=2 BC128 value
 * @property {number} QR=3 QR value
 * @property {number} ITF=4 ITF value
 * @property {number} EAN8=5 EAN8 value
 * @property {number} EAN13=6 EAN13 value
 * @property {number} CODE39=7 CODE39 value
 * @property {number} SWISSQR=8 SWISSQR value
 * @property {number} AZTEC=9 AZTEC value
 */
$root.ProtoBarcodeType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "PDF417"] = 0;
    values[valuesById[1] = "DATAMATRIX"] = 1;
    values[valuesById[2] = "BC128"] = 2;
    values[valuesById[3] = "QR"] = 3;
    values[valuesById[4] = "ITF"] = 4;
    values[valuesById[5] = "EAN8"] = 5;
    values[valuesById[6] = "EAN13"] = 6;
    values[valuesById[7] = "CODE39"] = 7;
    values[valuesById[8] = "SWISSQR"] = 8;
    values[valuesById[9] = "AZTEC"] = 9;
    return values;
})();

$root.ProtoSwissQRCreditor = (function() {

    /**
     * Properties of a ProtoSwissQRCreditor.
     * @name IProtoSwissQRCreditor
     * @interface IProtoSwissQRCreditor
     * @property {string|null} [addressType] ProtoSwissQRCreditor addressType
     * @property {string|null} [name] ProtoSwissQRCreditor name
     * @property {string|null} [postalCode] ProtoSwissQRCreditor postalCode
     * @property {string|null} [town] ProtoSwissQRCreditor town
     * @property {string|null} [country] ProtoSwissQRCreditor country
     * @property {string|null} [streetOrAddressLine1] ProtoSwissQRCreditor streetOrAddressLine1
     * @property {string|null} [buildingNumberOrAddressLine2] ProtoSwissQRCreditor buildingNumberOrAddressLine2
     * @property {string|null} [iban] ProtoSwissQRCreditor iban
     * @property {string|null} [amount] ProtoSwissQRCreditor amount
     * @property {string|null} [currency] ProtoSwissQRCreditor currency
     */

    /**
     * Constructs a new ProtoSwissQRCreditor.
     * @name ProtoSwissQRCreditor
     * @classdesc Represents a ProtoSwissQRCreditor.
     * @implements IProtoSwissQRCreditor
     * @constructor
     * @param {IProtoSwissQRCreditor=} [properties] Properties to set
     */
    function ProtoSwissQRCreditor(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSwissQRCreditor addressType.
     * @member {string} addressType
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.addressType = "";

    /**
     * ProtoSwissQRCreditor name.
     * @member {string} name
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.name = "";

    /**
     * ProtoSwissQRCreditor postalCode.
     * @member {string} postalCode
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.postalCode = "";

    /**
     * ProtoSwissQRCreditor town.
     * @member {string} town
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.town = "";

    /**
     * ProtoSwissQRCreditor country.
     * @member {string} country
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.country = "";

    /**
     * ProtoSwissQRCreditor streetOrAddressLine1.
     * @member {string} streetOrAddressLine1
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.streetOrAddressLine1 = "";

    /**
     * ProtoSwissQRCreditor buildingNumberOrAddressLine2.
     * @member {string} buildingNumberOrAddressLine2
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.buildingNumberOrAddressLine2 = "";

    /**
     * ProtoSwissQRCreditor iban.
     * @member {string} iban
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.iban = "";

    /**
     * ProtoSwissQRCreditor amount.
     * @member {string} amount
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.amount = "";

    /**
     * ProtoSwissQRCreditor currency.
     * @member {string} currency
     * @memberof ProtoSwissQRCreditor
     * @instance
     */
    ProtoSwissQRCreditor.prototype.currency = "";

    /**
     * Creates a new ProtoSwissQRCreditor instance using the specified properties.
     * @function create
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {IProtoSwissQRCreditor=} [properties] Properties to set
     * @returns {ProtoSwissQRCreditor} ProtoSwissQRCreditor instance
     */
    ProtoSwissQRCreditor.create = function create(properties) {
        return new ProtoSwissQRCreditor(properties);
    };

    /**
     * Encodes the specified ProtoSwissQRCreditor message. Does not implicitly {@link ProtoSwissQRCreditor.verify|verify} messages.
     * @function encode
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {IProtoSwissQRCreditor} message ProtoSwissQRCreditor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSwissQRCreditor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.addressType != null && Object.hasOwnProperty.call(message, "addressType"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.addressType);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.postalCode != null && Object.hasOwnProperty.call(message, "postalCode"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.postalCode);
        if (message.town != null && Object.hasOwnProperty.call(message, "town"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.town);
        if (message.country != null && Object.hasOwnProperty.call(message, "country"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.country);
        if (message.streetOrAddressLine1 != null && Object.hasOwnProperty.call(message, "streetOrAddressLine1"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.streetOrAddressLine1);
        if (message.buildingNumberOrAddressLine2 != null && Object.hasOwnProperty.call(message, "buildingNumberOrAddressLine2"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.buildingNumberOrAddressLine2);
        if (message.iban != null && Object.hasOwnProperty.call(message, "iban"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.iban);
        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.amount);
        if (message.currency != null && Object.hasOwnProperty.call(message, "currency"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.currency);
        return writer;
    };

    /**
     * Encodes the specified ProtoSwissQRCreditor message, length delimited. Does not implicitly {@link ProtoSwissQRCreditor.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {IProtoSwissQRCreditor} message ProtoSwissQRCreditor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSwissQRCreditor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSwissQRCreditor message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSwissQRCreditor} ProtoSwissQRCreditor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSwissQRCreditor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSwissQRCreditor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.addressType = reader.string();
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            case 3: {
                    message.postalCode = reader.string();
                    break;
                }
            case 4: {
                    message.town = reader.string();
                    break;
                }
            case 5: {
                    message.country = reader.string();
                    break;
                }
            case 6: {
                    message.streetOrAddressLine1 = reader.string();
                    break;
                }
            case 7: {
                    message.buildingNumberOrAddressLine2 = reader.string();
                    break;
                }
            case 8: {
                    message.iban = reader.string();
                    break;
                }
            case 9: {
                    message.amount = reader.string();
                    break;
                }
            case 10: {
                    message.currency = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSwissQRCreditor message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSwissQRCreditor} ProtoSwissQRCreditor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSwissQRCreditor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSwissQRCreditor message.
     * @function verify
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSwissQRCreditor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.addressType != null && message.hasOwnProperty("addressType"))
            if (!$util.isString(message.addressType))
                return "addressType: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.postalCode != null && message.hasOwnProperty("postalCode"))
            if (!$util.isString(message.postalCode))
                return "postalCode: string expected";
        if (message.town != null && message.hasOwnProperty("town"))
            if (!$util.isString(message.town))
                return "town: string expected";
        if (message.country != null && message.hasOwnProperty("country"))
            if (!$util.isString(message.country))
                return "country: string expected";
        if (message.streetOrAddressLine1 != null && message.hasOwnProperty("streetOrAddressLine1"))
            if (!$util.isString(message.streetOrAddressLine1))
                return "streetOrAddressLine1: string expected";
        if (message.buildingNumberOrAddressLine2 != null && message.hasOwnProperty("buildingNumberOrAddressLine2"))
            if (!$util.isString(message.buildingNumberOrAddressLine2))
                return "buildingNumberOrAddressLine2: string expected";
        if (message.iban != null && message.hasOwnProperty("iban"))
            if (!$util.isString(message.iban))
                return "iban: string expected";
        if (message.amount != null && message.hasOwnProperty("amount"))
            if (!$util.isString(message.amount))
                return "amount: string expected";
        if (message.currency != null && message.hasOwnProperty("currency"))
            if (!$util.isString(message.currency))
                return "currency: string expected";
        return null;
    };

    /**
     * Creates a ProtoSwissQRCreditor message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSwissQRCreditor} ProtoSwissQRCreditor
     */
    ProtoSwissQRCreditor.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSwissQRCreditor)
            return object;
        var message = new $root.ProtoSwissQRCreditor();
        if (object.addressType != null)
            message.addressType = String(object.addressType);
        if (object.name != null)
            message.name = String(object.name);
        if (object.postalCode != null)
            message.postalCode = String(object.postalCode);
        if (object.town != null)
            message.town = String(object.town);
        if (object.country != null)
            message.country = String(object.country);
        if (object.streetOrAddressLine1 != null)
            message.streetOrAddressLine1 = String(object.streetOrAddressLine1);
        if (object.buildingNumberOrAddressLine2 != null)
            message.buildingNumberOrAddressLine2 = String(object.buildingNumberOrAddressLine2);
        if (object.iban != null)
            message.iban = String(object.iban);
        if (object.amount != null)
            message.amount = String(object.amount);
        if (object.currency != null)
            message.currency = String(object.currency);
        return message;
    };

    /**
     * Creates a plain object from a ProtoSwissQRCreditor message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {ProtoSwissQRCreditor} message ProtoSwissQRCreditor
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSwissQRCreditor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.addressType = "";
            object.name = "";
            object.postalCode = "";
            object.town = "";
            object.country = "";
            object.streetOrAddressLine1 = "";
            object.buildingNumberOrAddressLine2 = "";
            object.iban = "";
            object.amount = "";
            object.currency = "";
        }
        if (message.addressType != null && message.hasOwnProperty("addressType"))
            object.addressType = message.addressType;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.postalCode != null && message.hasOwnProperty("postalCode"))
            object.postalCode = message.postalCode;
        if (message.town != null && message.hasOwnProperty("town"))
            object.town = message.town;
        if (message.country != null && message.hasOwnProperty("country"))
            object.country = message.country;
        if (message.streetOrAddressLine1 != null && message.hasOwnProperty("streetOrAddressLine1"))
            object.streetOrAddressLine1 = message.streetOrAddressLine1;
        if (message.buildingNumberOrAddressLine2 != null && message.hasOwnProperty("buildingNumberOrAddressLine2"))
            object.buildingNumberOrAddressLine2 = message.buildingNumberOrAddressLine2;
        if (message.iban != null && message.hasOwnProperty("iban"))
            object.iban = message.iban;
        if (message.amount != null && message.hasOwnProperty("amount"))
            object.amount = message.amount;
        if (message.currency != null && message.hasOwnProperty("currency"))
            object.currency = message.currency;
        return object;
    };

    /**
     * Converts this ProtoSwissQRCreditor to JSON.
     * @function toJSON
     * @memberof ProtoSwissQRCreditor
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSwissQRCreditor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSwissQRCreditor
     * @function getTypeUrl
     * @memberof ProtoSwissQRCreditor
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSwissQRCreditor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSwissQRCreditor";
    };

    return ProtoSwissQRCreditor;
})();

$root.ProtoSwissQRDebitor = (function() {

    /**
     * Properties of a ProtoSwissQRDebitor.
     * @name IProtoSwissQRDebitor
     * @interface IProtoSwissQRDebitor
     * @property {string|null} [addressType] ProtoSwissQRDebitor addressType
     * @property {string|null} [name] ProtoSwissQRDebitor name
     * @property {string|null} [postalCode] ProtoSwissQRDebitor postalCode
     * @property {string|null} [town] ProtoSwissQRDebitor town
     * @property {string|null} [country] ProtoSwissQRDebitor country
     * @property {string|null} [streetOrAddressLine1] ProtoSwissQRDebitor streetOrAddressLine1
     * @property {string|null} [buildingNumberOrAddressLine2] ProtoSwissQRDebitor buildingNumberOrAddressLine2
     * @property {string|null} [paymentReferenceType] ProtoSwissQRDebitor paymentReferenceType
     * @property {string|null} [paymentReference] ProtoSwissQRDebitor paymentReference
     * @property {string|null} [unstructuredReference] ProtoSwissQRDebitor unstructuredReference
     * @property {string|null} [billInformation] ProtoSwissQRDebitor billInformation
     */

    /**
     * Constructs a new ProtoSwissQRDebitor.
     * @name ProtoSwissQRDebitor
     * @classdesc Represents a ProtoSwissQRDebitor.
     * @implements IProtoSwissQRDebitor
     * @constructor
     * @param {IProtoSwissQRDebitor=} [properties] Properties to set
     */
    function ProtoSwissQRDebitor(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSwissQRDebitor addressType.
     * @member {string} addressType
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.addressType = "";

    /**
     * ProtoSwissQRDebitor name.
     * @member {string} name
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.name = "";

    /**
     * ProtoSwissQRDebitor postalCode.
     * @member {string} postalCode
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.postalCode = "";

    /**
     * ProtoSwissQRDebitor town.
     * @member {string} town
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.town = "";

    /**
     * ProtoSwissQRDebitor country.
     * @member {string} country
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.country = "";

    /**
     * ProtoSwissQRDebitor streetOrAddressLine1.
     * @member {string} streetOrAddressLine1
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.streetOrAddressLine1 = "";

    /**
     * ProtoSwissQRDebitor buildingNumberOrAddressLine2.
     * @member {string} buildingNumberOrAddressLine2
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.buildingNumberOrAddressLine2 = "";

    /**
     * ProtoSwissQRDebitor paymentReferenceType.
     * @member {string} paymentReferenceType
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.paymentReferenceType = "";

    /**
     * ProtoSwissQRDebitor paymentReference.
     * @member {string} paymentReference
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.paymentReference = "";

    /**
     * ProtoSwissQRDebitor unstructuredReference.
     * @member {string} unstructuredReference
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.unstructuredReference = "";

    /**
     * ProtoSwissQRDebitor billInformation.
     * @member {string} billInformation
     * @memberof ProtoSwissQRDebitor
     * @instance
     */
    ProtoSwissQRDebitor.prototype.billInformation = "";

    /**
     * Creates a new ProtoSwissQRDebitor instance using the specified properties.
     * @function create
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {IProtoSwissQRDebitor=} [properties] Properties to set
     * @returns {ProtoSwissQRDebitor} ProtoSwissQRDebitor instance
     */
    ProtoSwissQRDebitor.create = function create(properties) {
        return new ProtoSwissQRDebitor(properties);
    };

    /**
     * Encodes the specified ProtoSwissQRDebitor message. Does not implicitly {@link ProtoSwissQRDebitor.verify|verify} messages.
     * @function encode
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {IProtoSwissQRDebitor} message ProtoSwissQRDebitor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSwissQRDebitor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.addressType != null && Object.hasOwnProperty.call(message, "addressType"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.addressType);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.postalCode != null && Object.hasOwnProperty.call(message, "postalCode"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.postalCode);
        if (message.town != null && Object.hasOwnProperty.call(message, "town"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.town);
        if (message.country != null && Object.hasOwnProperty.call(message, "country"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.country);
        if (message.streetOrAddressLine1 != null && Object.hasOwnProperty.call(message, "streetOrAddressLine1"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.streetOrAddressLine1);
        if (message.buildingNumberOrAddressLine2 != null && Object.hasOwnProperty.call(message, "buildingNumberOrAddressLine2"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.buildingNumberOrAddressLine2);
        if (message.paymentReferenceType != null && Object.hasOwnProperty.call(message, "paymentReferenceType"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.paymentReferenceType);
        if (message.paymentReference != null && Object.hasOwnProperty.call(message, "paymentReference"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.paymentReference);
        if (message.unstructuredReference != null && Object.hasOwnProperty.call(message, "unstructuredReference"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.unstructuredReference);
        if (message.billInformation != null && Object.hasOwnProperty.call(message, "billInformation"))
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.billInformation);
        return writer;
    };

    /**
     * Encodes the specified ProtoSwissQRDebitor message, length delimited. Does not implicitly {@link ProtoSwissQRDebitor.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {IProtoSwissQRDebitor} message ProtoSwissQRDebitor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSwissQRDebitor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSwissQRDebitor message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSwissQRDebitor} ProtoSwissQRDebitor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSwissQRDebitor.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSwissQRDebitor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.addressType = reader.string();
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            case 3: {
                    message.postalCode = reader.string();
                    break;
                }
            case 4: {
                    message.town = reader.string();
                    break;
                }
            case 5: {
                    message.country = reader.string();
                    break;
                }
            case 6: {
                    message.streetOrAddressLine1 = reader.string();
                    break;
                }
            case 7: {
                    message.buildingNumberOrAddressLine2 = reader.string();
                    break;
                }
            case 8: {
                    message.paymentReferenceType = reader.string();
                    break;
                }
            case 9: {
                    message.paymentReference = reader.string();
                    break;
                }
            case 10: {
                    message.unstructuredReference = reader.string();
                    break;
                }
            case 11: {
                    message.billInformation = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSwissQRDebitor message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSwissQRDebitor} ProtoSwissQRDebitor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSwissQRDebitor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSwissQRDebitor message.
     * @function verify
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSwissQRDebitor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.addressType != null && message.hasOwnProperty("addressType"))
            if (!$util.isString(message.addressType))
                return "addressType: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.postalCode != null && message.hasOwnProperty("postalCode"))
            if (!$util.isString(message.postalCode))
                return "postalCode: string expected";
        if (message.town != null && message.hasOwnProperty("town"))
            if (!$util.isString(message.town))
                return "town: string expected";
        if (message.country != null && message.hasOwnProperty("country"))
            if (!$util.isString(message.country))
                return "country: string expected";
        if (message.streetOrAddressLine1 != null && message.hasOwnProperty("streetOrAddressLine1"))
            if (!$util.isString(message.streetOrAddressLine1))
                return "streetOrAddressLine1: string expected";
        if (message.buildingNumberOrAddressLine2 != null && message.hasOwnProperty("buildingNumberOrAddressLine2"))
            if (!$util.isString(message.buildingNumberOrAddressLine2))
                return "buildingNumberOrAddressLine2: string expected";
        if (message.paymentReferenceType != null && message.hasOwnProperty("paymentReferenceType"))
            if (!$util.isString(message.paymentReferenceType))
                return "paymentReferenceType: string expected";
        if (message.paymentReference != null && message.hasOwnProperty("paymentReference"))
            if (!$util.isString(message.paymentReference))
                return "paymentReference: string expected";
        if (message.unstructuredReference != null && message.hasOwnProperty("unstructuredReference"))
            if (!$util.isString(message.unstructuredReference))
                return "unstructuredReference: string expected";
        if (message.billInformation != null && message.hasOwnProperty("billInformation"))
            if (!$util.isString(message.billInformation))
                return "billInformation: string expected";
        return null;
    };

    /**
     * Creates a ProtoSwissQRDebitor message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSwissQRDebitor} ProtoSwissQRDebitor
     */
    ProtoSwissQRDebitor.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSwissQRDebitor)
            return object;
        var message = new $root.ProtoSwissQRDebitor();
        if (object.addressType != null)
            message.addressType = String(object.addressType);
        if (object.name != null)
            message.name = String(object.name);
        if (object.postalCode != null)
            message.postalCode = String(object.postalCode);
        if (object.town != null)
            message.town = String(object.town);
        if (object.country != null)
            message.country = String(object.country);
        if (object.streetOrAddressLine1 != null)
            message.streetOrAddressLine1 = String(object.streetOrAddressLine1);
        if (object.buildingNumberOrAddressLine2 != null)
            message.buildingNumberOrAddressLine2 = String(object.buildingNumberOrAddressLine2);
        if (object.paymentReferenceType != null)
            message.paymentReferenceType = String(object.paymentReferenceType);
        if (object.paymentReference != null)
            message.paymentReference = String(object.paymentReference);
        if (object.unstructuredReference != null)
            message.unstructuredReference = String(object.unstructuredReference);
        if (object.billInformation != null)
            message.billInformation = String(object.billInformation);
        return message;
    };

    /**
     * Creates a plain object from a ProtoSwissQRDebitor message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {ProtoSwissQRDebitor} message ProtoSwissQRDebitor
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSwissQRDebitor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.addressType = "";
            object.name = "";
            object.postalCode = "";
            object.town = "";
            object.country = "";
            object.streetOrAddressLine1 = "";
            object.buildingNumberOrAddressLine2 = "";
            object.paymentReferenceType = "";
            object.paymentReference = "";
            object.unstructuredReference = "";
            object.billInformation = "";
        }
        if (message.addressType != null && message.hasOwnProperty("addressType"))
            object.addressType = message.addressType;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.postalCode != null && message.hasOwnProperty("postalCode"))
            object.postalCode = message.postalCode;
        if (message.town != null && message.hasOwnProperty("town"))
            object.town = message.town;
        if (message.country != null && message.hasOwnProperty("country"))
            object.country = message.country;
        if (message.streetOrAddressLine1 != null && message.hasOwnProperty("streetOrAddressLine1"))
            object.streetOrAddressLine1 = message.streetOrAddressLine1;
        if (message.buildingNumberOrAddressLine2 != null && message.hasOwnProperty("buildingNumberOrAddressLine2"))
            object.buildingNumberOrAddressLine2 = message.buildingNumberOrAddressLine2;
        if (message.paymentReferenceType != null && message.hasOwnProperty("paymentReferenceType"))
            object.paymentReferenceType = message.paymentReferenceType;
        if (message.paymentReference != null && message.hasOwnProperty("paymentReference"))
            object.paymentReference = message.paymentReference;
        if (message.unstructuredReference != null && message.hasOwnProperty("unstructuredReference"))
            object.unstructuredReference = message.unstructuredReference;
        if (message.billInformation != null && message.hasOwnProperty("billInformation"))
            object.billInformation = message.billInformation;
        return object;
    };

    /**
     * Converts this ProtoSwissQRDebitor to JSON.
     * @function toJSON
     * @memberof ProtoSwissQRDebitor
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSwissQRDebitor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSwissQRDebitor
     * @function getTypeUrl
     * @memberof ProtoSwissQRDebitor
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSwissQRDebitor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSwissQRDebitor";
    };

    return ProtoSwissQRDebitor;
})();

$root.ProtoSwissQRData = (function() {

    /**
     * Properties of a ProtoSwissQRData.
     * @name IProtoSwissQRData
     * @interface IProtoSwissQRData
     * @property {IProtoSwissQRCreditor|null} [creditor] ProtoSwissQRData creditor
     * @property {IProtoSwissQRDebitor|null} [debitor] ProtoSwissQRData debitor
     */

    /**
     * Constructs a new ProtoSwissQRData.
     * @name ProtoSwissQRData
     * @classdesc Represents a ProtoSwissQRData.
     * @implements IProtoSwissQRData
     * @constructor
     * @param {IProtoSwissQRData=} [properties] Properties to set
     */
    function ProtoSwissQRData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSwissQRData creditor.
     * @member {IProtoSwissQRCreditor|null|undefined} creditor
     * @memberof ProtoSwissQRData
     * @instance
     */
    ProtoSwissQRData.prototype.creditor = null;

    /**
     * ProtoSwissQRData debitor.
     * @member {IProtoSwissQRDebitor|null|undefined} debitor
     * @memberof ProtoSwissQRData
     * @instance
     */
    ProtoSwissQRData.prototype.debitor = null;

    /**
     * Creates a new ProtoSwissQRData instance using the specified properties.
     * @function create
     * @memberof ProtoSwissQRData
     * @static
     * @param {IProtoSwissQRData=} [properties] Properties to set
     * @returns {ProtoSwissQRData} ProtoSwissQRData instance
     */
    ProtoSwissQRData.create = function create(properties) {
        return new ProtoSwissQRData(properties);
    };

    /**
     * Encodes the specified ProtoSwissQRData message. Does not implicitly {@link ProtoSwissQRData.verify|verify} messages.
     * @function encode
     * @memberof ProtoSwissQRData
     * @static
     * @param {IProtoSwissQRData} message ProtoSwissQRData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSwissQRData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.creditor != null && Object.hasOwnProperty.call(message, "creditor"))
            $root.ProtoSwissQRCreditor.encode(message.creditor, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.debitor != null && Object.hasOwnProperty.call(message, "debitor"))
            $root.ProtoSwissQRDebitor.encode(message.debitor, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoSwissQRData message, length delimited. Does not implicitly {@link ProtoSwissQRData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSwissQRData
     * @static
     * @param {IProtoSwissQRData} message ProtoSwissQRData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSwissQRData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSwissQRData message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSwissQRData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSwissQRData} ProtoSwissQRData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSwissQRData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSwissQRData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.creditor = $root.ProtoSwissQRCreditor.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.debitor = $root.ProtoSwissQRDebitor.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSwissQRData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSwissQRData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSwissQRData} ProtoSwissQRData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSwissQRData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSwissQRData message.
     * @function verify
     * @memberof ProtoSwissQRData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSwissQRData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.creditor != null && message.hasOwnProperty("creditor")) {
            var error = $root.ProtoSwissQRCreditor.verify(message.creditor);
            if (error)
                return "creditor." + error;
        }
        if (message.debitor != null && message.hasOwnProperty("debitor")) {
            var error = $root.ProtoSwissQRDebitor.verify(message.debitor);
            if (error)
                return "debitor." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoSwissQRData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSwissQRData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSwissQRData} ProtoSwissQRData
     */
    ProtoSwissQRData.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSwissQRData)
            return object;
        var message = new $root.ProtoSwissQRData();
        if (object.creditor != null) {
            if (typeof object.creditor !== "object")
                throw TypeError(".ProtoSwissQRData.creditor: object expected");
            message.creditor = $root.ProtoSwissQRCreditor.fromObject(object.creditor);
        }
        if (object.debitor != null) {
            if (typeof object.debitor !== "object")
                throw TypeError(".ProtoSwissQRData.debitor: object expected");
            message.debitor = $root.ProtoSwissQRDebitor.fromObject(object.debitor);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoSwissQRData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSwissQRData
     * @static
     * @param {ProtoSwissQRData} message ProtoSwissQRData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSwissQRData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.creditor = null;
            object.debitor = null;
        }
        if (message.creditor != null && message.hasOwnProperty("creditor"))
            object.creditor = $root.ProtoSwissQRCreditor.toObject(message.creditor, options);
        if (message.debitor != null && message.hasOwnProperty("debitor"))
            object.debitor = $root.ProtoSwissQRDebitor.toObject(message.debitor, options);
        return object;
    };

    /**
     * Converts this ProtoSwissQRData to JSON.
     * @function toJSON
     * @memberof ProtoSwissQRData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSwissQRData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSwissQRData
     * @function getTypeUrl
     * @memberof ProtoSwissQRData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSwissQRData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSwissQRData";
    };

    return ProtoSwissQRData;
})();

$root.ProtoLinebreak = (function() {

    /**
     * Properties of a ProtoLinebreak.
     * @name IProtoLinebreak
     * @interface IProtoLinebreak
     * @property {IProtoDocumentElement|null} [parent] ProtoLinebreak parent
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoLinebreak comChannelUUIDs
     * @property {string|null} [uuid] ProtoLinebreak uuid
     * @property {IProtoBoxedUint32|null} [count] ProtoLinebreak count
     */

    /**
     * Constructs a new ProtoLinebreak.
     * @name ProtoLinebreak
     * @classdesc Represents a ProtoLinebreak.
     * @implements IProtoLinebreak
     * @constructor
     * @param {IProtoLinebreak=} [properties] Properties to set
     */
    function ProtoLinebreak(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoLinebreak parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoLinebreak
     * @instance
     */
    ProtoLinebreak.prototype.parent = null;

    /**
     * ProtoLinebreak comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoLinebreak
     * @instance
     */
    ProtoLinebreak.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoLinebreak uuid.
     * @member {string} uuid
     * @memberof ProtoLinebreak
     * @instance
     */
    ProtoLinebreak.prototype.uuid = "";

    /**
     * ProtoLinebreak count.
     * @member {IProtoBoxedUint32|null|undefined} count
     * @memberof ProtoLinebreak
     * @instance
     */
    ProtoLinebreak.prototype.count = null;

    /**
     * Creates a new ProtoLinebreak instance using the specified properties.
     * @function create
     * @memberof ProtoLinebreak
     * @static
     * @param {IProtoLinebreak=} [properties] Properties to set
     * @returns {ProtoLinebreak} ProtoLinebreak instance
     */
    ProtoLinebreak.create = function create(properties) {
        return new ProtoLinebreak(properties);
    };

    /**
     * Encodes the specified ProtoLinebreak message. Does not implicitly {@link ProtoLinebreak.verify|verify} messages.
     * @function encode
     * @memberof ProtoLinebreak
     * @static
     * @param {IProtoLinebreak} message ProtoLinebreak message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLinebreak.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.count != null && Object.hasOwnProperty.call(message, "count"))
            $root.ProtoBoxedUint32.encode(message.count, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoLinebreak message, length delimited. Does not implicitly {@link ProtoLinebreak.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoLinebreak
     * @static
     * @param {IProtoLinebreak} message ProtoLinebreak message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLinebreak.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoLinebreak message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoLinebreak
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoLinebreak} ProtoLinebreak
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLinebreak.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoLinebreak();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    message.count = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoLinebreak message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoLinebreak
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoLinebreak} ProtoLinebreak
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLinebreak.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoLinebreak message.
     * @function verify
     * @memberof ProtoLinebreak
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoLinebreak.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.count != null && message.hasOwnProperty("count")) {
            var error = $root.ProtoBoxedUint32.verify(message.count);
            if (error)
                return "count." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoLinebreak message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoLinebreak
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoLinebreak} ProtoLinebreak
     */
    ProtoLinebreak.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoLinebreak)
            return object;
        var message = new $root.ProtoLinebreak();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoLinebreak.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoLinebreak.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.count != null) {
            if (typeof object.count !== "object")
                throw TypeError(".ProtoLinebreak.count: object expected");
            message.count = $root.ProtoBoxedUint32.fromObject(object.count);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoLinebreak message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoLinebreak
     * @static
     * @param {ProtoLinebreak} message ProtoLinebreak
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoLinebreak.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.count = null;
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.count != null && message.hasOwnProperty("count"))
            object.count = $root.ProtoBoxedUint32.toObject(message.count, options);
        return object;
    };

    /**
     * Converts this ProtoLinebreak to JSON.
     * @function toJSON
     * @memberof ProtoLinebreak
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoLinebreak.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoLinebreak
     * @function getTypeUrl
     * @memberof ProtoLinebreak
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoLinebreak.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoLinebreak";
    };

    return ProtoLinebreak;
})();

$root.ProtoBorder = (function() {

    /**
     * Properties of a ProtoBorder.
     * @name IProtoBorder
     * @interface IProtoBorder
     * @property {IProtoMeasure|null} [weight] ProtoBorder weight
     * @property {IProtoColor|null} [color] ProtoBorder color
     */

    /**
     * Constructs a new ProtoBorder.
     * @name ProtoBorder
     * @classdesc Represents a ProtoBorder.
     * @implements IProtoBorder
     * @constructor
     * @param {IProtoBorder=} [properties] Properties to set
     */
    function ProtoBorder(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBorder weight.
     * @member {IProtoMeasure|null|undefined} weight
     * @memberof ProtoBorder
     * @instance
     */
    ProtoBorder.prototype.weight = null;

    /**
     * ProtoBorder color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoBorder
     * @instance
     */
    ProtoBorder.prototype.color = null;

    /**
     * Creates a new ProtoBorder instance using the specified properties.
     * @function create
     * @memberof ProtoBorder
     * @static
     * @param {IProtoBorder=} [properties] Properties to set
     * @returns {ProtoBorder} ProtoBorder instance
     */
    ProtoBorder.create = function create(properties) {
        return new ProtoBorder(properties);
    };

    /**
     * Encodes the specified ProtoBorder message. Does not implicitly {@link ProtoBorder.verify|verify} messages.
     * @function encode
     * @memberof ProtoBorder
     * @static
     * @param {IProtoBorder} message ProtoBorder message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBorder.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.weight != null && Object.hasOwnProperty.call(message, "weight"))
            $root.ProtoMeasure.encode(message.weight, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoBorder message, length delimited. Does not implicitly {@link ProtoBorder.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBorder
     * @static
     * @param {IProtoBorder} message ProtoBorder message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBorder.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBorder message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBorder
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBorder} ProtoBorder
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBorder.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBorder();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.weight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBorder message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBorder
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBorder} ProtoBorder
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBorder.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBorder message.
     * @function verify
     * @memberof ProtoBorder
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBorder.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.weight != null && message.hasOwnProperty("weight")) {
            var error = $root.ProtoMeasure.verify(message.weight);
            if (error)
                return "weight." + error;
        }
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoBorder message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBorder
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBorder} ProtoBorder
     */
    ProtoBorder.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBorder)
            return object;
        var message = new $root.ProtoBorder();
        if (object.weight != null) {
            if (typeof object.weight !== "object")
                throw TypeError(".ProtoBorder.weight: object expected");
            message.weight = $root.ProtoMeasure.fromObject(object.weight);
        }
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoBorder.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoBorder message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBorder
     * @static
     * @param {ProtoBorder} message ProtoBorder
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBorder.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.weight = null;
            object.color = null;
        }
        if (message.weight != null && message.hasOwnProperty("weight"))
            object.weight = $root.ProtoMeasure.toObject(message.weight, options);
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        return object;
    };

    /**
     * Converts this ProtoBorder to JSON.
     * @function toJSON
     * @memberof ProtoBorder
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBorder.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBorder
     * @function getTypeUrl
     * @memberof ProtoBorder
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBorder.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBorder";
    };

    return ProtoBorder;
})();

$root.ProtoSideBorders = (function() {

    /**
     * Properties of a ProtoSideBorders.
     * @name IProtoSideBorders
     * @interface IProtoSideBorders
     * @property {IProtoBorder|null} [top] ProtoSideBorders top
     * @property {IProtoBorder|null} [right] ProtoSideBorders right
     * @property {IProtoBorder|null} [bottom] ProtoSideBorders bottom
     * @property {IProtoBorder|null} [left] ProtoSideBorders left
     */

    /**
     * Constructs a new ProtoSideBorders.
     * @name ProtoSideBorders
     * @classdesc Represents a ProtoSideBorders.
     * @implements IProtoSideBorders
     * @constructor
     * @param {IProtoSideBorders=} [properties] Properties to set
     */
    function ProtoSideBorders(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSideBorders top.
     * @member {IProtoBorder|null|undefined} top
     * @memberof ProtoSideBorders
     * @instance
     */
    ProtoSideBorders.prototype.top = null;

    /**
     * ProtoSideBorders right.
     * @member {IProtoBorder|null|undefined} right
     * @memberof ProtoSideBorders
     * @instance
     */
    ProtoSideBorders.prototype.right = null;

    /**
     * ProtoSideBorders bottom.
     * @member {IProtoBorder|null|undefined} bottom
     * @memberof ProtoSideBorders
     * @instance
     */
    ProtoSideBorders.prototype.bottom = null;

    /**
     * ProtoSideBorders left.
     * @member {IProtoBorder|null|undefined} left
     * @memberof ProtoSideBorders
     * @instance
     */
    ProtoSideBorders.prototype.left = null;

    /**
     * Creates a new ProtoSideBorders instance using the specified properties.
     * @function create
     * @memberof ProtoSideBorders
     * @static
     * @param {IProtoSideBorders=} [properties] Properties to set
     * @returns {ProtoSideBorders} ProtoSideBorders instance
     */
    ProtoSideBorders.create = function create(properties) {
        return new ProtoSideBorders(properties);
    };

    /**
     * Encodes the specified ProtoSideBorders message. Does not implicitly {@link ProtoSideBorders.verify|verify} messages.
     * @function encode
     * @memberof ProtoSideBorders
     * @static
     * @param {IProtoSideBorders} message ProtoSideBorders message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSideBorders.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.top != null && Object.hasOwnProperty.call(message, "top"))
            $root.ProtoBorder.encode(message.top, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.right != null && Object.hasOwnProperty.call(message, "right"))
            $root.ProtoBorder.encode(message.right, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.bottom != null && Object.hasOwnProperty.call(message, "bottom"))
            $root.ProtoBorder.encode(message.bottom, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.left != null && Object.hasOwnProperty.call(message, "left"))
            $root.ProtoBorder.encode(message.left, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoSideBorders message, length delimited. Does not implicitly {@link ProtoSideBorders.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSideBorders
     * @static
     * @param {IProtoSideBorders} message ProtoSideBorders message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSideBorders.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSideBorders message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSideBorders
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSideBorders} ProtoSideBorders
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSideBorders.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSideBorders();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.top = $root.ProtoBorder.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.right = $root.ProtoBorder.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.bottom = $root.ProtoBorder.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.left = $root.ProtoBorder.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSideBorders message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSideBorders
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSideBorders} ProtoSideBorders
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSideBorders.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSideBorders message.
     * @function verify
     * @memberof ProtoSideBorders
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSideBorders.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.top != null && message.hasOwnProperty("top")) {
            var error = $root.ProtoBorder.verify(message.top);
            if (error)
                return "top." + error;
        }
        if (message.right != null && message.hasOwnProperty("right")) {
            var error = $root.ProtoBorder.verify(message.right);
            if (error)
                return "right." + error;
        }
        if (message.bottom != null && message.hasOwnProperty("bottom")) {
            var error = $root.ProtoBorder.verify(message.bottom);
            if (error)
                return "bottom." + error;
        }
        if (message.left != null && message.hasOwnProperty("left")) {
            var error = $root.ProtoBorder.verify(message.left);
            if (error)
                return "left." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoSideBorders message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSideBorders
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSideBorders} ProtoSideBorders
     */
    ProtoSideBorders.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSideBorders)
            return object;
        var message = new $root.ProtoSideBorders();
        if (object.top != null) {
            if (typeof object.top !== "object")
                throw TypeError(".ProtoSideBorders.top: object expected");
            message.top = $root.ProtoBorder.fromObject(object.top);
        }
        if (object.right != null) {
            if (typeof object.right !== "object")
                throw TypeError(".ProtoSideBorders.right: object expected");
            message.right = $root.ProtoBorder.fromObject(object.right);
        }
        if (object.bottom != null) {
            if (typeof object.bottom !== "object")
                throw TypeError(".ProtoSideBorders.bottom: object expected");
            message.bottom = $root.ProtoBorder.fromObject(object.bottom);
        }
        if (object.left != null) {
            if (typeof object.left !== "object")
                throw TypeError(".ProtoSideBorders.left: object expected");
            message.left = $root.ProtoBorder.fromObject(object.left);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoSideBorders message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSideBorders
     * @static
     * @param {ProtoSideBorders} message ProtoSideBorders
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSideBorders.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.top = null;
            object.right = null;
            object.bottom = null;
            object.left = null;
        }
        if (message.top != null && message.hasOwnProperty("top"))
            object.top = $root.ProtoBorder.toObject(message.top, options);
        if (message.right != null && message.hasOwnProperty("right"))
            object.right = $root.ProtoBorder.toObject(message.right, options);
        if (message.bottom != null && message.hasOwnProperty("bottom"))
            object.bottom = $root.ProtoBorder.toObject(message.bottom, options);
        if (message.left != null && message.hasOwnProperty("left"))
            object.left = $root.ProtoBorder.toObject(message.left, options);
        return object;
    };

    /**
     * Converts this ProtoSideBorders to JSON.
     * @function toJSON
     * @memberof ProtoSideBorders
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSideBorders.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSideBorders
     * @function getTypeUrl
     * @memberof ProtoSideBorders
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSideBorders.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSideBorders";
    };

    return ProtoSideBorders;
})();

/**
 * ProtoPositionMode enum.
 * @name ProtoPositionMode
 * @enum {number}
 * @property {number} CENTER=0 CENTER value
 * @property {number} LEFT=1 LEFT value
 * @property {number} FOLIO=2 FOLIO value
 * @property {number} RIGHT=3 RIGHT value
 * @property {number} REVERSE_FOLIO=4 REVERSE_FOLIO value
 */
$root.ProtoPositionMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CENTER"] = 0;
    values[valuesById[1] = "LEFT"] = 1;
    values[valuesById[2] = "FOLIO"] = 2;
    values[valuesById[3] = "RIGHT"] = 3;
    values[valuesById[4] = "REVERSE_FOLIO"] = 4;
    return values;
})();

$root.ProtoBoxedPositionMode = (function() {

    /**
     * Properties of a ProtoBoxedPositionMode.
     * @name IProtoBoxedPositionMode
     * @interface IProtoBoxedPositionMode
     * @property {ProtoPositionMode|null} [value] ProtoBoxedPositionMode value
     * @property {boolean|null} [isNull] ProtoBoxedPositionMode isNull
     */

    /**
     * Constructs a new ProtoBoxedPositionMode.
     * @name ProtoBoxedPositionMode
     * @classdesc Represents a ProtoBoxedPositionMode.
     * @implements IProtoBoxedPositionMode
     * @constructor
     * @param {IProtoBoxedPositionMode=} [properties] Properties to set
     */
    function ProtoBoxedPositionMode(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedPositionMode value.
     * @member {ProtoPositionMode} value
     * @memberof ProtoBoxedPositionMode
     * @instance
     */
    ProtoBoxedPositionMode.prototype.value = 0;

    /**
     * ProtoBoxedPositionMode isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedPositionMode
     * @instance
     */
    ProtoBoxedPositionMode.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedPositionMode instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {IProtoBoxedPositionMode=} [properties] Properties to set
     * @returns {ProtoBoxedPositionMode} ProtoBoxedPositionMode instance
     */
    ProtoBoxedPositionMode.create = function create(properties) {
        return new ProtoBoxedPositionMode(properties);
    };

    /**
     * Encodes the specified ProtoBoxedPositionMode message. Does not implicitly {@link ProtoBoxedPositionMode.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {IProtoBoxedPositionMode} message ProtoBoxedPositionMode message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedPositionMode.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedPositionMode message, length delimited. Does not implicitly {@link ProtoBoxedPositionMode.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {IProtoBoxedPositionMode} message ProtoBoxedPositionMode message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedPositionMode.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedPositionMode message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedPositionMode} ProtoBoxedPositionMode
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedPositionMode.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedPositionMode();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.int32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedPositionMode message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedPositionMode} ProtoBoxedPositionMode
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedPositionMode.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedPositionMode message.
     * @function verify
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedPositionMode.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            switch (message.value) {
            default:
                return "value: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedPositionMode message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedPositionMode} ProtoBoxedPositionMode
     */
    ProtoBoxedPositionMode.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedPositionMode)
            return object;
        var message = new $root.ProtoBoxedPositionMode();
        switch (object.value) {
        default:
            if (typeof object.value === "number") {
                message.value = object.value;
                break;
            }
            break;
        case "CENTER":
        case 0:
            message.value = 0;
            break;
        case "LEFT":
        case 1:
            message.value = 1;
            break;
        case "FOLIO":
        case 2:
            message.value = 2;
            break;
        case "RIGHT":
        case 3:
            message.value = 3;
            break;
        case "REVERSE_FOLIO":
        case 4:
            message.value = 4;
            break;
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedPositionMode message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {ProtoBoxedPositionMode} message ProtoBoxedPositionMode
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedPositionMode.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = options.enums === String ? "CENTER" : 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.enums === String ? $root.ProtoPositionMode[message.value] === undefined ? message.value : $root.ProtoPositionMode[message.value] : message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedPositionMode to JSON.
     * @function toJSON
     * @memberof ProtoBoxedPositionMode
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedPositionMode.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedPositionMode
     * @function getTypeUrl
     * @memberof ProtoBoxedPositionMode
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedPositionMode.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedPositionMode";
    };

    return ProtoBoxedPositionMode;
})();

$root.ProtoColumnSettings = (function() {

    /**
     * Properties of a ProtoColumnSettings.
     * @name IProtoColumnSettings
     * @interface IProtoColumnSettings
     * @property {IProtoBoxedMeasure|null} [width] ProtoColumnSettings width
     * @property {IProtoBoxedMeasure|null} [interColumnSpace] ProtoColumnSettings interColumnSpace
     * @property {IProtoBoxedMeasure|null} [positionOffset] ProtoColumnSettings positionOffset
     * @property {ProtoPositionMode|null} [positionMode] ProtoColumnSettings positionMode
     * @property {IProtoBoxedMeasure|null} [outsideMargin] ProtoColumnSettings outsideMargin
     */

    /**
     * Constructs a new ProtoColumnSettings.
     * @name ProtoColumnSettings
     * @classdesc Represents a ProtoColumnSettings.
     * @implements IProtoColumnSettings
     * @constructor
     * @param {IProtoColumnSettings=} [properties] Properties to set
     */
    function ProtoColumnSettings(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoColumnSettings width.
     * @member {IProtoBoxedMeasure|null|undefined} width
     * @memberof ProtoColumnSettings
     * @instance
     */
    ProtoColumnSettings.prototype.width = null;

    /**
     * ProtoColumnSettings interColumnSpace.
     * @member {IProtoBoxedMeasure|null|undefined} interColumnSpace
     * @memberof ProtoColumnSettings
     * @instance
     */
    ProtoColumnSettings.prototype.interColumnSpace = null;

    /**
     * ProtoColumnSettings positionOffset.
     * @member {IProtoBoxedMeasure|null|undefined} positionOffset
     * @memberof ProtoColumnSettings
     * @instance
     */
    ProtoColumnSettings.prototype.positionOffset = null;

    /**
     * ProtoColumnSettings positionMode.
     * @member {ProtoPositionMode} positionMode
     * @memberof ProtoColumnSettings
     * @instance
     */
    ProtoColumnSettings.prototype.positionMode = 0;

    /**
     * ProtoColumnSettings outsideMargin.
     * @member {IProtoBoxedMeasure|null|undefined} outsideMargin
     * @memberof ProtoColumnSettings
     * @instance
     */
    ProtoColumnSettings.prototype.outsideMargin = null;

    /**
     * Creates a new ProtoColumnSettings instance using the specified properties.
     * @function create
     * @memberof ProtoColumnSettings
     * @static
     * @param {IProtoColumnSettings=} [properties] Properties to set
     * @returns {ProtoColumnSettings} ProtoColumnSettings instance
     */
    ProtoColumnSettings.create = function create(properties) {
        return new ProtoColumnSettings(properties);
    };

    /**
     * Encodes the specified ProtoColumnSettings message. Does not implicitly {@link ProtoColumnSettings.verify|verify} messages.
     * @function encode
     * @memberof ProtoColumnSettings
     * @static
     * @param {IProtoColumnSettings} message ProtoColumnSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoColumnSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoBoxedMeasure.encode(message.width, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.interColumnSpace != null && Object.hasOwnProperty.call(message, "interColumnSpace"))
            $root.ProtoBoxedMeasure.encode(message.interColumnSpace, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.positionOffset != null && Object.hasOwnProperty.call(message, "positionOffset"))
            $root.ProtoBoxedMeasure.encode(message.positionOffset, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.positionMode != null && Object.hasOwnProperty.call(message, "positionMode"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.positionMode);
        if (message.outsideMargin != null && Object.hasOwnProperty.call(message, "outsideMargin"))
            $root.ProtoBoxedMeasure.encode(message.outsideMargin, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoColumnSettings message, length delimited. Does not implicitly {@link ProtoColumnSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoColumnSettings
     * @static
     * @param {IProtoColumnSettings} message ProtoColumnSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoColumnSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoColumnSettings message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoColumnSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoColumnSettings} ProtoColumnSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoColumnSettings.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoColumnSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.width = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.interColumnSpace = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.positionOffset = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.positionMode = reader.int32();
                    break;
                }
            case 5: {
                    message.outsideMargin = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoColumnSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoColumnSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoColumnSettings} ProtoColumnSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoColumnSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoColumnSettings message.
     * @function verify
     * @memberof ProtoColumnSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoColumnSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoBoxedMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.interColumnSpace != null && message.hasOwnProperty("interColumnSpace")) {
            var error = $root.ProtoBoxedMeasure.verify(message.interColumnSpace);
            if (error)
                return "interColumnSpace." + error;
        }
        if (message.positionOffset != null && message.hasOwnProperty("positionOffset")) {
            var error = $root.ProtoBoxedMeasure.verify(message.positionOffset);
            if (error)
                return "positionOffset." + error;
        }
        if (message.positionMode != null && message.hasOwnProperty("positionMode"))
            switch (message.positionMode) {
            default:
                return "positionMode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.outsideMargin != null && message.hasOwnProperty("outsideMargin")) {
            var error = $root.ProtoBoxedMeasure.verify(message.outsideMargin);
            if (error)
                return "outsideMargin." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoColumnSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoColumnSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoColumnSettings} ProtoColumnSettings
     */
    ProtoColumnSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoColumnSettings)
            return object;
        var message = new $root.ProtoColumnSettings();
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoColumnSettings.width: object expected");
            message.width = $root.ProtoBoxedMeasure.fromObject(object.width);
        }
        if (object.interColumnSpace != null) {
            if (typeof object.interColumnSpace !== "object")
                throw TypeError(".ProtoColumnSettings.interColumnSpace: object expected");
            message.interColumnSpace = $root.ProtoBoxedMeasure.fromObject(object.interColumnSpace);
        }
        if (object.positionOffset != null) {
            if (typeof object.positionOffset !== "object")
                throw TypeError(".ProtoColumnSettings.positionOffset: object expected");
            message.positionOffset = $root.ProtoBoxedMeasure.fromObject(object.positionOffset);
        }
        switch (object.positionMode) {
        default:
            if (typeof object.positionMode === "number") {
                message.positionMode = object.positionMode;
                break;
            }
            break;
        case "CENTER":
        case 0:
            message.positionMode = 0;
            break;
        case "LEFT":
        case 1:
            message.positionMode = 1;
            break;
        case "FOLIO":
        case 2:
            message.positionMode = 2;
            break;
        case "RIGHT":
        case 3:
            message.positionMode = 3;
            break;
        case "REVERSE_FOLIO":
        case 4:
            message.positionMode = 4;
            break;
        }
        if (object.outsideMargin != null) {
            if (typeof object.outsideMargin !== "object")
                throw TypeError(".ProtoColumnSettings.outsideMargin: object expected");
            message.outsideMargin = $root.ProtoBoxedMeasure.fromObject(object.outsideMargin);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoColumnSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoColumnSettings
     * @static
     * @param {ProtoColumnSettings} message ProtoColumnSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoColumnSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.width = null;
            object.interColumnSpace = null;
            object.positionOffset = null;
            object.positionMode = options.enums === String ? "CENTER" : 0;
            object.outsideMargin = null;
        }
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoBoxedMeasure.toObject(message.width, options);
        if (message.interColumnSpace != null && message.hasOwnProperty("interColumnSpace"))
            object.interColumnSpace = $root.ProtoBoxedMeasure.toObject(message.interColumnSpace, options);
        if (message.positionOffset != null && message.hasOwnProperty("positionOffset"))
            object.positionOffset = $root.ProtoBoxedMeasure.toObject(message.positionOffset, options);
        if (message.positionMode != null && message.hasOwnProperty("positionMode"))
            object.positionMode = options.enums === String ? $root.ProtoPositionMode[message.positionMode] === undefined ? message.positionMode : $root.ProtoPositionMode[message.positionMode] : message.positionMode;
        if (message.outsideMargin != null && message.hasOwnProperty("outsideMargin"))
            object.outsideMargin = $root.ProtoBoxedMeasure.toObject(message.outsideMargin, options);
        return object;
    };

    /**
     * Converts this ProtoColumnSettings to JSON.
     * @function toJSON
     * @memberof ProtoColumnSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoColumnSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoColumnSettings
     * @function getTypeUrl
     * @memberof ProtoColumnSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoColumnSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoColumnSettings";
    };

    return ProtoColumnSettings;
})();

$root.ProtoGraphicState = (function() {

    /**
     * Properties of a ProtoGraphicState.
     * @name IProtoGraphicState
     * @interface IProtoGraphicState
     * @property {IProtoBoxedBool|null} [bold] ProtoGraphicState bold
     * @property {IProtoBoxedBool|null} [italic] ProtoGraphicState italic
     * @property {Array.<IProtoColor>|null} [colorStack] ProtoGraphicState colorStack
     * @property {IProtoBoxedBool|null} [subscript] ProtoGraphicState subscript
     * @property {IProtoBoxedBool|null} [superscript] ProtoGraphicState superscript
     * @property {IProtoBoxedBool|null} [underline] ProtoGraphicState underline
     * @property {IProtoBoxedBool|null} [strikethrough] ProtoGraphicState strikethrough
     */

    /**
     * Constructs a new ProtoGraphicState.
     * @name ProtoGraphicState
     * @classdesc Represents a ProtoGraphicState.
     * @implements IProtoGraphicState
     * @constructor
     * @param {IProtoGraphicState=} [properties] Properties to set
     */
    function ProtoGraphicState(properties) {
        this.colorStack = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoGraphicState bold.
     * @member {IProtoBoxedBool|null|undefined} bold
     * @memberof ProtoGraphicState
     * @instance
     */
    ProtoGraphicState.prototype.bold = null;

    /**
     * ProtoGraphicState italic.
     * @member {IProtoBoxedBool|null|undefined} italic
     * @memberof ProtoGraphicState
     * @instance
     */
    ProtoGraphicState.prototype.italic = null;

    /**
     * ProtoGraphicState colorStack.
     * @member {Array.<IProtoColor>} colorStack
     * @memberof ProtoGraphicState
     * @instance
     */
    ProtoGraphicState.prototype.colorStack = $util.emptyArray;

    /**
     * ProtoGraphicState subscript.
     * @member {IProtoBoxedBool|null|undefined} subscript
     * @memberof ProtoGraphicState
     * @instance
     */
    ProtoGraphicState.prototype.subscript = null;

    /**
     * ProtoGraphicState superscript.
     * @member {IProtoBoxedBool|null|undefined} superscript
     * @memberof ProtoGraphicState
     * @instance
     */
    ProtoGraphicState.prototype.superscript = null;

    /**
     * ProtoGraphicState underline.
     * @member {IProtoBoxedBool|null|undefined} underline
     * @memberof ProtoGraphicState
     * @instance
     */
    ProtoGraphicState.prototype.underline = null;

    /**
     * ProtoGraphicState strikethrough.
     * @member {IProtoBoxedBool|null|undefined} strikethrough
     * @memberof ProtoGraphicState
     * @instance
     */
    ProtoGraphicState.prototype.strikethrough = null;

    /**
     * Creates a new ProtoGraphicState instance using the specified properties.
     * @function create
     * @memberof ProtoGraphicState
     * @static
     * @param {IProtoGraphicState=} [properties] Properties to set
     * @returns {ProtoGraphicState} ProtoGraphicState instance
     */
    ProtoGraphicState.create = function create(properties) {
        return new ProtoGraphicState(properties);
    };

    /**
     * Encodes the specified ProtoGraphicState message. Does not implicitly {@link ProtoGraphicState.verify|verify} messages.
     * @function encode
     * @memberof ProtoGraphicState
     * @static
     * @param {IProtoGraphicState} message ProtoGraphicState message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoGraphicState.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.bold != null && Object.hasOwnProperty.call(message, "bold"))
            $root.ProtoBoxedBool.encode(message.bold, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.italic != null && Object.hasOwnProperty.call(message, "italic"))
            $root.ProtoBoxedBool.encode(message.italic, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.colorStack != null && message.colorStack.length)
            for (var i = 0; i < message.colorStack.length; ++i)
                $root.ProtoColor.encode(message.colorStack[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.subscript != null && Object.hasOwnProperty.call(message, "subscript"))
            $root.ProtoBoxedBool.encode(message.subscript, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.superscript != null && Object.hasOwnProperty.call(message, "superscript"))
            $root.ProtoBoxedBool.encode(message.superscript, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.underline != null && Object.hasOwnProperty.call(message, "underline"))
            $root.ProtoBoxedBool.encode(message.underline, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.strikethrough != null && Object.hasOwnProperty.call(message, "strikethrough"))
            $root.ProtoBoxedBool.encode(message.strikethrough, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoGraphicState message, length delimited. Does not implicitly {@link ProtoGraphicState.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoGraphicState
     * @static
     * @param {IProtoGraphicState} message ProtoGraphicState message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoGraphicState.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoGraphicState message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoGraphicState
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoGraphicState} ProtoGraphicState
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoGraphicState.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoGraphicState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.bold = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.italic = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.colorStack && message.colorStack.length))
                        message.colorStack = [];
                    message.colorStack.push($root.ProtoColor.decode(reader, reader.uint32()));
                    break;
                }
            case 4: {
                    message.subscript = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.superscript = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.underline = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.strikethrough = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoGraphicState message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoGraphicState
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoGraphicState} ProtoGraphicState
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoGraphicState.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoGraphicState message.
     * @function verify
     * @memberof ProtoGraphicState
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoGraphicState.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.bold != null && message.hasOwnProperty("bold")) {
            var error = $root.ProtoBoxedBool.verify(message.bold);
            if (error)
                return "bold." + error;
        }
        if (message.italic != null && message.hasOwnProperty("italic")) {
            var error = $root.ProtoBoxedBool.verify(message.italic);
            if (error)
                return "italic." + error;
        }
        if (message.colorStack != null && message.hasOwnProperty("colorStack")) {
            if (!Array.isArray(message.colorStack))
                return "colorStack: array expected";
            for (var i = 0; i < message.colorStack.length; ++i) {
                var error = $root.ProtoColor.verify(message.colorStack[i]);
                if (error)
                    return "colorStack." + error;
            }
        }
        if (message.subscript != null && message.hasOwnProperty("subscript")) {
            var error = $root.ProtoBoxedBool.verify(message.subscript);
            if (error)
                return "subscript." + error;
        }
        if (message.superscript != null && message.hasOwnProperty("superscript")) {
            var error = $root.ProtoBoxedBool.verify(message.superscript);
            if (error)
                return "superscript." + error;
        }
        if (message.underline != null && message.hasOwnProperty("underline")) {
            var error = $root.ProtoBoxedBool.verify(message.underline);
            if (error)
                return "underline." + error;
        }
        if (message.strikethrough != null && message.hasOwnProperty("strikethrough")) {
            var error = $root.ProtoBoxedBool.verify(message.strikethrough);
            if (error)
                return "strikethrough." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoGraphicState message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoGraphicState
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoGraphicState} ProtoGraphicState
     */
    ProtoGraphicState.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoGraphicState)
            return object;
        var message = new $root.ProtoGraphicState();
        if (object.bold != null) {
            if (typeof object.bold !== "object")
                throw TypeError(".ProtoGraphicState.bold: object expected");
            message.bold = $root.ProtoBoxedBool.fromObject(object.bold);
        }
        if (object.italic != null) {
            if (typeof object.italic !== "object")
                throw TypeError(".ProtoGraphicState.italic: object expected");
            message.italic = $root.ProtoBoxedBool.fromObject(object.italic);
        }
        if (object.colorStack) {
            if (!Array.isArray(object.colorStack))
                throw TypeError(".ProtoGraphicState.colorStack: array expected");
            message.colorStack = [];
            for (var i = 0; i < object.colorStack.length; ++i) {
                if (typeof object.colorStack[i] !== "object")
                    throw TypeError(".ProtoGraphicState.colorStack: object expected");
                message.colorStack[i] = $root.ProtoColor.fromObject(object.colorStack[i]);
            }
        }
        if (object.subscript != null) {
            if (typeof object.subscript !== "object")
                throw TypeError(".ProtoGraphicState.subscript: object expected");
            message.subscript = $root.ProtoBoxedBool.fromObject(object.subscript);
        }
        if (object.superscript != null) {
            if (typeof object.superscript !== "object")
                throw TypeError(".ProtoGraphicState.superscript: object expected");
            message.superscript = $root.ProtoBoxedBool.fromObject(object.superscript);
        }
        if (object.underline != null) {
            if (typeof object.underline !== "object")
                throw TypeError(".ProtoGraphicState.underline: object expected");
            message.underline = $root.ProtoBoxedBool.fromObject(object.underline);
        }
        if (object.strikethrough != null) {
            if (typeof object.strikethrough !== "object")
                throw TypeError(".ProtoGraphicState.strikethrough: object expected");
            message.strikethrough = $root.ProtoBoxedBool.fromObject(object.strikethrough);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoGraphicState message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoGraphicState
     * @static
     * @param {ProtoGraphicState} message ProtoGraphicState
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoGraphicState.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.colorStack = [];
        if (options.defaults) {
            object.bold = null;
            object.italic = null;
            object.subscript = null;
            object.superscript = null;
            object.underline = null;
            object.strikethrough = null;
        }
        if (message.bold != null && message.hasOwnProperty("bold"))
            object.bold = $root.ProtoBoxedBool.toObject(message.bold, options);
        if (message.italic != null && message.hasOwnProperty("italic"))
            object.italic = $root.ProtoBoxedBool.toObject(message.italic, options);
        if (message.colorStack && message.colorStack.length) {
            object.colorStack = [];
            for (var j = 0; j < message.colorStack.length; ++j)
                object.colorStack[j] = $root.ProtoColor.toObject(message.colorStack[j], options);
        }
        if (message.subscript != null && message.hasOwnProperty("subscript"))
            object.subscript = $root.ProtoBoxedBool.toObject(message.subscript, options);
        if (message.superscript != null && message.hasOwnProperty("superscript"))
            object.superscript = $root.ProtoBoxedBool.toObject(message.superscript, options);
        if (message.underline != null && message.hasOwnProperty("underline"))
            object.underline = $root.ProtoBoxedBool.toObject(message.underline, options);
        if (message.strikethrough != null && message.hasOwnProperty("strikethrough"))
            object.strikethrough = $root.ProtoBoxedBool.toObject(message.strikethrough, options);
        return object;
    };

    /**
     * Converts this ProtoGraphicState to JSON.
     * @function toJSON
     * @memberof ProtoGraphicState
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoGraphicState.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoGraphicState
     * @function getTypeUrl
     * @memberof ProtoGraphicState
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoGraphicState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoGraphicState";
    };

    return ProtoGraphicState;
})();

$root.ProtoHtmlParser = (function() {

    /**
     * Properties of a ProtoHtmlParser.
     * @name IProtoHtmlParser
     * @interface IProtoHtmlParser
     */

    /**
     * Constructs a new ProtoHtmlParser.
     * @name ProtoHtmlParser
     * @classdesc Represents a ProtoHtmlParser.
     * @implements IProtoHtmlParser
     * @constructor
     * @param {IProtoHtmlParser=} [properties] Properties to set
     */
    function ProtoHtmlParser(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new ProtoHtmlParser instance using the specified properties.
     * @function create
     * @memberof ProtoHtmlParser
     * @static
     * @param {IProtoHtmlParser=} [properties] Properties to set
     * @returns {ProtoHtmlParser} ProtoHtmlParser instance
     */
    ProtoHtmlParser.create = function create(properties) {
        return new ProtoHtmlParser(properties);
    };

    /**
     * Encodes the specified ProtoHtmlParser message. Does not implicitly {@link ProtoHtmlParser.verify|verify} messages.
     * @function encode
     * @memberof ProtoHtmlParser
     * @static
     * @param {IProtoHtmlParser} message ProtoHtmlParser message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoHtmlParser.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified ProtoHtmlParser message, length delimited. Does not implicitly {@link ProtoHtmlParser.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoHtmlParser
     * @static
     * @param {IProtoHtmlParser} message ProtoHtmlParser message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoHtmlParser.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoHtmlParser message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoHtmlParser
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoHtmlParser} ProtoHtmlParser
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoHtmlParser.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoHtmlParser();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoHtmlParser message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoHtmlParser
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoHtmlParser} ProtoHtmlParser
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoHtmlParser.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoHtmlParser message.
     * @function verify
     * @memberof ProtoHtmlParser
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoHtmlParser.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a ProtoHtmlParser message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoHtmlParser
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoHtmlParser} ProtoHtmlParser
     */
    ProtoHtmlParser.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoHtmlParser)
            return object;
        return new $root.ProtoHtmlParser();
    };

    /**
     * Creates a plain object from a ProtoHtmlParser message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoHtmlParser
     * @static
     * @param {ProtoHtmlParser} message ProtoHtmlParser
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoHtmlParser.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this ProtoHtmlParser to JSON.
     * @function toJSON
     * @memberof ProtoHtmlParser
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoHtmlParser.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoHtmlParser
     * @function getTypeUrl
     * @memberof ProtoHtmlParser
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoHtmlParser.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoHtmlParser";
    };

    return ProtoHtmlParser;
})();

/**
 * ProtoUnderlineMode enum.
 * @name ProtoUnderlineMode
 * @enum {number}
 * @property {number} DUMMY_UNDERLINE_MODE=0 DUMMY_UNDERLINE_MODE value
 * @property {number} WORDS_NO_BLANKS=1 WORDS_NO_BLANKS value
 * @property {number} WORDS_AND_BLANKS=2 WORDS_AND_BLANKS value
 * @property {number} CHARACTERS_NO_BLANKS=3 CHARACTERS_NO_BLANKS value
 * @property {number} CHARACTERS_AND_BLANKS=4 CHARACTERS_AND_BLANKS value
 */
$root.ProtoUnderlineMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "DUMMY_UNDERLINE_MODE"] = 0;
    values[valuesById[1] = "WORDS_NO_BLANKS"] = 1;
    values[valuesById[2] = "WORDS_AND_BLANKS"] = 2;
    values[valuesById[3] = "CHARACTERS_NO_BLANKS"] = 3;
    values[valuesById[4] = "CHARACTERS_AND_BLANKS"] = 4;
    return values;
})();

$root.ProtoUnderlineSpec = (function() {

    /**
     * Properties of a ProtoUnderlineSpec.
     * @name IProtoUnderlineSpec
     * @interface IProtoUnderlineSpec
     * @property {IProtoMeasure|null} [weight] ProtoUnderlineSpec weight
     * @property {ProtoUnderlineMode|null} [mode] ProtoUnderlineSpec mode
     * @property {IProtoColor|null} [color] ProtoUnderlineSpec color
     * @property {number|null} [offsetEm] ProtoUnderlineSpec offsetEm
     * @property {ProtoRuleStyle|null} [style] ProtoUnderlineSpec style
     */

    /**
     * Constructs a new ProtoUnderlineSpec.
     * @name ProtoUnderlineSpec
     * @classdesc Represents a ProtoUnderlineSpec.
     * @implements IProtoUnderlineSpec
     * @constructor
     * @param {IProtoUnderlineSpec=} [properties] Properties to set
     */
    function ProtoUnderlineSpec(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoUnderlineSpec weight.
     * @member {IProtoMeasure|null|undefined} weight
     * @memberof ProtoUnderlineSpec
     * @instance
     */
    ProtoUnderlineSpec.prototype.weight = null;

    /**
     * ProtoUnderlineSpec mode.
     * @member {ProtoUnderlineMode} mode
     * @memberof ProtoUnderlineSpec
     * @instance
     */
    ProtoUnderlineSpec.prototype.mode = 0;

    /**
     * ProtoUnderlineSpec color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoUnderlineSpec
     * @instance
     */
    ProtoUnderlineSpec.prototype.color = null;

    /**
     * ProtoUnderlineSpec offsetEm.
     * @member {number} offsetEm
     * @memberof ProtoUnderlineSpec
     * @instance
     */
    ProtoUnderlineSpec.prototype.offsetEm = 0;

    /**
     * ProtoUnderlineSpec style.
     * @member {ProtoRuleStyle} style
     * @memberof ProtoUnderlineSpec
     * @instance
     */
    ProtoUnderlineSpec.prototype.style = 0;

    /**
     * Creates a new ProtoUnderlineSpec instance using the specified properties.
     * @function create
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {IProtoUnderlineSpec=} [properties] Properties to set
     * @returns {ProtoUnderlineSpec} ProtoUnderlineSpec instance
     */
    ProtoUnderlineSpec.create = function create(properties) {
        return new ProtoUnderlineSpec(properties);
    };

    /**
     * Encodes the specified ProtoUnderlineSpec message. Does not implicitly {@link ProtoUnderlineSpec.verify|verify} messages.
     * @function encode
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {IProtoUnderlineSpec} message ProtoUnderlineSpec message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoUnderlineSpec.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.weight != null && Object.hasOwnProperty.call(message, "weight"))
            $root.ProtoMeasure.encode(message.weight, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mode);
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.offsetEm != null && Object.hasOwnProperty.call(message, "offsetEm"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.offsetEm);
        if (message.style != null && Object.hasOwnProperty.call(message, "style"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.style);
        return writer;
    };

    /**
     * Encodes the specified ProtoUnderlineSpec message, length delimited. Does not implicitly {@link ProtoUnderlineSpec.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {IProtoUnderlineSpec} message ProtoUnderlineSpec message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoUnderlineSpec.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoUnderlineSpec message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoUnderlineSpec} ProtoUnderlineSpec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoUnderlineSpec.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoUnderlineSpec();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.weight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.mode = reader.int32();
                    break;
                }
            case 3: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.offsetEm = reader.int32();
                    break;
                }
            case 5: {
                    message.style = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoUnderlineSpec message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoUnderlineSpec} ProtoUnderlineSpec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoUnderlineSpec.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoUnderlineSpec message.
     * @function verify
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoUnderlineSpec.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.weight != null && message.hasOwnProperty("weight")) {
            var error = $root.ProtoMeasure.verify(message.weight);
            if (error)
                return "weight." + error;
        }
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.offsetEm != null && message.hasOwnProperty("offsetEm"))
            if (!$util.isInteger(message.offsetEm))
                return "offsetEm: integer expected";
        if (message.style != null && message.hasOwnProperty("style"))
            switch (message.style) {
            default:
                return "style: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 254:
                break;
            }
        return null;
    };

    /**
     * Creates a ProtoUnderlineSpec message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoUnderlineSpec} ProtoUnderlineSpec
     */
    ProtoUnderlineSpec.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoUnderlineSpec)
            return object;
        var message = new $root.ProtoUnderlineSpec();
        if (object.weight != null) {
            if (typeof object.weight !== "object")
                throw TypeError(".ProtoUnderlineSpec.weight: object expected");
            message.weight = $root.ProtoMeasure.fromObject(object.weight);
        }
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "DUMMY_UNDERLINE_MODE":
        case 0:
            message.mode = 0;
            break;
        case "WORDS_NO_BLANKS":
        case 1:
            message.mode = 1;
            break;
        case "WORDS_AND_BLANKS":
        case 2:
            message.mode = 2;
            break;
        case "CHARACTERS_NO_BLANKS":
        case 3:
            message.mode = 3;
            break;
        case "CHARACTERS_AND_BLANKS":
        case 4:
            message.mode = 4;
            break;
        }
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoUnderlineSpec.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.offsetEm != null)
            message.offsetEm = object.offsetEm | 0;
        switch (object.style) {
        default:
            if (typeof object.style === "number") {
                message.style = object.style;
                break;
            }
            break;
        case "DUMMY_RULE_STYLE":
        case 0:
            message.style = 0;
            break;
        case "SOLID":
        case 1:
            message.style = 1;
            break;
        case "SPARSE_SHADING":
        case 2:
            message.style = 2;
            break;
        case "MEDIUM_SHADING":
        case 3:
            message.style = 3;
            break;
        case "DENSE_SHADING":
        case 4:
            message.style = 4;
            break;
        case "LIGHT_DOTTED":
        case 5:
            message.style = 5;
            break;
        case "MEDIUM_DOTTED":
        case 6:
            message.style = 6;
            break;
        case "HEAVY_DOTTED":
        case 7:
            message.style = 7;
            break;
        case "LIGHT_DASHED":
        case 8:
            message.style = 8;
            break;
        case "MEDIUM_DASHED":
        case 9:
            message.style = 9;
            break;
        case "HEAVY_DASHED":
        case 10:
            message.style = 10;
            break;
        case "DASH_PATTERN":
        case 11:
            message.style = 11;
            break;
        case "DOUBLE":
        case 254:
            message.style = 254;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoUnderlineSpec message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {ProtoUnderlineSpec} message ProtoUnderlineSpec
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoUnderlineSpec.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.weight = null;
            object.mode = options.enums === String ? "DUMMY_UNDERLINE_MODE" : 0;
            object.color = null;
            object.offsetEm = 0;
            object.style = options.enums === String ? "DUMMY_RULE_STYLE" : 0;
        }
        if (message.weight != null && message.hasOwnProperty("weight"))
            object.weight = $root.ProtoMeasure.toObject(message.weight, options);
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.ProtoUnderlineMode[message.mode] === undefined ? message.mode : $root.ProtoUnderlineMode[message.mode] : message.mode;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.offsetEm != null && message.hasOwnProperty("offsetEm"))
            object.offsetEm = message.offsetEm;
        if (message.style != null && message.hasOwnProperty("style"))
            object.style = options.enums === String ? $root.ProtoRuleStyle[message.style] === undefined ? message.style : $root.ProtoRuleStyle[message.style] : message.style;
        return object;
    };

    /**
     * Converts this ProtoUnderlineSpec to JSON.
     * @function toJSON
     * @memberof ProtoUnderlineSpec
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoUnderlineSpec.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoUnderlineSpec
     * @function getTypeUrl
     * @memberof ProtoUnderlineSpec
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoUnderlineSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoUnderlineSpec";
    };

    return ProtoUnderlineSpec;
})();

$root.ProtoBoxedUnderlineSpec = (function() {

    /**
     * Properties of a ProtoBoxedUnderlineSpec.
     * @name IProtoBoxedUnderlineSpec
     * @interface IProtoBoxedUnderlineSpec
     * @property {IProtoUnderlineSpec|null} [value] ProtoBoxedUnderlineSpec value
     * @property {boolean|null} [isNull] ProtoBoxedUnderlineSpec isNull
     */

    /**
     * Constructs a new ProtoBoxedUnderlineSpec.
     * @name ProtoBoxedUnderlineSpec
     * @classdesc Represents a ProtoBoxedUnderlineSpec.
     * @implements IProtoBoxedUnderlineSpec
     * @constructor
     * @param {IProtoBoxedUnderlineSpec=} [properties] Properties to set
     */
    function ProtoBoxedUnderlineSpec(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedUnderlineSpec value.
     * @member {IProtoUnderlineSpec|null|undefined} value
     * @memberof ProtoBoxedUnderlineSpec
     * @instance
     */
    ProtoBoxedUnderlineSpec.prototype.value = null;

    /**
     * ProtoBoxedUnderlineSpec isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedUnderlineSpec
     * @instance
     */
    ProtoBoxedUnderlineSpec.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedUnderlineSpec instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {IProtoBoxedUnderlineSpec=} [properties] Properties to set
     * @returns {ProtoBoxedUnderlineSpec} ProtoBoxedUnderlineSpec instance
     */
    ProtoBoxedUnderlineSpec.create = function create(properties) {
        return new ProtoBoxedUnderlineSpec(properties);
    };

    /**
     * Encodes the specified ProtoBoxedUnderlineSpec message. Does not implicitly {@link ProtoBoxedUnderlineSpec.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {IProtoBoxedUnderlineSpec} message ProtoBoxedUnderlineSpec message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedUnderlineSpec.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            $root.ProtoUnderlineSpec.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedUnderlineSpec message, length delimited. Does not implicitly {@link ProtoBoxedUnderlineSpec.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {IProtoBoxedUnderlineSpec} message ProtoBoxedUnderlineSpec message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedUnderlineSpec.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedUnderlineSpec message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedUnderlineSpec} ProtoBoxedUnderlineSpec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedUnderlineSpec.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedUnderlineSpec();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = $root.ProtoUnderlineSpec.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedUnderlineSpec message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedUnderlineSpec} ProtoBoxedUnderlineSpec
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedUnderlineSpec.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedUnderlineSpec message.
     * @function verify
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedUnderlineSpec.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value")) {
            var error = $root.ProtoUnderlineSpec.verify(message.value);
            if (error)
                return "value." + error;
        }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedUnderlineSpec message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedUnderlineSpec} ProtoBoxedUnderlineSpec
     */
    ProtoBoxedUnderlineSpec.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedUnderlineSpec)
            return object;
        var message = new $root.ProtoBoxedUnderlineSpec();
        if (object.value != null) {
            if (typeof object.value !== "object")
                throw TypeError(".ProtoBoxedUnderlineSpec.value: object expected");
            message.value = $root.ProtoUnderlineSpec.fromObject(object.value);
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedUnderlineSpec message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {ProtoBoxedUnderlineSpec} message ProtoBoxedUnderlineSpec
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedUnderlineSpec.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = null;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = $root.ProtoUnderlineSpec.toObject(message.value, options);
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedUnderlineSpec to JSON.
     * @function toJSON
     * @memberof ProtoBoxedUnderlineSpec
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedUnderlineSpec.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedUnderlineSpec
     * @function getTypeUrl
     * @memberof ProtoBoxedUnderlineSpec
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedUnderlineSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedUnderlineSpec";
    };

    return ProtoBoxedUnderlineSpec;
})();

$root.ProtoCropSettings = (function() {

    /**
     * Properties of a ProtoCropSettings.
     * @name IProtoCropSettings
     * @interface IProtoCropSettings
     * @property {IProtoBoxedMeasure|null} [x] ProtoCropSettings x
     * @property {IProtoBoxedMeasure|null} [y] ProtoCropSettings y
     * @property {IProtoBoxedMeasure|null} [width] ProtoCropSettings width
     * @property {IProtoBoxedMeasure|null} [height] ProtoCropSettings height
     */

    /**
     * Constructs a new ProtoCropSettings.
     * @name ProtoCropSettings
     * @classdesc Represents a ProtoCropSettings.
     * @implements IProtoCropSettings
     * @constructor
     * @param {IProtoCropSettings=} [properties] Properties to set
     */
    function ProtoCropSettings(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoCropSettings x.
     * @member {IProtoBoxedMeasure|null|undefined} x
     * @memberof ProtoCropSettings
     * @instance
     */
    ProtoCropSettings.prototype.x = null;

    /**
     * ProtoCropSettings y.
     * @member {IProtoBoxedMeasure|null|undefined} y
     * @memberof ProtoCropSettings
     * @instance
     */
    ProtoCropSettings.prototype.y = null;

    /**
     * ProtoCropSettings width.
     * @member {IProtoBoxedMeasure|null|undefined} width
     * @memberof ProtoCropSettings
     * @instance
     */
    ProtoCropSettings.prototype.width = null;

    /**
     * ProtoCropSettings height.
     * @member {IProtoBoxedMeasure|null|undefined} height
     * @memberof ProtoCropSettings
     * @instance
     */
    ProtoCropSettings.prototype.height = null;

    /**
     * Creates a new ProtoCropSettings instance using the specified properties.
     * @function create
     * @memberof ProtoCropSettings
     * @static
     * @param {IProtoCropSettings=} [properties] Properties to set
     * @returns {ProtoCropSettings} ProtoCropSettings instance
     */
    ProtoCropSettings.create = function create(properties) {
        return new ProtoCropSettings(properties);
    };

    /**
     * Encodes the specified ProtoCropSettings message. Does not implicitly {@link ProtoCropSettings.verify|verify} messages.
     * @function encode
     * @memberof ProtoCropSettings
     * @static
     * @param {IProtoCropSettings} message ProtoCropSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCropSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.x != null && Object.hasOwnProperty.call(message, "x"))
            $root.ProtoBoxedMeasure.encode(message.x, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.y != null && Object.hasOwnProperty.call(message, "y"))
            $root.ProtoBoxedMeasure.encode(message.y, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoBoxedMeasure.encode(message.width, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
            $root.ProtoBoxedMeasure.encode(message.height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoCropSettings message, length delimited. Does not implicitly {@link ProtoCropSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoCropSettings
     * @static
     * @param {IProtoCropSettings} message ProtoCropSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCropSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoCropSettings message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoCropSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoCropSettings} ProtoCropSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCropSettings.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoCropSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.x = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.y = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.width = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.height = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoCropSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoCropSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoCropSettings} ProtoCropSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCropSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoCropSettings message.
     * @function verify
     * @memberof ProtoCropSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoCropSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.x != null && message.hasOwnProperty("x")) {
            var error = $root.ProtoBoxedMeasure.verify(message.x);
            if (error)
                return "x." + error;
        }
        if (message.y != null && message.hasOwnProperty("y")) {
            var error = $root.ProtoBoxedMeasure.verify(message.y);
            if (error)
                return "y." + error;
        }
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoBoxedMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.height != null && message.hasOwnProperty("height")) {
            var error = $root.ProtoBoxedMeasure.verify(message.height);
            if (error)
                return "height." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoCropSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoCropSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoCropSettings} ProtoCropSettings
     */
    ProtoCropSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoCropSettings)
            return object;
        var message = new $root.ProtoCropSettings();
        if (object.x != null) {
            if (typeof object.x !== "object")
                throw TypeError(".ProtoCropSettings.x: object expected");
            message.x = $root.ProtoBoxedMeasure.fromObject(object.x);
        }
        if (object.y != null) {
            if (typeof object.y !== "object")
                throw TypeError(".ProtoCropSettings.y: object expected");
            message.y = $root.ProtoBoxedMeasure.fromObject(object.y);
        }
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoCropSettings.width: object expected");
            message.width = $root.ProtoBoxedMeasure.fromObject(object.width);
        }
        if (object.height != null) {
            if (typeof object.height !== "object")
                throw TypeError(".ProtoCropSettings.height: object expected");
            message.height = $root.ProtoBoxedMeasure.fromObject(object.height);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoCropSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoCropSettings
     * @static
     * @param {ProtoCropSettings} message ProtoCropSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoCropSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.x = null;
            object.y = null;
            object.width = null;
            object.height = null;
        }
        if (message.x != null && message.hasOwnProperty("x"))
            object.x = $root.ProtoBoxedMeasure.toObject(message.x, options);
        if (message.y != null && message.hasOwnProperty("y"))
            object.y = $root.ProtoBoxedMeasure.toObject(message.y, options);
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoBoxedMeasure.toObject(message.width, options);
        if (message.height != null && message.hasOwnProperty("height"))
            object.height = $root.ProtoBoxedMeasure.toObject(message.height, options);
        return object;
    };

    /**
     * Converts this ProtoCropSettings to JSON.
     * @function toJSON
     * @memberof ProtoCropSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoCropSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoCropSettings
     * @function getTypeUrl
     * @memberof ProtoCropSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoCropSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoCropSettings";
    };

    return ProtoCropSettings;
})();

$root.ProtoFlipSettings = (function() {

    /**
     * Properties of a ProtoFlipSettings.
     * @name IProtoFlipSettings
     * @interface IProtoFlipSettings
     * @property {boolean|null} [x] ProtoFlipSettings x
     * @property {boolean|null} [y] ProtoFlipSettings y
     */

    /**
     * Constructs a new ProtoFlipSettings.
     * @name ProtoFlipSettings
     * @classdesc Represents a ProtoFlipSettings.
     * @implements IProtoFlipSettings
     * @constructor
     * @param {IProtoFlipSettings=} [properties] Properties to set
     */
    function ProtoFlipSettings(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoFlipSettings x.
     * @member {boolean} x
     * @memberof ProtoFlipSettings
     * @instance
     */
    ProtoFlipSettings.prototype.x = false;

    /**
     * ProtoFlipSettings y.
     * @member {boolean} y
     * @memberof ProtoFlipSettings
     * @instance
     */
    ProtoFlipSettings.prototype.y = false;

    /**
     * Creates a new ProtoFlipSettings instance using the specified properties.
     * @function create
     * @memberof ProtoFlipSettings
     * @static
     * @param {IProtoFlipSettings=} [properties] Properties to set
     * @returns {ProtoFlipSettings} ProtoFlipSettings instance
     */
    ProtoFlipSettings.create = function create(properties) {
        return new ProtoFlipSettings(properties);
    };

    /**
     * Encodes the specified ProtoFlipSettings message. Does not implicitly {@link ProtoFlipSettings.verify|verify} messages.
     * @function encode
     * @memberof ProtoFlipSettings
     * @static
     * @param {IProtoFlipSettings} message ProtoFlipSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoFlipSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.x != null && Object.hasOwnProperty.call(message, "x"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.x);
        if (message.y != null && Object.hasOwnProperty.call(message, "y"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.y);
        return writer;
    };

    /**
     * Encodes the specified ProtoFlipSettings message, length delimited. Does not implicitly {@link ProtoFlipSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoFlipSettings
     * @static
     * @param {IProtoFlipSettings} message ProtoFlipSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoFlipSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoFlipSettings message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoFlipSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoFlipSettings} ProtoFlipSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoFlipSettings.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoFlipSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.x = reader.bool();
                    break;
                }
            case 2: {
                    message.y = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoFlipSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoFlipSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoFlipSettings} ProtoFlipSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoFlipSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoFlipSettings message.
     * @function verify
     * @memberof ProtoFlipSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoFlipSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.x != null && message.hasOwnProperty("x"))
            if (typeof message.x !== "boolean")
                return "x: boolean expected";
        if (message.y != null && message.hasOwnProperty("y"))
            if (typeof message.y !== "boolean")
                return "y: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoFlipSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoFlipSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoFlipSettings} ProtoFlipSettings
     */
    ProtoFlipSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoFlipSettings)
            return object;
        var message = new $root.ProtoFlipSettings();
        if (object.x != null)
            message.x = Boolean(object.x);
        if (object.y != null)
            message.y = Boolean(object.y);
        return message;
    };

    /**
     * Creates a plain object from a ProtoFlipSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoFlipSettings
     * @static
     * @param {ProtoFlipSettings} message ProtoFlipSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoFlipSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.x = false;
            object.y = false;
        }
        if (message.x != null && message.hasOwnProperty("x"))
            object.x = message.x;
        if (message.y != null && message.hasOwnProperty("y"))
            object.y = message.y;
        return object;
    };

    /**
     * Converts this ProtoFlipSettings to JSON.
     * @function toJSON
     * @memberof ProtoFlipSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoFlipSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoFlipSettings
     * @function getTypeUrl
     * @memberof ProtoFlipSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoFlipSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoFlipSettings";
    };

    return ProtoFlipSettings;
})();

/**
 * ProtoImageReferencePoint enum.
 * @name ProtoImageReferencePoint
 * @enum {number}
 * @property {number} REF_POINT_DO_NOT_USE_AT_ALL=0 REF_POINT_DO_NOT_USE_AT_ALL value
 * @property {number} REF_POINT_BOTTOM_LEFT=1 REF_POINT_BOTTOM_LEFT value
 * @property {number} REF_POINT_TOP_LEFT=2 REF_POINT_TOP_LEFT value
 * @property {number} REF_POINT_CENTER=3 REF_POINT_CENTER value
 * @property {number} REF_POINT_BOTTOM_RIGHT=4 REF_POINT_BOTTOM_RIGHT value
 * @property {number} REF_POINT_TOP_RIGHT=5 REF_POINT_TOP_RIGHT value
 */
$root.ProtoImageReferencePoint = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "REF_POINT_DO_NOT_USE_AT_ALL"] = 0;
    values[valuesById[1] = "REF_POINT_BOTTOM_LEFT"] = 1;
    values[valuesById[2] = "REF_POINT_TOP_LEFT"] = 2;
    values[valuesById[3] = "REF_POINT_CENTER"] = 3;
    values[valuesById[4] = "REF_POINT_BOTTOM_RIGHT"] = 4;
    values[valuesById[5] = "REF_POINT_TOP_RIGHT"] = 5;
    return values;
})();

/**
 * ProtoSemanticType enum.
 * @name ProtoSemanticType
 * @enum {number}
 * @property {number} SEMANTIC_TYPE_NONE=0 SEMANTIC_TYPE_NONE value
 * @property {number} SEMANTIC_TYPE_PART=1 SEMANTIC_TYPE_PART value
 * @property {number} SEMANTIC_TYPE_ART=2 SEMANTIC_TYPE_ART value
 * @property {number} SEMANTIC_TYPE_SECT=3 SEMANTIC_TYPE_SECT value
 * @property {number} SEMANTIC_TYPE_DIV=4 SEMANTIC_TYPE_DIV value
 */
$root.ProtoSemanticType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "SEMANTIC_TYPE_NONE"] = 0;
    values[valuesById[1] = "SEMANTIC_TYPE_PART"] = 1;
    values[valuesById[2] = "SEMANTIC_TYPE_ART"] = 2;
    values[valuesById[3] = "SEMANTIC_TYPE_SECT"] = 3;
    values[valuesById[4] = "SEMANTIC_TYPE_DIV"] = 4;
    return values;
})();

$root.ProtoOption = (function() {

    /**
     * Properties of a ProtoOption.
     * @name IProtoOption
     * @interface IProtoOption
     * @property {string|null} [key] ProtoOption key
     * @property {string|null} [value] ProtoOption value
     */

    /**
     * Constructs a new ProtoOption.
     * @name ProtoOption
     * @classdesc Represents a ProtoOption.
     * @implements IProtoOption
     * @constructor
     * @param {IProtoOption=} [properties] Properties to set
     */
    function ProtoOption(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoOption key.
     * @member {string} key
     * @memberof ProtoOption
     * @instance
     */
    ProtoOption.prototype.key = "";

    /**
     * ProtoOption value.
     * @member {string} value
     * @memberof ProtoOption
     * @instance
     */
    ProtoOption.prototype.value = "";

    /**
     * Creates a new ProtoOption instance using the specified properties.
     * @function create
     * @memberof ProtoOption
     * @static
     * @param {IProtoOption=} [properties] Properties to set
     * @returns {ProtoOption} ProtoOption instance
     */
    ProtoOption.create = function create(properties) {
        return new ProtoOption(properties);
    };

    /**
     * Encodes the specified ProtoOption message. Does not implicitly {@link ProtoOption.verify|verify} messages.
     * @function encode
     * @memberof ProtoOption
     * @static
     * @param {IProtoOption} message ProtoOption message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoOption.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
        return writer;
    };

    /**
     * Encodes the specified ProtoOption message, length delimited. Does not implicitly {@link ProtoOption.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoOption
     * @static
     * @param {IProtoOption} message ProtoOption message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoOption.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoOption message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoOption
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoOption} ProtoOption
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoOption.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoOption();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.string();
                    break;
                }
            case 2: {
                    message.value = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoOption message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoOption
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoOption} ProtoOption
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoOption.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoOption message.
     * @function verify
     * @memberof ProtoOption
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoOption.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isString(message.key))
                return "key: string expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isString(message.value))
                return "value: string expected";
        return null;
    };

    /**
     * Creates a ProtoOption message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoOption
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoOption} ProtoOption
     */
    ProtoOption.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoOption)
            return object;
        var message = new $root.ProtoOption();
        if (object.key != null)
            message.key = String(object.key);
        if (object.value != null)
            message.value = String(object.value);
        return message;
    };

    /**
     * Creates a plain object from a ProtoOption message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoOption
     * @static
     * @param {ProtoOption} message ProtoOption
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoOption.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = "";
            object.value = "";
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        return object;
    };

    /**
     * Converts this ProtoOption to JSON.
     * @function toJSON
     * @memberof ProtoOption
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoOption.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoOption
     * @function getTypeUrl
     * @memberof ProtoOption
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoOption";
    };

    return ProtoOption;
})();

/**
 * PDFPrintingBehavior enum.
 * @name PDFPrintingBehavior
 * @enum {number}
 * @property {number} PDF_PRINTING_BEHAVIOR_INPUT=0 PDF_PRINTING_BEHAVIOR_INPUT value
 * @property {number} PDF_PRINTING_BEHAVIOR_TEXT=1 PDF_PRINTING_BEHAVIOR_TEXT value
 * @property {number} PDF_PRINTING_BEHAVIOR_INHERIT=2 PDF_PRINTING_BEHAVIOR_INHERIT value
 */
$root.PDFPrintingBehavior = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "PDF_PRINTING_BEHAVIOR_INPUT"] = 0;
    values[valuesById[1] = "PDF_PRINTING_BEHAVIOR_TEXT"] = 1;
    values[valuesById[2] = "PDF_PRINTING_BEHAVIOR_INHERIT"] = 2;
    return values;
})();

$root.ProtoBaseInputField = (function() {

    /**
     * Properties of a ProtoBaseInputField.
     * @name IProtoBaseInputField
     * @interface IProtoBaseInputField
     * @property {string|null} [name] ProtoBaseInputField name
     * @property {boolean|null} [meta] ProtoBaseInputField meta
     * @property {IProtoBoxedString|null} [value] ProtoBaseInputField value
     * @property {string|null} [formatUUID] ProtoBaseInputField formatUUID
     * @property {string|null} [dataTypeUUID] ProtoBaseInputField dataTypeUUID
     * @property {string|null} [onChangeCode] ProtoBaseInputField onChangeCode
     * @property {string|null} [placeholder] ProtoBaseInputField placeholder
     * @property {boolean|null} [bindDefaultValue] ProtoBaseInputField bindDefaultValue
     * @property {string|null} [defaultValueCode] ProtoBaseInputField defaultValueCode
     * @property {boolean|null} [readonly] ProtoBaseInputField readonly
     */

    /**
     * Constructs a new ProtoBaseInputField.
     * @name ProtoBaseInputField
     * @classdesc Represents a ProtoBaseInputField.
     * @implements IProtoBaseInputField
     * @constructor
     * @param {IProtoBaseInputField=} [properties] Properties to set
     */
    function ProtoBaseInputField(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBaseInputField name.
     * @member {string} name
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.name = "";

    /**
     * ProtoBaseInputField meta.
     * @member {boolean} meta
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.meta = false;

    /**
     * ProtoBaseInputField value.
     * @member {IProtoBoxedString|null|undefined} value
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.value = null;

    /**
     * ProtoBaseInputField formatUUID.
     * @member {string} formatUUID
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.formatUUID = "";

    /**
     * ProtoBaseInputField dataTypeUUID.
     * @member {string} dataTypeUUID
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.dataTypeUUID = "";

    /**
     * ProtoBaseInputField onChangeCode.
     * @member {string} onChangeCode
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.onChangeCode = "";

    /**
     * ProtoBaseInputField placeholder.
     * @member {string} placeholder
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.placeholder = "";

    /**
     * ProtoBaseInputField bindDefaultValue.
     * @member {boolean} bindDefaultValue
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.bindDefaultValue = false;

    /**
     * ProtoBaseInputField defaultValueCode.
     * @member {string} defaultValueCode
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.defaultValueCode = "";

    /**
     * ProtoBaseInputField readonly.
     * @member {boolean} readonly
     * @memberof ProtoBaseInputField
     * @instance
     */
    ProtoBaseInputField.prototype.readonly = false;

    /**
     * Creates a new ProtoBaseInputField instance using the specified properties.
     * @function create
     * @memberof ProtoBaseInputField
     * @static
     * @param {IProtoBaseInputField=} [properties] Properties to set
     * @returns {ProtoBaseInputField} ProtoBaseInputField instance
     */
    ProtoBaseInputField.create = function create(properties) {
        return new ProtoBaseInputField(properties);
    };

    /**
     * Encodes the specified ProtoBaseInputField message. Does not implicitly {@link ProtoBaseInputField.verify|verify} messages.
     * @function encode
     * @memberof ProtoBaseInputField
     * @static
     * @param {IProtoBaseInputField} message ProtoBaseInputField message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBaseInputField.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        if (message.meta != null && Object.hasOwnProperty.call(message, "meta"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.meta);
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            $root.ProtoBoxedString.encode(message.value, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.formatUUID != null && Object.hasOwnProperty.call(message, "formatUUID"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.formatUUID);
        if (message.dataTypeUUID != null && Object.hasOwnProperty.call(message, "dataTypeUUID"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.dataTypeUUID);
        if (message.onChangeCode != null && Object.hasOwnProperty.call(message, "onChangeCode"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.onChangeCode);
        if (message.placeholder != null && Object.hasOwnProperty.call(message, "placeholder"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.placeholder);
        if (message.bindDefaultValue != null && Object.hasOwnProperty.call(message, "bindDefaultValue"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.bindDefaultValue);
        if (message.defaultValueCode != null && Object.hasOwnProperty.call(message, "defaultValueCode"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.defaultValueCode);
        if (message.readonly != null && Object.hasOwnProperty.call(message, "readonly"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.readonly);
        return writer;
    };

    /**
     * Encodes the specified ProtoBaseInputField message, length delimited. Does not implicitly {@link ProtoBaseInputField.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBaseInputField
     * @static
     * @param {IProtoBaseInputField} message ProtoBaseInputField message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBaseInputField.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBaseInputField message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBaseInputField
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBaseInputField} ProtoBaseInputField
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBaseInputField.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBaseInputField();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.name = reader.string();
                    break;
                }
            case 2: {
                    message.meta = reader.bool();
                    break;
                }
            case 3: {
                    message.value = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.formatUUID = reader.string();
                    break;
                }
            case 5: {
                    message.dataTypeUUID = reader.string();
                    break;
                }
            case 6: {
                    message.onChangeCode = reader.string();
                    break;
                }
            case 7: {
                    message.placeholder = reader.string();
                    break;
                }
            case 8: {
                    message.bindDefaultValue = reader.bool();
                    break;
                }
            case 9: {
                    message.defaultValueCode = reader.string();
                    break;
                }
            case 10: {
                    message.readonly = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBaseInputField message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBaseInputField
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBaseInputField} ProtoBaseInputField
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBaseInputField.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBaseInputField message.
     * @function verify
     * @memberof ProtoBaseInputField
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBaseInputField.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.meta != null && message.hasOwnProperty("meta"))
            if (typeof message.meta !== "boolean")
                return "meta: boolean expected";
        if (message.value != null && message.hasOwnProperty("value")) {
            var error = $root.ProtoBoxedString.verify(message.value);
            if (error)
                return "value." + error;
        }
        if (message.formatUUID != null && message.hasOwnProperty("formatUUID"))
            if (!$util.isString(message.formatUUID))
                return "formatUUID: string expected";
        if (message.dataTypeUUID != null && message.hasOwnProperty("dataTypeUUID"))
            if (!$util.isString(message.dataTypeUUID))
                return "dataTypeUUID: string expected";
        if (message.onChangeCode != null && message.hasOwnProperty("onChangeCode"))
            if (!$util.isString(message.onChangeCode))
                return "onChangeCode: string expected";
        if (message.placeholder != null && message.hasOwnProperty("placeholder"))
            if (!$util.isString(message.placeholder))
                return "placeholder: string expected";
        if (message.bindDefaultValue != null && message.hasOwnProperty("bindDefaultValue"))
            if (typeof message.bindDefaultValue !== "boolean")
                return "bindDefaultValue: boolean expected";
        if (message.defaultValueCode != null && message.hasOwnProperty("defaultValueCode"))
            if (!$util.isString(message.defaultValueCode))
                return "defaultValueCode: string expected";
        if (message.readonly != null && message.hasOwnProperty("readonly"))
            if (typeof message.readonly !== "boolean")
                return "readonly: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBaseInputField message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBaseInputField
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBaseInputField} ProtoBaseInputField
     */
    ProtoBaseInputField.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBaseInputField)
            return object;
        var message = new $root.ProtoBaseInputField();
        if (object.name != null)
            message.name = String(object.name);
        if (object.meta != null)
            message.meta = Boolean(object.meta);
        if (object.value != null) {
            if (typeof object.value !== "object")
                throw TypeError(".ProtoBaseInputField.value: object expected");
            message.value = $root.ProtoBoxedString.fromObject(object.value);
        }
        if (object.formatUUID != null)
            message.formatUUID = String(object.formatUUID);
        if (object.dataTypeUUID != null)
            message.dataTypeUUID = String(object.dataTypeUUID);
        if (object.onChangeCode != null)
            message.onChangeCode = String(object.onChangeCode);
        if (object.placeholder != null)
            message.placeholder = String(object.placeholder);
        if (object.bindDefaultValue != null)
            message.bindDefaultValue = Boolean(object.bindDefaultValue);
        if (object.defaultValueCode != null)
            message.defaultValueCode = String(object.defaultValueCode);
        if (object.readonly != null)
            message.readonly = Boolean(object.readonly);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBaseInputField message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBaseInputField
     * @static
     * @param {ProtoBaseInputField} message ProtoBaseInputField
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBaseInputField.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = "";
            object.meta = false;
            object.value = null;
            object.formatUUID = "";
            object.dataTypeUUID = "";
            object.onChangeCode = "";
            object.placeholder = "";
            object.bindDefaultValue = false;
            object.defaultValueCode = "";
            object.readonly = false;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.meta != null && message.hasOwnProperty("meta"))
            object.meta = message.meta;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = $root.ProtoBoxedString.toObject(message.value, options);
        if (message.formatUUID != null && message.hasOwnProperty("formatUUID"))
            object.formatUUID = message.formatUUID;
        if (message.dataTypeUUID != null && message.hasOwnProperty("dataTypeUUID"))
            object.dataTypeUUID = message.dataTypeUUID;
        if (message.onChangeCode != null && message.hasOwnProperty("onChangeCode"))
            object.onChangeCode = message.onChangeCode;
        if (message.placeholder != null && message.hasOwnProperty("placeholder"))
            object.placeholder = message.placeholder;
        if (message.bindDefaultValue != null && message.hasOwnProperty("bindDefaultValue"))
            object.bindDefaultValue = message.bindDefaultValue;
        if (message.defaultValueCode != null && message.hasOwnProperty("defaultValueCode"))
            object.defaultValueCode = message.defaultValueCode;
        if (message.readonly != null && message.hasOwnProperty("readonly"))
            object.readonly = message.readonly;
        return object;
    };

    /**
     * Converts this ProtoBaseInputField to JSON.
     * @function toJSON
     * @memberof ProtoBaseInputField
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBaseInputField.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBaseInputField
     * @function getTypeUrl
     * @memberof ProtoBaseInputField
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBaseInputField.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBaseInputField";
    };

    return ProtoBaseInputField;
})();

/**
 * Inheritance enum.
 * @name Inheritance
 * @enum {number}
 * @property {number} INHERITANCE_INHERIT=0 INHERITANCE_INHERIT value
 * @property {number} INHERITANCE_CODE=1 INHERITANCE_CODE value
 * @property {number} INHERITANCE_BIND_CODE=2 INHERITANCE_BIND_CODE value
 * @property {number} INHERITANCE_STATIC=3 INHERITANCE_STATIC value
 * @property {number} INHERITANCE_RESET=4 INHERITANCE_RESET value
 */
$root.Inheritance = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "INHERITANCE_INHERIT"] = 0;
    values[valuesById[1] = "INHERITANCE_CODE"] = 1;
    values[valuesById[2] = "INHERITANCE_BIND_CODE"] = 2;
    values[valuesById[3] = "INHERITANCE_STATIC"] = 3;
    values[valuesById[4] = "INHERITANCE_RESET"] = 4;
    return values;
})();

$root.ProtoDocumentElement = (function() {

    /**
     * Properties of a ProtoDocumentElement.
     * @name IProtoDocumentElement
     * @interface IProtoDocumentElement
     * @property {IProtoDocumentElement|null} [parent] ProtoDocumentElement parent
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoDocumentElement comChannelUUIDs
     */

    /**
     * Constructs a new ProtoDocumentElement.
     * @name ProtoDocumentElement
     * @classdesc Represents a ProtoDocumentElement.
     * @implements IProtoDocumentElement
     * @constructor
     * @param {IProtoDocumentElement=} [properties] Properties to set
     */
    function ProtoDocumentElement(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoDocumentElement parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoDocumentElement
     * @instance
     */
    ProtoDocumentElement.prototype.parent = null;

    /**
     * ProtoDocumentElement comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoDocumentElement
     * @instance
     */
    ProtoDocumentElement.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoDocumentElement instance using the specified properties.
     * @function create
     * @memberof ProtoDocumentElement
     * @static
     * @param {IProtoDocumentElement=} [properties] Properties to set
     * @returns {ProtoDocumentElement} ProtoDocumentElement instance
     */
    ProtoDocumentElement.create = function create(properties) {
        return new ProtoDocumentElement(properties);
    };

    /**
     * Encodes the specified ProtoDocumentElement message. Does not implicitly {@link ProtoDocumentElement.verify|verify} messages.
     * @function encode
     * @memberof ProtoDocumentElement
     * @static
     * @param {IProtoDocumentElement} message ProtoDocumentElement message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDocumentElement.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoDocumentElement message, length delimited. Does not implicitly {@link ProtoDocumentElement.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoDocumentElement
     * @static
     * @param {IProtoDocumentElement} message ProtoDocumentElement message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDocumentElement.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoDocumentElement message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoDocumentElement
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoDocumentElement} ProtoDocumentElement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDocumentElement.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoDocumentElement();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoDocumentElement message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoDocumentElement
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoDocumentElement} ProtoDocumentElement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDocumentElement.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoDocumentElement message.
     * @function verify
     * @memberof ProtoDocumentElement
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoDocumentElement.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoDocumentElement message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoDocumentElement
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoDocumentElement} ProtoDocumentElement
     */
    ProtoDocumentElement.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoDocumentElement)
            return object;
        var message = new $root.ProtoDocumentElement();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoDocumentElement.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoDocumentElement.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoDocumentElement message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoDocumentElement
     * @static
     * @param {ProtoDocumentElement} message ProtoDocumentElement
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoDocumentElement.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults)
            object.parent = null;
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoDocumentElement to JSON.
     * @function toJSON
     * @memberof ProtoDocumentElement
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoDocumentElement.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoDocumentElement
     * @function getTypeUrl
     * @memberof ProtoDocumentElement
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoDocumentElement.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoDocumentElement";
    };

    return ProtoDocumentElement;
})();

$root.ProtoBranchDocumentElement = (function() {

    /**
     * Properties of a ProtoBranchDocumentElement.
     * @name IProtoBranchDocumentElement
     * @interface IProtoBranchDocumentElement
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoBranchDocumentElement _children
     * @property {IProtoDocumentElement|null} [parent] ProtoBranchDocumentElement parent
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoBranchDocumentElement comChannelUUIDs
     */

    /**
     * Constructs a new ProtoBranchDocumentElement.
     * @name ProtoBranchDocumentElement
     * @classdesc Represents a ProtoBranchDocumentElement.
     * @implements IProtoBranchDocumentElement
     * @constructor
     * @param {IProtoBranchDocumentElement=} [properties] Properties to set
     */
    function ProtoBranchDocumentElement(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBranchDocumentElement _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoBranchDocumentElement
     * @instance
     */
    ProtoBranchDocumentElement.prototype._children = $util.emptyArray;

    /**
     * ProtoBranchDocumentElement parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoBranchDocumentElement
     * @instance
     */
    ProtoBranchDocumentElement.prototype.parent = null;

    /**
     * ProtoBranchDocumentElement comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoBranchDocumentElement
     * @instance
     */
    ProtoBranchDocumentElement.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoBranchDocumentElement instance using the specified properties.
     * @function create
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {IProtoBranchDocumentElement=} [properties] Properties to set
     * @returns {ProtoBranchDocumentElement} ProtoBranchDocumentElement instance
     */
    ProtoBranchDocumentElement.create = function create(properties) {
        return new ProtoBranchDocumentElement(properties);
    };

    /**
     * Encodes the specified ProtoBranchDocumentElement message. Does not implicitly {@link ProtoBranchDocumentElement.verify|verify} messages.
     * @function encode
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {IProtoBranchDocumentElement} message ProtoBranchDocumentElement message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBranchDocumentElement.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoBranchDocumentElement message, length delimited. Does not implicitly {@link ProtoBranchDocumentElement.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {IProtoBranchDocumentElement} message ProtoBranchDocumentElement message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBranchDocumentElement.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBranchDocumentElement message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBranchDocumentElement} ProtoBranchDocumentElement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBranchDocumentElement.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBranchDocumentElement();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBranchDocumentElement message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBranchDocumentElement} ProtoBranchDocumentElement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBranchDocumentElement.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBranchDocumentElement message.
     * @function verify
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBranchDocumentElement.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoBranchDocumentElement message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBranchDocumentElement} ProtoBranchDocumentElement
     */
    ProtoBranchDocumentElement.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBranchDocumentElement)
            return object;
        var message = new $root.ProtoBranchDocumentElement();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoBranchDocumentElement._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoBranchDocumentElement._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoBranchDocumentElement.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoBranchDocumentElement.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoBranchDocumentElement message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {ProtoBranchDocumentElement} message ProtoBranchDocumentElement
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBranchDocumentElement.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults)
            object.parent = null;
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoBranchDocumentElement to JSON.
     * @function toJSON
     * @memberof ProtoBranchDocumentElement
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBranchDocumentElement.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBranchDocumentElement
     * @function getTypeUrl
     * @memberof ProtoBranchDocumentElement
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBranchDocumentElement.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBranchDocumentElement";
    };

    return ProtoBranchDocumentElement;
})();

$root.ProtoLink = (function() {

    /**
     * Properties of a ProtoLink.
     * @name IProtoLink
     * @interface IProtoLink
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoLink _children
     * @property {string|null} [url] ProtoLink url
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoLink comChannelUUIDs
     */

    /**
     * Constructs a new ProtoLink.
     * @name ProtoLink
     * @classdesc Represents a ProtoLink.
     * @implements IProtoLink
     * @constructor
     * @param {IProtoLink=} [properties] Properties to set
     */
    function ProtoLink(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoLink _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoLink
     * @instance
     */
    ProtoLink.prototype._children = $util.emptyArray;

    /**
     * ProtoLink url.
     * @member {string} url
     * @memberof ProtoLink
     * @instance
     */
    ProtoLink.prototype.url = "";

    /**
     * ProtoLink comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoLink
     * @instance
     */
    ProtoLink.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoLink instance using the specified properties.
     * @function create
     * @memberof ProtoLink
     * @static
     * @param {IProtoLink=} [properties] Properties to set
     * @returns {ProtoLink} ProtoLink instance
     */
    ProtoLink.create = function create(properties) {
        return new ProtoLink(properties);
    };

    /**
     * Encodes the specified ProtoLink message. Does not implicitly {@link ProtoLink.verify|verify} messages.
     * @function encode
     * @memberof ProtoLink
     * @static
     * @param {IProtoLink} message ProtoLink message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLink.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoLink message, length delimited. Does not implicitly {@link ProtoLink.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoLink
     * @static
     * @param {IProtoLink} message ProtoLink message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLink.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoLink message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoLink
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoLink} ProtoLink
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLink.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoLink();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.url = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoLink message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoLink
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoLink} ProtoLink
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLink.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoLink message.
     * @function verify
     * @memberof ProtoLink
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoLink.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.url != null && message.hasOwnProperty("url"))
            if (!$util.isString(message.url))
                return "url: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoLink message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoLink
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoLink} ProtoLink
     */
    ProtoLink.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoLink)
            return object;
        var message = new $root.ProtoLink();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoLink._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoLink._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.url != null)
            message.url = String(object.url);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoLink.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoLink message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoLink
     * @static
     * @param {ProtoLink} message ProtoLink
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoLink.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults)
            object.url = "";
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.url != null && message.hasOwnProperty("url"))
            object.url = message.url;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoLink to JSON.
     * @function toJSON
     * @memberof ProtoLink
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoLink.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoLink
     * @function getTypeUrl
     * @memberof ProtoLink
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoLink.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoLink";
    };

    return ProtoLink;
})();

/**
 * ProtoNumberType enum.
 * @name ProtoNumberType
 * @enum {number}
 * @property {number} ARABIC=0 ARABIC value
 * @property {number} ROM_UPPERCASE=1 ROM_UPPERCASE value
 * @property {number} ROM_LOWERCASE=2 ROM_LOWERCASE value
 * @property {number} LETTER_UPPERCASE=3 LETTER_UPPERCASE value
 * @property {number} LETTER_LOWERCASE=4 LETTER_LOWERCASE value
 */
$root.ProtoNumberType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ARABIC"] = 0;
    values[valuesById[1] = "ROM_UPPERCASE"] = 1;
    values[valuesById[2] = "ROM_LOWERCASE"] = 2;
    values[valuesById[3] = "LETTER_UPPERCASE"] = 3;
    values[valuesById[4] = "LETTER_LOWERCASE"] = 4;
    return values;
})();

/**
 * ProtoListLevelSettingType enum.
 * @name ProtoListLevelSettingType
 * @enum {number}
 * @property {number} UNNUMBERED=0 UNNUMBERED value
 * @property {number} NUMERIC=1 NUMERIC value
 * @property {number} IMAGE=2 IMAGE value
 */
$root.ProtoListLevelSettingType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "UNNUMBERED"] = 0;
    values[valuesById[1] = "NUMERIC"] = 1;
    values[valuesById[2] = "IMAGE"] = 2;
    return values;
})();

$root.ProtoListLevelSetting = (function() {

    /**
     * Properties of a ProtoListLevelSetting.
     * @name IProtoListLevelSetting
     * @interface IProtoListLevelSetting
     * @property {string|null} [listSettingName] ProtoListLevelSetting listSettingName
     * @property {IProtoBoxedUint32|null} [fontSize] ProtoListLevelSetting fontSize
     * @property {ProtoListLevelSettingType|null} [type] ProtoListLevelSetting type
     * @property {number|null} [level] ProtoListLevelSetting level
     * @property {string|null} [prefix] ProtoListLevelSetting prefix
     * @property {string|null} [suffix] ProtoListLevelSetting suffix
     * @property {IProtoFont|null} [fixFontFamily] ProtoListLevelSetting fixFontFamily
     * @property {boolean|null} [fixBold] ProtoListLevelSetting fixBold
     * @property {boolean|null} [fixItalic] ProtoListLevelSetting fixItalic
     * @property {number|null} [indentionWidth] ProtoListLevelSetting indentionWidth
     * @property {IProtoColor|null} [color] ProtoListLevelSetting color
     * @property {string|null} [imageName] ProtoListLevelSetting imageName
     * @property {IProtoFont|null} [fontFamily] ProtoListLevelSetting fontFamily
     * @property {IProtoBoxedBool|null} [bold] ProtoListLevelSetting bold
     * @property {IProtoBoxedBool|null} [italic] ProtoListLevelSetting italic
     * @property {ProtoNumberType|null} [numberType] ProtoListLevelSetting numberType
     * @property {string|null} [character] ProtoListLevelSetting character
     */

    /**
     * Constructs a new ProtoListLevelSetting.
     * @name ProtoListLevelSetting
     * @classdesc Represents a ProtoListLevelSetting.
     * @implements IProtoListLevelSetting
     * @constructor
     * @param {IProtoListLevelSetting=} [properties] Properties to set
     */
    function ProtoListLevelSetting(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoListLevelSetting listSettingName.
     * @member {string} listSettingName
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.listSettingName = "";

    /**
     * ProtoListLevelSetting fontSize.
     * @member {IProtoBoxedUint32|null|undefined} fontSize
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.fontSize = null;

    /**
     * ProtoListLevelSetting type.
     * @member {ProtoListLevelSettingType} type
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.type = 0;

    /**
     * ProtoListLevelSetting level.
     * @member {number} level
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.level = 0;

    /**
     * ProtoListLevelSetting prefix.
     * @member {string} prefix
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.prefix = "";

    /**
     * ProtoListLevelSetting suffix.
     * @member {string} suffix
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.suffix = "";

    /**
     * ProtoListLevelSetting fixFontFamily.
     * @member {IProtoFont|null|undefined} fixFontFamily
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.fixFontFamily = null;

    /**
     * ProtoListLevelSetting fixBold.
     * @member {boolean} fixBold
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.fixBold = false;

    /**
     * ProtoListLevelSetting fixItalic.
     * @member {boolean} fixItalic
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.fixItalic = false;

    /**
     * ProtoListLevelSetting indentionWidth.
     * @member {number} indentionWidth
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.indentionWidth = 0;

    /**
     * ProtoListLevelSetting color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.color = null;

    /**
     * ProtoListLevelSetting imageName.
     * @member {string} imageName
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.imageName = "";

    /**
     * ProtoListLevelSetting fontFamily.
     * @member {IProtoFont|null|undefined} fontFamily
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.fontFamily = null;

    /**
     * ProtoListLevelSetting bold.
     * @member {IProtoBoxedBool|null|undefined} bold
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.bold = null;

    /**
     * ProtoListLevelSetting italic.
     * @member {IProtoBoxedBool|null|undefined} italic
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.italic = null;

    /**
     * ProtoListLevelSetting numberType.
     * @member {ProtoNumberType} numberType
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.numberType = 0;

    /**
     * ProtoListLevelSetting character.
     * @member {string} character
     * @memberof ProtoListLevelSetting
     * @instance
     */
    ProtoListLevelSetting.prototype.character = "";

    /**
     * Creates a new ProtoListLevelSetting instance using the specified properties.
     * @function create
     * @memberof ProtoListLevelSetting
     * @static
     * @param {IProtoListLevelSetting=} [properties] Properties to set
     * @returns {ProtoListLevelSetting} ProtoListLevelSetting instance
     */
    ProtoListLevelSetting.create = function create(properties) {
        return new ProtoListLevelSetting(properties);
    };

    /**
     * Encodes the specified ProtoListLevelSetting message. Does not implicitly {@link ProtoListLevelSetting.verify|verify} messages.
     * @function encode
     * @memberof ProtoListLevelSetting
     * @static
     * @param {IProtoListLevelSetting} message ProtoListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoListLevelSetting.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.listSettingName != null && Object.hasOwnProperty.call(message, "listSettingName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.listSettingName);
        if (message.fontSize != null && Object.hasOwnProperty.call(message, "fontSize"))
            $root.ProtoBoxedUint32.encode(message.fontSize, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        if (message.level != null && Object.hasOwnProperty.call(message, "level"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
        if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.prefix);
        if (message.suffix != null && Object.hasOwnProperty.call(message, "suffix"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.suffix);
        if (message.fixFontFamily != null && Object.hasOwnProperty.call(message, "fixFontFamily"))
            $root.ProtoFont.encode(message.fixFontFamily, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.fixBold != null && Object.hasOwnProperty.call(message, "fixBold"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.fixBold);
        if (message.fixItalic != null && Object.hasOwnProperty.call(message, "fixItalic"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.fixItalic);
        if (message.indentionWidth != null && Object.hasOwnProperty.call(message, "indentionWidth"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.indentionWidth);
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.imageName != null && Object.hasOwnProperty.call(message, "imageName"))
            writer.uint32(/* id 12, wireType 2 =*/98).string(message.imageName);
        if (message.fontFamily != null && Object.hasOwnProperty.call(message, "fontFamily"))
            $root.ProtoFont.encode(message.fontFamily, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.bold != null && Object.hasOwnProperty.call(message, "bold"))
            $root.ProtoBoxedBool.encode(message.bold, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.italic != null && Object.hasOwnProperty.call(message, "italic"))
            $root.ProtoBoxedBool.encode(message.italic, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.numberType != null && Object.hasOwnProperty.call(message, "numberType"))
            writer.uint32(/* id 16, wireType 0 =*/128).int32(message.numberType);
        if (message.character != null && Object.hasOwnProperty.call(message, "character"))
            writer.uint32(/* id 17, wireType 2 =*/138).string(message.character);
        return writer;
    };

    /**
     * Encodes the specified ProtoListLevelSetting message, length delimited. Does not implicitly {@link ProtoListLevelSetting.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoListLevelSetting
     * @static
     * @param {IProtoListLevelSetting} message ProtoListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoListLevelSetting.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoListLevelSetting message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoListLevelSetting} ProtoListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoListLevelSetting.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoListLevelSetting();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.listSettingName = reader.string();
                    break;
                }
            case 2: {
                    message.fontSize = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.type = reader.int32();
                    break;
                }
            case 4: {
                    message.level = reader.int32();
                    break;
                }
            case 5: {
                    message.prefix = reader.string();
                    break;
                }
            case 6: {
                    message.suffix = reader.string();
                    break;
                }
            case 7: {
                    message.fixFontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.fixBold = reader.bool();
                    break;
                }
            case 9: {
                    message.fixItalic = reader.bool();
                    break;
                }
            case 10: {
                    message.indentionWidth = reader.int32();
                    break;
                }
            case 11: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.imageName = reader.string();
                    break;
                }
            case 13: {
                    message.fontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 14: {
                    message.bold = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 15: {
                    message.italic = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 16: {
                    message.numberType = reader.int32();
                    break;
                }
            case 17: {
                    message.character = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoListLevelSetting message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoListLevelSetting} ProtoListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoListLevelSetting.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoListLevelSetting message.
     * @function verify
     * @memberof ProtoListLevelSetting
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoListLevelSetting.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            if (!$util.isString(message.listSettingName))
                return "listSettingName: string expected";
        if (message.fontSize != null && message.hasOwnProperty("fontSize")) {
            var error = $root.ProtoBoxedUint32.verify(message.fontSize);
            if (error)
                return "fontSize." + error;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            if (!$util.isString(message.prefix))
                return "prefix: string expected";
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            if (!$util.isString(message.suffix))
                return "suffix: string expected";
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily")) {
            var error = $root.ProtoFont.verify(message.fixFontFamily);
            if (error)
                return "fixFontFamily." + error;
        }
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            if (typeof message.fixBold !== "boolean")
                return "fixBold: boolean expected";
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            if (typeof message.fixItalic !== "boolean")
                return "fixItalic: boolean expected";
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            if (!$util.isInteger(message.indentionWidth))
                return "indentionWidth: integer expected";
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.imageName != null && message.hasOwnProperty("imageName"))
            if (!$util.isString(message.imageName))
                return "imageName: string expected";
        if (message.fontFamily != null && message.hasOwnProperty("fontFamily")) {
            var error = $root.ProtoFont.verify(message.fontFamily);
            if (error)
                return "fontFamily." + error;
        }
        if (message.bold != null && message.hasOwnProperty("bold")) {
            var error = $root.ProtoBoxedBool.verify(message.bold);
            if (error)
                return "bold." + error;
        }
        if (message.italic != null && message.hasOwnProperty("italic")) {
            var error = $root.ProtoBoxedBool.verify(message.italic);
            if (error)
                return "italic." + error;
        }
        if (message.numberType != null && message.hasOwnProperty("numberType"))
            switch (message.numberType) {
            default:
                return "numberType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.character != null && message.hasOwnProperty("character"))
            if (!$util.isString(message.character))
                return "character: string expected";
        return null;
    };

    /**
     * Creates a ProtoListLevelSetting message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoListLevelSetting
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoListLevelSetting} ProtoListLevelSetting
     */
    ProtoListLevelSetting.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoListLevelSetting)
            return object;
        var message = new $root.ProtoListLevelSetting();
        if (object.listSettingName != null)
            message.listSettingName = String(object.listSettingName);
        if (object.fontSize != null) {
            if (typeof object.fontSize !== "object")
                throw TypeError(".ProtoListLevelSetting.fontSize: object expected");
            message.fontSize = $root.ProtoBoxedUint32.fromObject(object.fontSize);
        }
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "UNNUMBERED":
        case 0:
            message.type = 0;
            break;
        case "NUMERIC":
        case 1:
            message.type = 1;
            break;
        case "IMAGE":
        case 2:
            message.type = 2;
            break;
        }
        if (object.level != null)
            message.level = object.level | 0;
        if (object.prefix != null)
            message.prefix = String(object.prefix);
        if (object.suffix != null)
            message.suffix = String(object.suffix);
        if (object.fixFontFamily != null) {
            if (typeof object.fixFontFamily !== "object")
                throw TypeError(".ProtoListLevelSetting.fixFontFamily: object expected");
            message.fixFontFamily = $root.ProtoFont.fromObject(object.fixFontFamily);
        }
        if (object.fixBold != null)
            message.fixBold = Boolean(object.fixBold);
        if (object.fixItalic != null)
            message.fixItalic = Boolean(object.fixItalic);
        if (object.indentionWidth != null)
            message.indentionWidth = object.indentionWidth | 0;
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoListLevelSetting.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.imageName != null)
            message.imageName = String(object.imageName);
        if (object.fontFamily != null) {
            if (typeof object.fontFamily !== "object")
                throw TypeError(".ProtoListLevelSetting.fontFamily: object expected");
            message.fontFamily = $root.ProtoFont.fromObject(object.fontFamily);
        }
        if (object.bold != null) {
            if (typeof object.bold !== "object")
                throw TypeError(".ProtoListLevelSetting.bold: object expected");
            message.bold = $root.ProtoBoxedBool.fromObject(object.bold);
        }
        if (object.italic != null) {
            if (typeof object.italic !== "object")
                throw TypeError(".ProtoListLevelSetting.italic: object expected");
            message.italic = $root.ProtoBoxedBool.fromObject(object.italic);
        }
        switch (object.numberType) {
        default:
            if (typeof object.numberType === "number") {
                message.numberType = object.numberType;
                break;
            }
            break;
        case "ARABIC":
        case 0:
            message.numberType = 0;
            break;
        case "ROM_UPPERCASE":
        case 1:
            message.numberType = 1;
            break;
        case "ROM_LOWERCASE":
        case 2:
            message.numberType = 2;
            break;
        case "LETTER_UPPERCASE":
        case 3:
            message.numberType = 3;
            break;
        case "LETTER_LOWERCASE":
        case 4:
            message.numberType = 4;
            break;
        }
        if (object.character != null)
            message.character = String(object.character);
        return message;
    };

    /**
     * Creates a plain object from a ProtoListLevelSetting message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoListLevelSetting
     * @static
     * @param {ProtoListLevelSetting} message ProtoListLevelSetting
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoListLevelSetting.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.listSettingName = "";
            object.fontSize = null;
            object.type = options.enums === String ? "UNNUMBERED" : 0;
            object.level = 0;
            object.prefix = "";
            object.suffix = "";
            object.fixFontFamily = null;
            object.fixBold = false;
            object.fixItalic = false;
            object.indentionWidth = 0;
            object.color = null;
            object.imageName = "";
            object.fontFamily = null;
            object.bold = null;
            object.italic = null;
            object.numberType = options.enums === String ? "ARABIC" : 0;
            object.character = "";
        }
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            object.listSettingName = message.listSettingName;
        if (message.fontSize != null && message.hasOwnProperty("fontSize"))
            object.fontSize = $root.ProtoBoxedUint32.toObject(message.fontSize, options);
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoListLevelSettingType[message.type] === undefined ? message.type : $root.ProtoListLevelSettingType[message.type] : message.type;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            object.prefix = message.prefix;
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            object.suffix = message.suffix;
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily"))
            object.fixFontFamily = $root.ProtoFont.toObject(message.fixFontFamily, options);
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            object.fixBold = message.fixBold;
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            object.fixItalic = message.fixItalic;
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            object.indentionWidth = message.indentionWidth;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.imageName != null && message.hasOwnProperty("imageName"))
            object.imageName = message.imageName;
        if (message.fontFamily != null && message.hasOwnProperty("fontFamily"))
            object.fontFamily = $root.ProtoFont.toObject(message.fontFamily, options);
        if (message.bold != null && message.hasOwnProperty("bold"))
            object.bold = $root.ProtoBoxedBool.toObject(message.bold, options);
        if (message.italic != null && message.hasOwnProperty("italic"))
            object.italic = $root.ProtoBoxedBool.toObject(message.italic, options);
        if (message.numberType != null && message.hasOwnProperty("numberType"))
            object.numberType = options.enums === String ? $root.ProtoNumberType[message.numberType] === undefined ? message.numberType : $root.ProtoNumberType[message.numberType] : message.numberType;
        if (message.character != null && message.hasOwnProperty("character"))
            object.character = message.character;
        return object;
    };

    /**
     * Converts this ProtoListLevelSetting to JSON.
     * @function toJSON
     * @memberof ProtoListLevelSetting
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoListLevelSetting.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoListLevelSetting
     * @function getTypeUrl
     * @memberof ProtoListLevelSetting
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoListLevelSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoListLevelSetting";
    };

    return ProtoListLevelSetting;
})();

$root.ProtoImageListLevelSetting = (function() {

    /**
     * Properties of a ProtoImageListLevelSetting.
     * @name IProtoImageListLevelSetting
     * @interface IProtoImageListLevelSetting
     * @property {string|null} [listSettingName] ProtoImageListLevelSetting listSettingName
     * @property {IProtoBoxedUint32|null} [fontSize] ProtoImageListLevelSetting fontSize
     * @property {ProtoListLevelSettingType|null} [type] ProtoImageListLevelSetting type
     * @property {number|null} [level] ProtoImageListLevelSetting level
     * @property {string|null} [prefix] ProtoImageListLevelSetting prefix
     * @property {string|null} [suffix] ProtoImageListLevelSetting suffix
     * @property {IProtoFont|null} [fixFontFamily] ProtoImageListLevelSetting fixFontFamily
     * @property {boolean|null} [fixBold] ProtoImageListLevelSetting fixBold
     * @property {boolean|null} [fixItalic] ProtoImageListLevelSetting fixItalic
     * @property {number|null} [indentionWidth] ProtoImageListLevelSetting indentionWidth
     * @property {IProtoColor|null} [color] ProtoImageListLevelSetting color
     * @property {string|null} [imageName] ProtoImageListLevelSetting imageName
     */

    /**
     * Constructs a new ProtoImageListLevelSetting.
     * @name ProtoImageListLevelSetting
     * @classdesc Represents a ProtoImageListLevelSetting.
     * @implements IProtoImageListLevelSetting
     * @constructor
     * @param {IProtoImageListLevelSetting=} [properties] Properties to set
     */
    function ProtoImageListLevelSetting(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoImageListLevelSetting listSettingName.
     * @member {string} listSettingName
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.listSettingName = "";

    /**
     * ProtoImageListLevelSetting fontSize.
     * @member {IProtoBoxedUint32|null|undefined} fontSize
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.fontSize = null;

    /**
     * ProtoImageListLevelSetting type.
     * @member {ProtoListLevelSettingType} type
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.type = 0;

    /**
     * ProtoImageListLevelSetting level.
     * @member {number} level
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.level = 0;

    /**
     * ProtoImageListLevelSetting prefix.
     * @member {string} prefix
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.prefix = "";

    /**
     * ProtoImageListLevelSetting suffix.
     * @member {string} suffix
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.suffix = "";

    /**
     * ProtoImageListLevelSetting fixFontFamily.
     * @member {IProtoFont|null|undefined} fixFontFamily
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.fixFontFamily = null;

    /**
     * ProtoImageListLevelSetting fixBold.
     * @member {boolean} fixBold
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.fixBold = false;

    /**
     * ProtoImageListLevelSetting fixItalic.
     * @member {boolean} fixItalic
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.fixItalic = false;

    /**
     * ProtoImageListLevelSetting indentionWidth.
     * @member {number} indentionWidth
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.indentionWidth = 0;

    /**
     * ProtoImageListLevelSetting color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.color = null;

    /**
     * ProtoImageListLevelSetting imageName.
     * @member {string} imageName
     * @memberof ProtoImageListLevelSetting
     * @instance
     */
    ProtoImageListLevelSetting.prototype.imageName = "";

    /**
     * Creates a new ProtoImageListLevelSetting instance using the specified properties.
     * @function create
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {IProtoImageListLevelSetting=} [properties] Properties to set
     * @returns {ProtoImageListLevelSetting} ProtoImageListLevelSetting instance
     */
    ProtoImageListLevelSetting.create = function create(properties) {
        return new ProtoImageListLevelSetting(properties);
    };

    /**
     * Encodes the specified ProtoImageListLevelSetting message. Does not implicitly {@link ProtoImageListLevelSetting.verify|verify} messages.
     * @function encode
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {IProtoImageListLevelSetting} message ProtoImageListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoImageListLevelSetting.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.listSettingName != null && Object.hasOwnProperty.call(message, "listSettingName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.listSettingName);
        if (message.fontSize != null && Object.hasOwnProperty.call(message, "fontSize"))
            $root.ProtoBoxedUint32.encode(message.fontSize, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        if (message.level != null && Object.hasOwnProperty.call(message, "level"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
        if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.prefix);
        if (message.suffix != null && Object.hasOwnProperty.call(message, "suffix"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.suffix);
        if (message.fixFontFamily != null && Object.hasOwnProperty.call(message, "fixFontFamily"))
            $root.ProtoFont.encode(message.fixFontFamily, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.fixBold != null && Object.hasOwnProperty.call(message, "fixBold"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.fixBold);
        if (message.fixItalic != null && Object.hasOwnProperty.call(message, "fixItalic"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.fixItalic);
        if (message.indentionWidth != null && Object.hasOwnProperty.call(message, "indentionWidth"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.indentionWidth);
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.imageName != null && Object.hasOwnProperty.call(message, "imageName"))
            writer.uint32(/* id 12, wireType 2 =*/98).string(message.imageName);
        return writer;
    };

    /**
     * Encodes the specified ProtoImageListLevelSetting message, length delimited. Does not implicitly {@link ProtoImageListLevelSetting.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {IProtoImageListLevelSetting} message ProtoImageListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoImageListLevelSetting.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoImageListLevelSetting message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoImageListLevelSetting} ProtoImageListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoImageListLevelSetting.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoImageListLevelSetting();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.listSettingName = reader.string();
                    break;
                }
            case 2: {
                    message.fontSize = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.type = reader.int32();
                    break;
                }
            case 4: {
                    message.level = reader.int32();
                    break;
                }
            case 5: {
                    message.prefix = reader.string();
                    break;
                }
            case 6: {
                    message.suffix = reader.string();
                    break;
                }
            case 7: {
                    message.fixFontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.fixBold = reader.bool();
                    break;
                }
            case 9: {
                    message.fixItalic = reader.bool();
                    break;
                }
            case 10: {
                    message.indentionWidth = reader.int32();
                    break;
                }
            case 11: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.imageName = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoImageListLevelSetting message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoImageListLevelSetting} ProtoImageListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoImageListLevelSetting.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoImageListLevelSetting message.
     * @function verify
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoImageListLevelSetting.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            if (!$util.isString(message.listSettingName))
                return "listSettingName: string expected";
        if (message.fontSize != null && message.hasOwnProperty("fontSize")) {
            var error = $root.ProtoBoxedUint32.verify(message.fontSize);
            if (error)
                return "fontSize." + error;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            if (!$util.isString(message.prefix))
                return "prefix: string expected";
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            if (!$util.isString(message.suffix))
                return "suffix: string expected";
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily")) {
            var error = $root.ProtoFont.verify(message.fixFontFamily);
            if (error)
                return "fixFontFamily." + error;
        }
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            if (typeof message.fixBold !== "boolean")
                return "fixBold: boolean expected";
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            if (typeof message.fixItalic !== "boolean")
                return "fixItalic: boolean expected";
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            if (!$util.isInteger(message.indentionWidth))
                return "indentionWidth: integer expected";
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.imageName != null && message.hasOwnProperty("imageName"))
            if (!$util.isString(message.imageName))
                return "imageName: string expected";
        return null;
    };

    /**
     * Creates a ProtoImageListLevelSetting message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoImageListLevelSetting} ProtoImageListLevelSetting
     */
    ProtoImageListLevelSetting.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoImageListLevelSetting)
            return object;
        var message = new $root.ProtoImageListLevelSetting();
        if (object.listSettingName != null)
            message.listSettingName = String(object.listSettingName);
        if (object.fontSize != null) {
            if (typeof object.fontSize !== "object")
                throw TypeError(".ProtoImageListLevelSetting.fontSize: object expected");
            message.fontSize = $root.ProtoBoxedUint32.fromObject(object.fontSize);
        }
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "UNNUMBERED":
        case 0:
            message.type = 0;
            break;
        case "NUMERIC":
        case 1:
            message.type = 1;
            break;
        case "IMAGE":
        case 2:
            message.type = 2;
            break;
        }
        if (object.level != null)
            message.level = object.level | 0;
        if (object.prefix != null)
            message.prefix = String(object.prefix);
        if (object.suffix != null)
            message.suffix = String(object.suffix);
        if (object.fixFontFamily != null) {
            if (typeof object.fixFontFamily !== "object")
                throw TypeError(".ProtoImageListLevelSetting.fixFontFamily: object expected");
            message.fixFontFamily = $root.ProtoFont.fromObject(object.fixFontFamily);
        }
        if (object.fixBold != null)
            message.fixBold = Boolean(object.fixBold);
        if (object.fixItalic != null)
            message.fixItalic = Boolean(object.fixItalic);
        if (object.indentionWidth != null)
            message.indentionWidth = object.indentionWidth | 0;
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoImageListLevelSetting.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.imageName != null)
            message.imageName = String(object.imageName);
        return message;
    };

    /**
     * Creates a plain object from a ProtoImageListLevelSetting message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {ProtoImageListLevelSetting} message ProtoImageListLevelSetting
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoImageListLevelSetting.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.listSettingName = "";
            object.fontSize = null;
            object.type = options.enums === String ? "UNNUMBERED" : 0;
            object.level = 0;
            object.prefix = "";
            object.suffix = "";
            object.fixFontFamily = null;
            object.fixBold = false;
            object.fixItalic = false;
            object.indentionWidth = 0;
            object.color = null;
            object.imageName = "";
        }
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            object.listSettingName = message.listSettingName;
        if (message.fontSize != null && message.hasOwnProperty("fontSize"))
            object.fontSize = $root.ProtoBoxedUint32.toObject(message.fontSize, options);
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoListLevelSettingType[message.type] === undefined ? message.type : $root.ProtoListLevelSettingType[message.type] : message.type;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            object.prefix = message.prefix;
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            object.suffix = message.suffix;
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily"))
            object.fixFontFamily = $root.ProtoFont.toObject(message.fixFontFamily, options);
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            object.fixBold = message.fixBold;
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            object.fixItalic = message.fixItalic;
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            object.indentionWidth = message.indentionWidth;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.imageName != null && message.hasOwnProperty("imageName"))
            object.imageName = message.imageName;
        return object;
    };

    /**
     * Converts this ProtoImageListLevelSetting to JSON.
     * @function toJSON
     * @memberof ProtoImageListLevelSetting
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoImageListLevelSetting.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoImageListLevelSetting
     * @function getTypeUrl
     * @memberof ProtoImageListLevelSetting
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoImageListLevelSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoImageListLevelSetting";
    };

    return ProtoImageListLevelSetting;
})();

$root.ProtoTextListLevelSetting = (function() {

    /**
     * Properties of a ProtoTextListLevelSetting.
     * @name IProtoTextListLevelSetting
     * @interface IProtoTextListLevelSetting
     * @property {string|null} [listSettingName] ProtoTextListLevelSetting listSettingName
     * @property {IProtoBoxedUint32|null} [fontSize] ProtoTextListLevelSetting fontSize
     * @property {ProtoListLevelSettingType|null} [type] ProtoTextListLevelSetting type
     * @property {number|null} [level] ProtoTextListLevelSetting level
     * @property {string|null} [prefix] ProtoTextListLevelSetting prefix
     * @property {string|null} [suffix] ProtoTextListLevelSetting suffix
     * @property {IProtoFont|null} [fixFontFamily] ProtoTextListLevelSetting fixFontFamily
     * @property {boolean|null} [fixBold] ProtoTextListLevelSetting fixBold
     * @property {boolean|null} [fixItalic] ProtoTextListLevelSetting fixItalic
     * @property {number|null} [indentionWidth] ProtoTextListLevelSetting indentionWidth
     * @property {IProtoColor|null} [color] ProtoTextListLevelSetting color
     * @property {IProtoFont|null} [fontFamily] ProtoTextListLevelSetting fontFamily
     * @property {IProtoBoxedBool|null} [bold] ProtoTextListLevelSetting bold
     * @property {IProtoBoxedBool|null} [italic] ProtoTextListLevelSetting italic
     */

    /**
     * Constructs a new ProtoTextListLevelSetting.
     * @name ProtoTextListLevelSetting
     * @classdesc Represents a ProtoTextListLevelSetting.
     * @implements IProtoTextListLevelSetting
     * @constructor
     * @param {IProtoTextListLevelSetting=} [properties] Properties to set
     */
    function ProtoTextListLevelSetting(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTextListLevelSetting listSettingName.
     * @member {string} listSettingName
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.listSettingName = "";

    /**
     * ProtoTextListLevelSetting fontSize.
     * @member {IProtoBoxedUint32|null|undefined} fontSize
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.fontSize = null;

    /**
     * ProtoTextListLevelSetting type.
     * @member {ProtoListLevelSettingType} type
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.type = 0;

    /**
     * ProtoTextListLevelSetting level.
     * @member {number} level
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.level = 0;

    /**
     * ProtoTextListLevelSetting prefix.
     * @member {string} prefix
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.prefix = "";

    /**
     * ProtoTextListLevelSetting suffix.
     * @member {string} suffix
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.suffix = "";

    /**
     * ProtoTextListLevelSetting fixFontFamily.
     * @member {IProtoFont|null|undefined} fixFontFamily
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.fixFontFamily = null;

    /**
     * ProtoTextListLevelSetting fixBold.
     * @member {boolean} fixBold
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.fixBold = false;

    /**
     * ProtoTextListLevelSetting fixItalic.
     * @member {boolean} fixItalic
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.fixItalic = false;

    /**
     * ProtoTextListLevelSetting indentionWidth.
     * @member {number} indentionWidth
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.indentionWidth = 0;

    /**
     * ProtoTextListLevelSetting color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.color = null;

    /**
     * ProtoTextListLevelSetting fontFamily.
     * @member {IProtoFont|null|undefined} fontFamily
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.fontFamily = null;

    /**
     * ProtoTextListLevelSetting bold.
     * @member {IProtoBoxedBool|null|undefined} bold
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.bold = null;

    /**
     * ProtoTextListLevelSetting italic.
     * @member {IProtoBoxedBool|null|undefined} italic
     * @memberof ProtoTextListLevelSetting
     * @instance
     */
    ProtoTextListLevelSetting.prototype.italic = null;

    /**
     * Creates a new ProtoTextListLevelSetting instance using the specified properties.
     * @function create
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {IProtoTextListLevelSetting=} [properties] Properties to set
     * @returns {ProtoTextListLevelSetting} ProtoTextListLevelSetting instance
     */
    ProtoTextListLevelSetting.create = function create(properties) {
        return new ProtoTextListLevelSetting(properties);
    };

    /**
     * Encodes the specified ProtoTextListLevelSetting message. Does not implicitly {@link ProtoTextListLevelSetting.verify|verify} messages.
     * @function encode
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {IProtoTextListLevelSetting} message ProtoTextListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTextListLevelSetting.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.listSettingName != null && Object.hasOwnProperty.call(message, "listSettingName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.listSettingName);
        if (message.fontSize != null && Object.hasOwnProperty.call(message, "fontSize"))
            $root.ProtoBoxedUint32.encode(message.fontSize, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        if (message.level != null && Object.hasOwnProperty.call(message, "level"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
        if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.prefix);
        if (message.suffix != null && Object.hasOwnProperty.call(message, "suffix"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.suffix);
        if (message.fixFontFamily != null && Object.hasOwnProperty.call(message, "fixFontFamily"))
            $root.ProtoFont.encode(message.fixFontFamily, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.fixBold != null && Object.hasOwnProperty.call(message, "fixBold"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.fixBold);
        if (message.fixItalic != null && Object.hasOwnProperty.call(message, "fixItalic"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.fixItalic);
        if (message.indentionWidth != null && Object.hasOwnProperty.call(message, "indentionWidth"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.indentionWidth);
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.fontFamily != null && Object.hasOwnProperty.call(message, "fontFamily"))
            $root.ProtoFont.encode(message.fontFamily, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.bold != null && Object.hasOwnProperty.call(message, "bold"))
            $root.ProtoBoxedBool.encode(message.bold, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.italic != null && Object.hasOwnProperty.call(message, "italic"))
            $root.ProtoBoxedBool.encode(message.italic, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTextListLevelSetting message, length delimited. Does not implicitly {@link ProtoTextListLevelSetting.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {IProtoTextListLevelSetting} message ProtoTextListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTextListLevelSetting.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTextListLevelSetting message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTextListLevelSetting} ProtoTextListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTextListLevelSetting.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTextListLevelSetting();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.listSettingName = reader.string();
                    break;
                }
            case 2: {
                    message.fontSize = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.type = reader.int32();
                    break;
                }
            case 4: {
                    message.level = reader.int32();
                    break;
                }
            case 5: {
                    message.prefix = reader.string();
                    break;
                }
            case 6: {
                    message.suffix = reader.string();
                    break;
                }
            case 7: {
                    message.fixFontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.fixBold = reader.bool();
                    break;
                }
            case 9: {
                    message.fixItalic = reader.bool();
                    break;
                }
            case 10: {
                    message.indentionWidth = reader.int32();
                    break;
                }
            case 11: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.fontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.bold = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 14: {
                    message.italic = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTextListLevelSetting message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTextListLevelSetting} ProtoTextListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTextListLevelSetting.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTextListLevelSetting message.
     * @function verify
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTextListLevelSetting.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            if (!$util.isString(message.listSettingName))
                return "listSettingName: string expected";
        if (message.fontSize != null && message.hasOwnProperty("fontSize")) {
            var error = $root.ProtoBoxedUint32.verify(message.fontSize);
            if (error)
                return "fontSize." + error;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            if (!$util.isString(message.prefix))
                return "prefix: string expected";
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            if (!$util.isString(message.suffix))
                return "suffix: string expected";
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily")) {
            var error = $root.ProtoFont.verify(message.fixFontFamily);
            if (error)
                return "fixFontFamily." + error;
        }
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            if (typeof message.fixBold !== "boolean")
                return "fixBold: boolean expected";
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            if (typeof message.fixItalic !== "boolean")
                return "fixItalic: boolean expected";
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            if (!$util.isInteger(message.indentionWidth))
                return "indentionWidth: integer expected";
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.fontFamily != null && message.hasOwnProperty("fontFamily")) {
            var error = $root.ProtoFont.verify(message.fontFamily);
            if (error)
                return "fontFamily." + error;
        }
        if (message.bold != null && message.hasOwnProperty("bold")) {
            var error = $root.ProtoBoxedBool.verify(message.bold);
            if (error)
                return "bold." + error;
        }
        if (message.italic != null && message.hasOwnProperty("italic")) {
            var error = $root.ProtoBoxedBool.verify(message.italic);
            if (error)
                return "italic." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTextListLevelSetting message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTextListLevelSetting} ProtoTextListLevelSetting
     */
    ProtoTextListLevelSetting.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTextListLevelSetting)
            return object;
        var message = new $root.ProtoTextListLevelSetting();
        if (object.listSettingName != null)
            message.listSettingName = String(object.listSettingName);
        if (object.fontSize != null) {
            if (typeof object.fontSize !== "object")
                throw TypeError(".ProtoTextListLevelSetting.fontSize: object expected");
            message.fontSize = $root.ProtoBoxedUint32.fromObject(object.fontSize);
        }
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "UNNUMBERED":
        case 0:
            message.type = 0;
            break;
        case "NUMERIC":
        case 1:
            message.type = 1;
            break;
        case "IMAGE":
        case 2:
            message.type = 2;
            break;
        }
        if (object.level != null)
            message.level = object.level | 0;
        if (object.prefix != null)
            message.prefix = String(object.prefix);
        if (object.suffix != null)
            message.suffix = String(object.suffix);
        if (object.fixFontFamily != null) {
            if (typeof object.fixFontFamily !== "object")
                throw TypeError(".ProtoTextListLevelSetting.fixFontFamily: object expected");
            message.fixFontFamily = $root.ProtoFont.fromObject(object.fixFontFamily);
        }
        if (object.fixBold != null)
            message.fixBold = Boolean(object.fixBold);
        if (object.fixItalic != null)
            message.fixItalic = Boolean(object.fixItalic);
        if (object.indentionWidth != null)
            message.indentionWidth = object.indentionWidth | 0;
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoTextListLevelSetting.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.fontFamily != null) {
            if (typeof object.fontFamily !== "object")
                throw TypeError(".ProtoTextListLevelSetting.fontFamily: object expected");
            message.fontFamily = $root.ProtoFont.fromObject(object.fontFamily);
        }
        if (object.bold != null) {
            if (typeof object.bold !== "object")
                throw TypeError(".ProtoTextListLevelSetting.bold: object expected");
            message.bold = $root.ProtoBoxedBool.fromObject(object.bold);
        }
        if (object.italic != null) {
            if (typeof object.italic !== "object")
                throw TypeError(".ProtoTextListLevelSetting.italic: object expected");
            message.italic = $root.ProtoBoxedBool.fromObject(object.italic);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTextListLevelSetting message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {ProtoTextListLevelSetting} message ProtoTextListLevelSetting
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTextListLevelSetting.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.listSettingName = "";
            object.fontSize = null;
            object.type = options.enums === String ? "UNNUMBERED" : 0;
            object.level = 0;
            object.prefix = "";
            object.suffix = "";
            object.fixFontFamily = null;
            object.fixBold = false;
            object.fixItalic = false;
            object.indentionWidth = 0;
            object.color = null;
            object.fontFamily = null;
            object.bold = null;
            object.italic = null;
        }
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            object.listSettingName = message.listSettingName;
        if (message.fontSize != null && message.hasOwnProperty("fontSize"))
            object.fontSize = $root.ProtoBoxedUint32.toObject(message.fontSize, options);
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoListLevelSettingType[message.type] === undefined ? message.type : $root.ProtoListLevelSettingType[message.type] : message.type;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            object.prefix = message.prefix;
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            object.suffix = message.suffix;
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily"))
            object.fixFontFamily = $root.ProtoFont.toObject(message.fixFontFamily, options);
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            object.fixBold = message.fixBold;
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            object.fixItalic = message.fixItalic;
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            object.indentionWidth = message.indentionWidth;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.fontFamily != null && message.hasOwnProperty("fontFamily"))
            object.fontFamily = $root.ProtoFont.toObject(message.fontFamily, options);
        if (message.bold != null && message.hasOwnProperty("bold"))
            object.bold = $root.ProtoBoxedBool.toObject(message.bold, options);
        if (message.italic != null && message.hasOwnProperty("italic"))
            object.italic = $root.ProtoBoxedBool.toObject(message.italic, options);
        return object;
    };

    /**
     * Converts this ProtoTextListLevelSetting to JSON.
     * @function toJSON
     * @memberof ProtoTextListLevelSetting
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTextListLevelSetting.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTextListLevelSetting
     * @function getTypeUrl
     * @memberof ProtoTextListLevelSetting
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTextListLevelSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTextListLevelSetting";
    };

    return ProtoTextListLevelSetting;
})();

$root.ProtoNumberListLevelSetting = (function() {

    /**
     * Properties of a ProtoNumberListLevelSetting.
     * @name IProtoNumberListLevelSetting
     * @interface IProtoNumberListLevelSetting
     * @property {string|null} [listSettingName] ProtoNumberListLevelSetting listSettingName
     * @property {IProtoBoxedUint32|null} [fontSize] ProtoNumberListLevelSetting fontSize
     * @property {ProtoListLevelSettingType|null} [type] ProtoNumberListLevelSetting type
     * @property {number|null} [level] ProtoNumberListLevelSetting level
     * @property {string|null} [prefix] ProtoNumberListLevelSetting prefix
     * @property {string|null} [suffix] ProtoNumberListLevelSetting suffix
     * @property {IProtoFont|null} [fixFontFamily] ProtoNumberListLevelSetting fixFontFamily
     * @property {boolean|null} [fixBold] ProtoNumberListLevelSetting fixBold
     * @property {boolean|null} [fixItalic] ProtoNumberListLevelSetting fixItalic
     * @property {number|null} [indentionWidth] ProtoNumberListLevelSetting indentionWidth
     * @property {IProtoColor|null} [color] ProtoNumberListLevelSetting color
     * @property {IProtoFont|null} [fontFamily] ProtoNumberListLevelSetting fontFamily
     * @property {IProtoBoxedBool|null} [bold] ProtoNumberListLevelSetting bold
     * @property {IProtoBoxedBool|null} [italic] ProtoNumberListLevelSetting italic
     * @property {ProtoNumberType|null} [numberType] ProtoNumberListLevelSetting numberType
     */

    /**
     * Constructs a new ProtoNumberListLevelSetting.
     * @name ProtoNumberListLevelSetting
     * @classdesc Represents a ProtoNumberListLevelSetting.
     * @implements IProtoNumberListLevelSetting
     * @constructor
     * @param {IProtoNumberListLevelSetting=} [properties] Properties to set
     */
    function ProtoNumberListLevelSetting(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoNumberListLevelSetting listSettingName.
     * @member {string} listSettingName
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.listSettingName = "";

    /**
     * ProtoNumberListLevelSetting fontSize.
     * @member {IProtoBoxedUint32|null|undefined} fontSize
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.fontSize = null;

    /**
     * ProtoNumberListLevelSetting type.
     * @member {ProtoListLevelSettingType} type
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.type = 0;

    /**
     * ProtoNumberListLevelSetting level.
     * @member {number} level
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.level = 0;

    /**
     * ProtoNumberListLevelSetting prefix.
     * @member {string} prefix
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.prefix = "";

    /**
     * ProtoNumberListLevelSetting suffix.
     * @member {string} suffix
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.suffix = "";

    /**
     * ProtoNumberListLevelSetting fixFontFamily.
     * @member {IProtoFont|null|undefined} fixFontFamily
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.fixFontFamily = null;

    /**
     * ProtoNumberListLevelSetting fixBold.
     * @member {boolean} fixBold
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.fixBold = false;

    /**
     * ProtoNumberListLevelSetting fixItalic.
     * @member {boolean} fixItalic
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.fixItalic = false;

    /**
     * ProtoNumberListLevelSetting indentionWidth.
     * @member {number} indentionWidth
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.indentionWidth = 0;

    /**
     * ProtoNumberListLevelSetting color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.color = null;

    /**
     * ProtoNumberListLevelSetting fontFamily.
     * @member {IProtoFont|null|undefined} fontFamily
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.fontFamily = null;

    /**
     * ProtoNumberListLevelSetting bold.
     * @member {IProtoBoxedBool|null|undefined} bold
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.bold = null;

    /**
     * ProtoNumberListLevelSetting italic.
     * @member {IProtoBoxedBool|null|undefined} italic
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.italic = null;

    /**
     * ProtoNumberListLevelSetting numberType.
     * @member {ProtoNumberType} numberType
     * @memberof ProtoNumberListLevelSetting
     * @instance
     */
    ProtoNumberListLevelSetting.prototype.numberType = 0;

    /**
     * Creates a new ProtoNumberListLevelSetting instance using the specified properties.
     * @function create
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {IProtoNumberListLevelSetting=} [properties] Properties to set
     * @returns {ProtoNumberListLevelSetting} ProtoNumberListLevelSetting instance
     */
    ProtoNumberListLevelSetting.create = function create(properties) {
        return new ProtoNumberListLevelSetting(properties);
    };

    /**
     * Encodes the specified ProtoNumberListLevelSetting message. Does not implicitly {@link ProtoNumberListLevelSetting.verify|verify} messages.
     * @function encode
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {IProtoNumberListLevelSetting} message ProtoNumberListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoNumberListLevelSetting.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.listSettingName != null && Object.hasOwnProperty.call(message, "listSettingName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.listSettingName);
        if (message.fontSize != null && Object.hasOwnProperty.call(message, "fontSize"))
            $root.ProtoBoxedUint32.encode(message.fontSize, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        if (message.level != null && Object.hasOwnProperty.call(message, "level"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
        if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.prefix);
        if (message.suffix != null && Object.hasOwnProperty.call(message, "suffix"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.suffix);
        if (message.fixFontFamily != null && Object.hasOwnProperty.call(message, "fixFontFamily"))
            $root.ProtoFont.encode(message.fixFontFamily, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.fixBold != null && Object.hasOwnProperty.call(message, "fixBold"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.fixBold);
        if (message.fixItalic != null && Object.hasOwnProperty.call(message, "fixItalic"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.fixItalic);
        if (message.indentionWidth != null && Object.hasOwnProperty.call(message, "indentionWidth"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.indentionWidth);
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.fontFamily != null && Object.hasOwnProperty.call(message, "fontFamily"))
            $root.ProtoFont.encode(message.fontFamily, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.bold != null && Object.hasOwnProperty.call(message, "bold"))
            $root.ProtoBoxedBool.encode(message.bold, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.italic != null && Object.hasOwnProperty.call(message, "italic"))
            $root.ProtoBoxedBool.encode(message.italic, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.numberType != null && Object.hasOwnProperty.call(message, "numberType"))
            writer.uint32(/* id 15, wireType 0 =*/120).int32(message.numberType);
        return writer;
    };

    /**
     * Encodes the specified ProtoNumberListLevelSetting message, length delimited. Does not implicitly {@link ProtoNumberListLevelSetting.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {IProtoNumberListLevelSetting} message ProtoNumberListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoNumberListLevelSetting.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoNumberListLevelSetting message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoNumberListLevelSetting} ProtoNumberListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoNumberListLevelSetting.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoNumberListLevelSetting();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.listSettingName = reader.string();
                    break;
                }
            case 2: {
                    message.fontSize = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.type = reader.int32();
                    break;
                }
            case 4: {
                    message.level = reader.int32();
                    break;
                }
            case 5: {
                    message.prefix = reader.string();
                    break;
                }
            case 6: {
                    message.suffix = reader.string();
                    break;
                }
            case 7: {
                    message.fixFontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.fixBold = reader.bool();
                    break;
                }
            case 9: {
                    message.fixItalic = reader.bool();
                    break;
                }
            case 10: {
                    message.indentionWidth = reader.int32();
                    break;
                }
            case 11: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.fontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.bold = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 14: {
                    message.italic = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 15: {
                    message.numberType = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoNumberListLevelSetting message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoNumberListLevelSetting} ProtoNumberListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoNumberListLevelSetting.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoNumberListLevelSetting message.
     * @function verify
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoNumberListLevelSetting.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            if (!$util.isString(message.listSettingName))
                return "listSettingName: string expected";
        if (message.fontSize != null && message.hasOwnProperty("fontSize")) {
            var error = $root.ProtoBoxedUint32.verify(message.fontSize);
            if (error)
                return "fontSize." + error;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            if (!$util.isString(message.prefix))
                return "prefix: string expected";
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            if (!$util.isString(message.suffix))
                return "suffix: string expected";
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily")) {
            var error = $root.ProtoFont.verify(message.fixFontFamily);
            if (error)
                return "fixFontFamily." + error;
        }
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            if (typeof message.fixBold !== "boolean")
                return "fixBold: boolean expected";
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            if (typeof message.fixItalic !== "boolean")
                return "fixItalic: boolean expected";
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            if (!$util.isInteger(message.indentionWidth))
                return "indentionWidth: integer expected";
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.fontFamily != null && message.hasOwnProperty("fontFamily")) {
            var error = $root.ProtoFont.verify(message.fontFamily);
            if (error)
                return "fontFamily." + error;
        }
        if (message.bold != null && message.hasOwnProperty("bold")) {
            var error = $root.ProtoBoxedBool.verify(message.bold);
            if (error)
                return "bold." + error;
        }
        if (message.italic != null && message.hasOwnProperty("italic")) {
            var error = $root.ProtoBoxedBool.verify(message.italic);
            if (error)
                return "italic." + error;
        }
        if (message.numberType != null && message.hasOwnProperty("numberType"))
            switch (message.numberType) {
            default:
                return "numberType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        return null;
    };

    /**
     * Creates a ProtoNumberListLevelSetting message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoNumberListLevelSetting} ProtoNumberListLevelSetting
     */
    ProtoNumberListLevelSetting.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoNumberListLevelSetting)
            return object;
        var message = new $root.ProtoNumberListLevelSetting();
        if (object.listSettingName != null)
            message.listSettingName = String(object.listSettingName);
        if (object.fontSize != null) {
            if (typeof object.fontSize !== "object")
                throw TypeError(".ProtoNumberListLevelSetting.fontSize: object expected");
            message.fontSize = $root.ProtoBoxedUint32.fromObject(object.fontSize);
        }
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "UNNUMBERED":
        case 0:
            message.type = 0;
            break;
        case "NUMERIC":
        case 1:
            message.type = 1;
            break;
        case "IMAGE":
        case 2:
            message.type = 2;
            break;
        }
        if (object.level != null)
            message.level = object.level | 0;
        if (object.prefix != null)
            message.prefix = String(object.prefix);
        if (object.suffix != null)
            message.suffix = String(object.suffix);
        if (object.fixFontFamily != null) {
            if (typeof object.fixFontFamily !== "object")
                throw TypeError(".ProtoNumberListLevelSetting.fixFontFamily: object expected");
            message.fixFontFamily = $root.ProtoFont.fromObject(object.fixFontFamily);
        }
        if (object.fixBold != null)
            message.fixBold = Boolean(object.fixBold);
        if (object.fixItalic != null)
            message.fixItalic = Boolean(object.fixItalic);
        if (object.indentionWidth != null)
            message.indentionWidth = object.indentionWidth | 0;
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoNumberListLevelSetting.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.fontFamily != null) {
            if (typeof object.fontFamily !== "object")
                throw TypeError(".ProtoNumberListLevelSetting.fontFamily: object expected");
            message.fontFamily = $root.ProtoFont.fromObject(object.fontFamily);
        }
        if (object.bold != null) {
            if (typeof object.bold !== "object")
                throw TypeError(".ProtoNumberListLevelSetting.bold: object expected");
            message.bold = $root.ProtoBoxedBool.fromObject(object.bold);
        }
        if (object.italic != null) {
            if (typeof object.italic !== "object")
                throw TypeError(".ProtoNumberListLevelSetting.italic: object expected");
            message.italic = $root.ProtoBoxedBool.fromObject(object.italic);
        }
        switch (object.numberType) {
        default:
            if (typeof object.numberType === "number") {
                message.numberType = object.numberType;
                break;
            }
            break;
        case "ARABIC":
        case 0:
            message.numberType = 0;
            break;
        case "ROM_UPPERCASE":
        case 1:
            message.numberType = 1;
            break;
        case "ROM_LOWERCASE":
        case 2:
            message.numberType = 2;
            break;
        case "LETTER_UPPERCASE":
        case 3:
            message.numberType = 3;
            break;
        case "LETTER_LOWERCASE":
        case 4:
            message.numberType = 4;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoNumberListLevelSetting message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {ProtoNumberListLevelSetting} message ProtoNumberListLevelSetting
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoNumberListLevelSetting.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.listSettingName = "";
            object.fontSize = null;
            object.type = options.enums === String ? "UNNUMBERED" : 0;
            object.level = 0;
            object.prefix = "";
            object.suffix = "";
            object.fixFontFamily = null;
            object.fixBold = false;
            object.fixItalic = false;
            object.indentionWidth = 0;
            object.color = null;
            object.fontFamily = null;
            object.bold = null;
            object.italic = null;
            object.numberType = options.enums === String ? "ARABIC" : 0;
        }
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            object.listSettingName = message.listSettingName;
        if (message.fontSize != null && message.hasOwnProperty("fontSize"))
            object.fontSize = $root.ProtoBoxedUint32.toObject(message.fontSize, options);
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoListLevelSettingType[message.type] === undefined ? message.type : $root.ProtoListLevelSettingType[message.type] : message.type;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            object.prefix = message.prefix;
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            object.suffix = message.suffix;
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily"))
            object.fixFontFamily = $root.ProtoFont.toObject(message.fixFontFamily, options);
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            object.fixBold = message.fixBold;
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            object.fixItalic = message.fixItalic;
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            object.indentionWidth = message.indentionWidth;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.fontFamily != null && message.hasOwnProperty("fontFamily"))
            object.fontFamily = $root.ProtoFont.toObject(message.fontFamily, options);
        if (message.bold != null && message.hasOwnProperty("bold"))
            object.bold = $root.ProtoBoxedBool.toObject(message.bold, options);
        if (message.italic != null && message.hasOwnProperty("italic"))
            object.italic = $root.ProtoBoxedBool.toObject(message.italic, options);
        if (message.numberType != null && message.hasOwnProperty("numberType"))
            object.numberType = options.enums === String ? $root.ProtoNumberType[message.numberType] === undefined ? message.numberType : $root.ProtoNumberType[message.numberType] : message.numberType;
        return object;
    };

    /**
     * Converts this ProtoNumberListLevelSetting to JSON.
     * @function toJSON
     * @memberof ProtoNumberListLevelSetting
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoNumberListLevelSetting.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoNumberListLevelSetting
     * @function getTypeUrl
     * @memberof ProtoNumberListLevelSetting
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoNumberListLevelSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoNumberListLevelSetting";
    };

    return ProtoNumberListLevelSetting;
})();

$root.ProtoUnnumberedListLevelSetting = (function() {

    /**
     * Properties of a ProtoUnnumberedListLevelSetting.
     * @name IProtoUnnumberedListLevelSetting
     * @interface IProtoUnnumberedListLevelSetting
     * @property {string|null} [listSettingName] ProtoUnnumberedListLevelSetting listSettingName
     * @property {IProtoBoxedUint32|null} [fontSize] ProtoUnnumberedListLevelSetting fontSize
     * @property {ProtoListLevelSettingType|null} [type] ProtoUnnumberedListLevelSetting type
     * @property {number|null} [level] ProtoUnnumberedListLevelSetting level
     * @property {string|null} [prefix] ProtoUnnumberedListLevelSetting prefix
     * @property {string|null} [suffix] ProtoUnnumberedListLevelSetting suffix
     * @property {IProtoFont|null} [fixFontFamily] ProtoUnnumberedListLevelSetting fixFontFamily
     * @property {boolean|null} [fixBold] ProtoUnnumberedListLevelSetting fixBold
     * @property {boolean|null} [fixItalic] ProtoUnnumberedListLevelSetting fixItalic
     * @property {number|null} [indentionWidth] ProtoUnnumberedListLevelSetting indentionWidth
     * @property {IProtoColor|null} [color] ProtoUnnumberedListLevelSetting color
     * @property {IProtoFont|null} [fontFamily] ProtoUnnumberedListLevelSetting fontFamily
     * @property {IProtoBoxedBool|null} [bold] ProtoUnnumberedListLevelSetting bold
     * @property {IProtoBoxedBool|null} [italic] ProtoUnnumberedListLevelSetting italic
     * @property {string|null} [character] ProtoUnnumberedListLevelSetting character
     */

    /**
     * Constructs a new ProtoUnnumberedListLevelSetting.
     * @name ProtoUnnumberedListLevelSetting
     * @classdesc Represents a ProtoUnnumberedListLevelSetting.
     * @implements IProtoUnnumberedListLevelSetting
     * @constructor
     * @param {IProtoUnnumberedListLevelSetting=} [properties] Properties to set
     */
    function ProtoUnnumberedListLevelSetting(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoUnnumberedListLevelSetting listSettingName.
     * @member {string} listSettingName
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.listSettingName = "";

    /**
     * ProtoUnnumberedListLevelSetting fontSize.
     * @member {IProtoBoxedUint32|null|undefined} fontSize
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.fontSize = null;

    /**
     * ProtoUnnumberedListLevelSetting type.
     * @member {ProtoListLevelSettingType} type
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.type = 0;

    /**
     * ProtoUnnumberedListLevelSetting level.
     * @member {number} level
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.level = 0;

    /**
     * ProtoUnnumberedListLevelSetting prefix.
     * @member {string} prefix
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.prefix = "";

    /**
     * ProtoUnnumberedListLevelSetting suffix.
     * @member {string} suffix
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.suffix = "";

    /**
     * ProtoUnnumberedListLevelSetting fixFontFamily.
     * @member {IProtoFont|null|undefined} fixFontFamily
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.fixFontFamily = null;

    /**
     * ProtoUnnumberedListLevelSetting fixBold.
     * @member {boolean} fixBold
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.fixBold = false;

    /**
     * ProtoUnnumberedListLevelSetting fixItalic.
     * @member {boolean} fixItalic
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.fixItalic = false;

    /**
     * ProtoUnnumberedListLevelSetting indentionWidth.
     * @member {number} indentionWidth
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.indentionWidth = 0;

    /**
     * ProtoUnnumberedListLevelSetting color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.color = null;

    /**
     * ProtoUnnumberedListLevelSetting fontFamily.
     * @member {IProtoFont|null|undefined} fontFamily
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.fontFamily = null;

    /**
     * ProtoUnnumberedListLevelSetting bold.
     * @member {IProtoBoxedBool|null|undefined} bold
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.bold = null;

    /**
     * ProtoUnnumberedListLevelSetting italic.
     * @member {IProtoBoxedBool|null|undefined} italic
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.italic = null;

    /**
     * ProtoUnnumberedListLevelSetting character.
     * @member {string} character
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     */
    ProtoUnnumberedListLevelSetting.prototype.character = "";

    /**
     * Creates a new ProtoUnnumberedListLevelSetting instance using the specified properties.
     * @function create
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {IProtoUnnumberedListLevelSetting=} [properties] Properties to set
     * @returns {ProtoUnnumberedListLevelSetting} ProtoUnnumberedListLevelSetting instance
     */
    ProtoUnnumberedListLevelSetting.create = function create(properties) {
        return new ProtoUnnumberedListLevelSetting(properties);
    };

    /**
     * Encodes the specified ProtoUnnumberedListLevelSetting message. Does not implicitly {@link ProtoUnnumberedListLevelSetting.verify|verify} messages.
     * @function encode
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {IProtoUnnumberedListLevelSetting} message ProtoUnnumberedListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoUnnumberedListLevelSetting.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.listSettingName != null && Object.hasOwnProperty.call(message, "listSettingName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.listSettingName);
        if (message.fontSize != null && Object.hasOwnProperty.call(message, "fontSize"))
            $root.ProtoBoxedUint32.encode(message.fontSize, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        if (message.level != null && Object.hasOwnProperty.call(message, "level"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.level);
        if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.prefix);
        if (message.suffix != null && Object.hasOwnProperty.call(message, "suffix"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.suffix);
        if (message.fixFontFamily != null && Object.hasOwnProperty.call(message, "fixFontFamily"))
            $root.ProtoFont.encode(message.fixFontFamily, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.fixBold != null && Object.hasOwnProperty.call(message, "fixBold"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.fixBold);
        if (message.fixItalic != null && Object.hasOwnProperty.call(message, "fixItalic"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.fixItalic);
        if (message.indentionWidth != null && Object.hasOwnProperty.call(message, "indentionWidth"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.indentionWidth);
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.fontFamily != null && Object.hasOwnProperty.call(message, "fontFamily"))
            $root.ProtoFont.encode(message.fontFamily, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.bold != null && Object.hasOwnProperty.call(message, "bold"))
            $root.ProtoBoxedBool.encode(message.bold, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.italic != null && Object.hasOwnProperty.call(message, "italic"))
            $root.ProtoBoxedBool.encode(message.italic, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.character != null && Object.hasOwnProperty.call(message, "character"))
            writer.uint32(/* id 15, wireType 2 =*/122).string(message.character);
        return writer;
    };

    /**
     * Encodes the specified ProtoUnnumberedListLevelSetting message, length delimited. Does not implicitly {@link ProtoUnnumberedListLevelSetting.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {IProtoUnnumberedListLevelSetting} message ProtoUnnumberedListLevelSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoUnnumberedListLevelSetting.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoUnnumberedListLevelSetting message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoUnnumberedListLevelSetting} ProtoUnnumberedListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoUnnumberedListLevelSetting.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoUnnumberedListLevelSetting();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.listSettingName = reader.string();
                    break;
                }
            case 2: {
                    message.fontSize = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.type = reader.int32();
                    break;
                }
            case 4: {
                    message.level = reader.int32();
                    break;
                }
            case 5: {
                    message.prefix = reader.string();
                    break;
                }
            case 6: {
                    message.suffix = reader.string();
                    break;
                }
            case 7: {
                    message.fixFontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.fixBold = reader.bool();
                    break;
                }
            case 9: {
                    message.fixItalic = reader.bool();
                    break;
                }
            case 10: {
                    message.indentionWidth = reader.int32();
                    break;
                }
            case 11: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.fontFamily = $root.ProtoFont.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.bold = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 14: {
                    message.italic = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 15: {
                    message.character = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoUnnumberedListLevelSetting message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoUnnumberedListLevelSetting} ProtoUnnumberedListLevelSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoUnnumberedListLevelSetting.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoUnnumberedListLevelSetting message.
     * @function verify
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoUnnumberedListLevelSetting.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            if (!$util.isString(message.listSettingName))
                return "listSettingName: string expected";
        if (message.fontSize != null && message.hasOwnProperty("fontSize")) {
            var error = $root.ProtoBoxedUint32.verify(message.fontSize);
            if (error)
                return "fontSize." + error;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.level != null && message.hasOwnProperty("level"))
            if (!$util.isInteger(message.level))
                return "level: integer expected";
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            if (!$util.isString(message.prefix))
                return "prefix: string expected";
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            if (!$util.isString(message.suffix))
                return "suffix: string expected";
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily")) {
            var error = $root.ProtoFont.verify(message.fixFontFamily);
            if (error)
                return "fixFontFamily." + error;
        }
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            if (typeof message.fixBold !== "boolean")
                return "fixBold: boolean expected";
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            if (typeof message.fixItalic !== "boolean")
                return "fixItalic: boolean expected";
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            if (!$util.isInteger(message.indentionWidth))
                return "indentionWidth: integer expected";
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.fontFamily != null && message.hasOwnProperty("fontFamily")) {
            var error = $root.ProtoFont.verify(message.fontFamily);
            if (error)
                return "fontFamily." + error;
        }
        if (message.bold != null && message.hasOwnProperty("bold")) {
            var error = $root.ProtoBoxedBool.verify(message.bold);
            if (error)
                return "bold." + error;
        }
        if (message.italic != null && message.hasOwnProperty("italic")) {
            var error = $root.ProtoBoxedBool.verify(message.italic);
            if (error)
                return "italic." + error;
        }
        if (message.character != null && message.hasOwnProperty("character"))
            if (!$util.isString(message.character))
                return "character: string expected";
        return null;
    };

    /**
     * Creates a ProtoUnnumberedListLevelSetting message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoUnnumberedListLevelSetting} ProtoUnnumberedListLevelSetting
     */
    ProtoUnnumberedListLevelSetting.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoUnnumberedListLevelSetting)
            return object;
        var message = new $root.ProtoUnnumberedListLevelSetting();
        if (object.listSettingName != null)
            message.listSettingName = String(object.listSettingName);
        if (object.fontSize != null) {
            if (typeof object.fontSize !== "object")
                throw TypeError(".ProtoUnnumberedListLevelSetting.fontSize: object expected");
            message.fontSize = $root.ProtoBoxedUint32.fromObject(object.fontSize);
        }
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "UNNUMBERED":
        case 0:
            message.type = 0;
            break;
        case "NUMERIC":
        case 1:
            message.type = 1;
            break;
        case "IMAGE":
        case 2:
            message.type = 2;
            break;
        }
        if (object.level != null)
            message.level = object.level | 0;
        if (object.prefix != null)
            message.prefix = String(object.prefix);
        if (object.suffix != null)
            message.suffix = String(object.suffix);
        if (object.fixFontFamily != null) {
            if (typeof object.fixFontFamily !== "object")
                throw TypeError(".ProtoUnnumberedListLevelSetting.fixFontFamily: object expected");
            message.fixFontFamily = $root.ProtoFont.fromObject(object.fixFontFamily);
        }
        if (object.fixBold != null)
            message.fixBold = Boolean(object.fixBold);
        if (object.fixItalic != null)
            message.fixItalic = Boolean(object.fixItalic);
        if (object.indentionWidth != null)
            message.indentionWidth = object.indentionWidth | 0;
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoUnnumberedListLevelSetting.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.fontFamily != null) {
            if (typeof object.fontFamily !== "object")
                throw TypeError(".ProtoUnnumberedListLevelSetting.fontFamily: object expected");
            message.fontFamily = $root.ProtoFont.fromObject(object.fontFamily);
        }
        if (object.bold != null) {
            if (typeof object.bold !== "object")
                throw TypeError(".ProtoUnnumberedListLevelSetting.bold: object expected");
            message.bold = $root.ProtoBoxedBool.fromObject(object.bold);
        }
        if (object.italic != null) {
            if (typeof object.italic !== "object")
                throw TypeError(".ProtoUnnumberedListLevelSetting.italic: object expected");
            message.italic = $root.ProtoBoxedBool.fromObject(object.italic);
        }
        if (object.character != null)
            message.character = String(object.character);
        return message;
    };

    /**
     * Creates a plain object from a ProtoUnnumberedListLevelSetting message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {ProtoUnnumberedListLevelSetting} message ProtoUnnumberedListLevelSetting
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoUnnumberedListLevelSetting.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.listSettingName = "";
            object.fontSize = null;
            object.type = options.enums === String ? "UNNUMBERED" : 0;
            object.level = 0;
            object.prefix = "";
            object.suffix = "";
            object.fixFontFamily = null;
            object.fixBold = false;
            object.fixItalic = false;
            object.indentionWidth = 0;
            object.color = null;
            object.fontFamily = null;
            object.bold = null;
            object.italic = null;
            object.character = "";
        }
        if (message.listSettingName != null && message.hasOwnProperty("listSettingName"))
            object.listSettingName = message.listSettingName;
        if (message.fontSize != null && message.hasOwnProperty("fontSize"))
            object.fontSize = $root.ProtoBoxedUint32.toObject(message.fontSize, options);
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoListLevelSettingType[message.type] === undefined ? message.type : $root.ProtoListLevelSettingType[message.type] : message.type;
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = message.level;
        if (message.prefix != null && message.hasOwnProperty("prefix"))
            object.prefix = message.prefix;
        if (message.suffix != null && message.hasOwnProperty("suffix"))
            object.suffix = message.suffix;
        if (message.fixFontFamily != null && message.hasOwnProperty("fixFontFamily"))
            object.fixFontFamily = $root.ProtoFont.toObject(message.fixFontFamily, options);
        if (message.fixBold != null && message.hasOwnProperty("fixBold"))
            object.fixBold = message.fixBold;
        if (message.fixItalic != null && message.hasOwnProperty("fixItalic"))
            object.fixItalic = message.fixItalic;
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            object.indentionWidth = message.indentionWidth;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.fontFamily != null && message.hasOwnProperty("fontFamily"))
            object.fontFamily = $root.ProtoFont.toObject(message.fontFamily, options);
        if (message.bold != null && message.hasOwnProperty("bold"))
            object.bold = $root.ProtoBoxedBool.toObject(message.bold, options);
        if (message.italic != null && message.hasOwnProperty("italic"))
            object.italic = $root.ProtoBoxedBool.toObject(message.italic, options);
        if (message.character != null && message.hasOwnProperty("character"))
            object.character = message.character;
        return object;
    };

    /**
     * Converts this ProtoUnnumberedListLevelSetting to JSON.
     * @function toJSON
     * @memberof ProtoUnnumberedListLevelSetting
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoUnnumberedListLevelSetting.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoUnnumberedListLevelSetting
     * @function getTypeUrl
     * @memberof ProtoUnnumberedListLevelSetting
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoUnnumberedListLevelSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoUnnumberedListLevelSetting";
    };

    return ProtoUnnumberedListLevelSetting;
})();

$root.ProtoListSetting = (function() {

    /**
     * Properties of a ProtoListSetting.
     * @name IProtoListSetting
     * @interface IProtoListSetting
     * @property {IProtoDocumentElement|null} [parent] ProtoListSetting parent
     * @property {string|null} [name] ProtoListSetting name
     * @property {Array.<IProtoListLevelSetting>|null} [listLevelSettings] ProtoListSetting listLevelSettings
     * @property {IProtoListLevelSetting|null} [defaultListLevelSetting] ProtoListSetting defaultListLevelSetting
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoListSetting comChannelUUIDs
     */

    /**
     * Constructs a new ProtoListSetting.
     * @name ProtoListSetting
     * @classdesc Represents a ProtoListSetting.
     * @implements IProtoListSetting
     * @constructor
     * @param {IProtoListSetting=} [properties] Properties to set
     */
    function ProtoListSetting(properties) {
        this.listLevelSettings = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoListSetting parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoListSetting
     * @instance
     */
    ProtoListSetting.prototype.parent = null;

    /**
     * ProtoListSetting name.
     * @member {string} name
     * @memberof ProtoListSetting
     * @instance
     */
    ProtoListSetting.prototype.name = "";

    /**
     * ProtoListSetting listLevelSettings.
     * @member {Array.<IProtoListLevelSetting>} listLevelSettings
     * @memberof ProtoListSetting
     * @instance
     */
    ProtoListSetting.prototype.listLevelSettings = $util.emptyArray;

    /**
     * ProtoListSetting defaultListLevelSetting.
     * @member {IProtoListLevelSetting|null|undefined} defaultListLevelSetting
     * @memberof ProtoListSetting
     * @instance
     */
    ProtoListSetting.prototype.defaultListLevelSetting = null;

    /**
     * ProtoListSetting comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoListSetting
     * @instance
     */
    ProtoListSetting.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoListSetting instance using the specified properties.
     * @function create
     * @memberof ProtoListSetting
     * @static
     * @param {IProtoListSetting=} [properties] Properties to set
     * @returns {ProtoListSetting} ProtoListSetting instance
     */
    ProtoListSetting.create = function create(properties) {
        return new ProtoListSetting(properties);
    };

    /**
     * Encodes the specified ProtoListSetting message. Does not implicitly {@link ProtoListSetting.verify|verify} messages.
     * @function encode
     * @memberof ProtoListSetting
     * @static
     * @param {IProtoListSetting} message ProtoListSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoListSetting.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.listLevelSettings != null && message.listLevelSettings.length)
            for (var i = 0; i < message.listLevelSettings.length; ++i)
                $root.ProtoListLevelSetting.encode(message.listLevelSettings[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.defaultListLevelSetting != null && Object.hasOwnProperty.call(message, "defaultListLevelSetting"))
            $root.ProtoListLevelSetting.encode(message.defaultListLevelSetting, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoListSetting message, length delimited. Does not implicitly {@link ProtoListSetting.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoListSetting
     * @static
     * @param {IProtoListSetting} message ProtoListSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoListSetting.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoListSetting message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoListSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoListSetting} ProtoListSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoListSetting.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoListSetting();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.listLevelSettings && message.listLevelSettings.length))
                        message.listLevelSettings = [];
                    message.listLevelSettings.push($root.ProtoListLevelSetting.decode(reader, reader.uint32()));
                    break;
                }
            case 4: {
                    message.defaultListLevelSetting = $root.ProtoListLevelSetting.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoListSetting message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoListSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoListSetting} ProtoListSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoListSetting.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoListSetting message.
     * @function verify
     * @memberof ProtoListSetting
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoListSetting.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.listLevelSettings != null && message.hasOwnProperty("listLevelSettings")) {
            if (!Array.isArray(message.listLevelSettings))
                return "listLevelSettings: array expected";
            for (var i = 0; i < message.listLevelSettings.length; ++i) {
                var error = $root.ProtoListLevelSetting.verify(message.listLevelSettings[i]);
                if (error)
                    return "listLevelSettings." + error;
            }
        }
        if (message.defaultListLevelSetting != null && message.hasOwnProperty("defaultListLevelSetting")) {
            var error = $root.ProtoListLevelSetting.verify(message.defaultListLevelSetting);
            if (error)
                return "defaultListLevelSetting." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoListSetting message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoListSetting
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoListSetting} ProtoListSetting
     */
    ProtoListSetting.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoListSetting)
            return object;
        var message = new $root.ProtoListSetting();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoListSetting.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.name != null)
            message.name = String(object.name);
        if (object.listLevelSettings) {
            if (!Array.isArray(object.listLevelSettings))
                throw TypeError(".ProtoListSetting.listLevelSettings: array expected");
            message.listLevelSettings = [];
            for (var i = 0; i < object.listLevelSettings.length; ++i) {
                if (typeof object.listLevelSettings[i] !== "object")
                    throw TypeError(".ProtoListSetting.listLevelSettings: object expected");
                message.listLevelSettings[i] = $root.ProtoListLevelSetting.fromObject(object.listLevelSettings[i]);
            }
        }
        if (object.defaultListLevelSetting != null) {
            if (typeof object.defaultListLevelSetting !== "object")
                throw TypeError(".ProtoListSetting.defaultListLevelSetting: object expected");
            message.defaultListLevelSetting = $root.ProtoListLevelSetting.fromObject(object.defaultListLevelSetting);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoListSetting.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoListSetting message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoListSetting
     * @static
     * @param {ProtoListSetting} message ProtoListSetting
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoListSetting.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.listLevelSettings = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.name = "";
            object.defaultListLevelSetting = null;
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.listLevelSettings && message.listLevelSettings.length) {
            object.listLevelSettings = [];
            for (var j = 0; j < message.listLevelSettings.length; ++j)
                object.listLevelSettings[j] = $root.ProtoListLevelSetting.toObject(message.listLevelSettings[j], options);
        }
        if (message.defaultListLevelSetting != null && message.hasOwnProperty("defaultListLevelSetting"))
            object.defaultListLevelSetting = $root.ProtoListLevelSetting.toObject(message.defaultListLevelSetting, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoListSetting to JSON.
     * @function toJSON
     * @memberof ProtoListSetting
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoListSetting.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoListSetting
     * @function getTypeUrl
     * @memberof ProtoListSetting
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoListSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoListSetting";
    };

    return ProtoListSetting;
})();

$root.ProtoBoxedListSetting = (function() {

    /**
     * Properties of a ProtoBoxedListSetting.
     * @name IProtoBoxedListSetting
     * @interface IProtoBoxedListSetting
     * @property {IProtoListSetting|null} [value] ProtoBoxedListSetting value
     * @property {boolean|null} [isNull] ProtoBoxedListSetting isNull
     */

    /**
     * Constructs a new ProtoBoxedListSetting.
     * @name ProtoBoxedListSetting
     * @classdesc Represents a ProtoBoxedListSetting.
     * @implements IProtoBoxedListSetting
     * @constructor
     * @param {IProtoBoxedListSetting=} [properties] Properties to set
     */
    function ProtoBoxedListSetting(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedListSetting value.
     * @member {IProtoListSetting|null|undefined} value
     * @memberof ProtoBoxedListSetting
     * @instance
     */
    ProtoBoxedListSetting.prototype.value = null;

    /**
     * ProtoBoxedListSetting isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedListSetting
     * @instance
     */
    ProtoBoxedListSetting.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedListSetting instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {IProtoBoxedListSetting=} [properties] Properties to set
     * @returns {ProtoBoxedListSetting} ProtoBoxedListSetting instance
     */
    ProtoBoxedListSetting.create = function create(properties) {
        return new ProtoBoxedListSetting(properties);
    };

    /**
     * Encodes the specified ProtoBoxedListSetting message. Does not implicitly {@link ProtoBoxedListSetting.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {IProtoBoxedListSetting} message ProtoBoxedListSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedListSetting.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            $root.ProtoListSetting.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedListSetting message, length delimited. Does not implicitly {@link ProtoBoxedListSetting.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {IProtoBoxedListSetting} message ProtoBoxedListSetting message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedListSetting.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedListSetting message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedListSetting} ProtoBoxedListSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedListSetting.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedListSetting();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = $root.ProtoListSetting.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedListSetting message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedListSetting} ProtoBoxedListSetting
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedListSetting.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedListSetting message.
     * @function verify
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedListSetting.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value")) {
            var error = $root.ProtoListSetting.verify(message.value);
            if (error)
                return "value." + error;
        }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedListSetting message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedListSetting} ProtoBoxedListSetting
     */
    ProtoBoxedListSetting.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedListSetting)
            return object;
        var message = new $root.ProtoBoxedListSetting();
        if (object.value != null) {
            if (typeof object.value !== "object")
                throw TypeError(".ProtoBoxedListSetting.value: object expected");
            message.value = $root.ProtoListSetting.fromObject(object.value);
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedListSetting message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {ProtoBoxedListSetting} message ProtoBoxedListSetting
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedListSetting.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = null;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = $root.ProtoListSetting.toObject(message.value, options);
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedListSetting to JSON.
     * @function toJSON
     * @memberof ProtoBoxedListSetting
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedListSetting.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedListSetting
     * @function getTypeUrl
     * @memberof ProtoBoxedListSetting
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedListSetting.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedListSetting";
    };

    return ProtoBoxedListSetting;
})();

$root.ProtoNamedString = (function() {

    /**
     * Properties of a ProtoNamedString.
     * @name IProtoNamedString
     * @interface IProtoNamedString
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoNamedString _children
     * @property {IProtoDocumentElement|null} [parent] ProtoNamedString parent
     * @property {string|null} [name] ProtoNamedString name
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoNamedString comChannelUUIDs
     * @property {string|null} [uuid] ProtoNamedString uuid
     * @property {string|null} [description] ProtoNamedString description
     * @property {string|null} [nameCode] ProtoNamedString nameCode
     * @property {boolean|null} [codeMode] ProtoNamedString codeMode
     */

    /**
     * Constructs a new ProtoNamedString.
     * @name ProtoNamedString
     * @classdesc Represents a ProtoNamedString.
     * @implements IProtoNamedString
     * @constructor
     * @param {IProtoNamedString=} [properties] Properties to set
     */
    function ProtoNamedString(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoNamedString _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoNamedString
     * @instance
     */
    ProtoNamedString.prototype._children = $util.emptyArray;

    /**
     * ProtoNamedString parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoNamedString
     * @instance
     */
    ProtoNamedString.prototype.parent = null;

    /**
     * ProtoNamedString name.
     * @member {string} name
     * @memberof ProtoNamedString
     * @instance
     */
    ProtoNamedString.prototype.name = "";

    /**
     * ProtoNamedString comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoNamedString
     * @instance
     */
    ProtoNamedString.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoNamedString uuid.
     * @member {string} uuid
     * @memberof ProtoNamedString
     * @instance
     */
    ProtoNamedString.prototype.uuid = "";

    /**
     * ProtoNamedString description.
     * @member {string} description
     * @memberof ProtoNamedString
     * @instance
     */
    ProtoNamedString.prototype.description = "";

    /**
     * ProtoNamedString nameCode.
     * @member {string} nameCode
     * @memberof ProtoNamedString
     * @instance
     */
    ProtoNamedString.prototype.nameCode = "";

    /**
     * ProtoNamedString codeMode.
     * @member {boolean} codeMode
     * @memberof ProtoNamedString
     * @instance
     */
    ProtoNamedString.prototype.codeMode = false;

    /**
     * Creates a new ProtoNamedString instance using the specified properties.
     * @function create
     * @memberof ProtoNamedString
     * @static
     * @param {IProtoNamedString=} [properties] Properties to set
     * @returns {ProtoNamedString} ProtoNamedString instance
     */
    ProtoNamedString.create = function create(properties) {
        return new ProtoNamedString(properties);
    };

    /**
     * Encodes the specified ProtoNamedString message. Does not implicitly {@link ProtoNamedString.verify|verify} messages.
     * @function encode
     * @memberof ProtoNamedString
     * @static
     * @param {IProtoNamedString} message ProtoNamedString message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoNamedString.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.uuid);
        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.description);
        if (message.nameCode != null && Object.hasOwnProperty.call(message, "nameCode"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.nameCode);
        if (message.codeMode != null && Object.hasOwnProperty.call(message, "codeMode"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.codeMode);
        return writer;
    };

    /**
     * Encodes the specified ProtoNamedString message, length delimited. Does not implicitly {@link ProtoNamedString.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoNamedString
     * @static
     * @param {IProtoNamedString} message ProtoNamedString message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoNamedString.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoNamedString message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoNamedString
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoNamedString} ProtoNamedString
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoNamedString.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoNamedString();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.uuid = reader.string();
                    break;
                }
            case 6: {
                    message.description = reader.string();
                    break;
                }
            case 7: {
                    message.nameCode = reader.string();
                    break;
                }
            case 8: {
                    message.codeMode = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoNamedString message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoNamedString
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoNamedString} ProtoNamedString
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoNamedString.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoNamedString message.
     * @function verify
     * @memberof ProtoNamedString
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoNamedString.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.description != null && message.hasOwnProperty("description"))
            if (!$util.isString(message.description))
                return "description: string expected";
        if (message.nameCode != null && message.hasOwnProperty("nameCode"))
            if (!$util.isString(message.nameCode))
                return "nameCode: string expected";
        if (message.codeMode != null && message.hasOwnProperty("codeMode"))
            if (typeof message.codeMode !== "boolean")
                return "codeMode: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoNamedString message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoNamedString
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoNamedString} ProtoNamedString
     */
    ProtoNamedString.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoNamedString)
            return object;
        var message = new $root.ProtoNamedString();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoNamedString._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoNamedString._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoNamedString.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.name != null)
            message.name = String(object.name);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoNamedString.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.description != null)
            message.description = String(object.description);
        if (object.nameCode != null)
            message.nameCode = String(object.nameCode);
        if (object.codeMode != null)
            message.codeMode = Boolean(object.codeMode);
        return message;
    };

    /**
     * Creates a plain object from a ProtoNamedString message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoNamedString
     * @static
     * @param {ProtoNamedString} message ProtoNamedString
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoNamedString.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.name = "";
            object.uuid = "";
            object.description = "";
            object.nameCode = "";
            object.codeMode = false;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.description != null && message.hasOwnProperty("description"))
            object.description = message.description;
        if (message.nameCode != null && message.hasOwnProperty("nameCode"))
            object.nameCode = message.nameCode;
        if (message.codeMode != null && message.hasOwnProperty("codeMode"))
            object.codeMode = message.codeMode;
        return object;
    };

    /**
     * Converts this ProtoNamedString to JSON.
     * @function toJSON
     * @memberof ProtoNamedString
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoNamedString.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoNamedString
     * @function getTypeUrl
     * @memberof ProtoNamedString
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoNamedString.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoNamedString";
    };

    return ProtoNamedString;
})();

$root.ProtoParagraph = (function() {

    /**
     * Properties of a ProtoParagraph.
     * @name IProtoParagraph
     * @interface IProtoParagraph
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoParagraph _children
     * @property {IProtoDocumentElement|null} [parent] ProtoParagraph parent
     * @property {IProtoParagraphFormat|null} [format] ProtoParagraph format
     * @property {IProtoParagraphFormat|null} [overwrite] ProtoParagraph overwrite
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoParagraph comChannelUUIDs
     * @property {string|null} [paragraphFormatUUID] ProtoParagraph paragraphFormatUUID
     * @property {string|null} [uuid] ProtoParagraph uuid
     */

    /**
     * Constructs a new ProtoParagraph.
     * @name ProtoParagraph
     * @classdesc Represents a ProtoParagraph.
     * @implements IProtoParagraph
     * @constructor
     * @param {IProtoParagraph=} [properties] Properties to set
     */
    function ProtoParagraph(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoParagraph _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoParagraph
     * @instance
     */
    ProtoParagraph.prototype._children = $util.emptyArray;

    /**
     * ProtoParagraph parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoParagraph
     * @instance
     */
    ProtoParagraph.prototype.parent = null;

    /**
     * ProtoParagraph format.
     * @member {IProtoParagraphFormat|null|undefined} format
     * @memberof ProtoParagraph
     * @instance
     */
    ProtoParagraph.prototype.format = null;

    /**
     * ProtoParagraph overwrite.
     * @member {IProtoParagraphFormat|null|undefined} overwrite
     * @memberof ProtoParagraph
     * @instance
     */
    ProtoParagraph.prototype.overwrite = null;

    /**
     * ProtoParagraph comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoParagraph
     * @instance
     */
    ProtoParagraph.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoParagraph paragraphFormatUUID.
     * @member {string} paragraphFormatUUID
     * @memberof ProtoParagraph
     * @instance
     */
    ProtoParagraph.prototype.paragraphFormatUUID = "";

    /**
     * ProtoParagraph uuid.
     * @member {string} uuid
     * @memberof ProtoParagraph
     * @instance
     */
    ProtoParagraph.prototype.uuid = "";

    /**
     * Creates a new ProtoParagraph instance using the specified properties.
     * @function create
     * @memberof ProtoParagraph
     * @static
     * @param {IProtoParagraph=} [properties] Properties to set
     * @returns {ProtoParagraph} ProtoParagraph instance
     */
    ProtoParagraph.create = function create(properties) {
        return new ProtoParagraph(properties);
    };

    /**
     * Encodes the specified ProtoParagraph message. Does not implicitly {@link ProtoParagraph.verify|verify} messages.
     * @function encode
     * @memberof ProtoParagraph
     * @static
     * @param {IProtoParagraph} message ProtoParagraph message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoParagraph.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.format != null && Object.hasOwnProperty.call(message, "format"))
            $root.ProtoParagraphFormat.encode(message.format, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.overwrite != null && Object.hasOwnProperty.call(message, "overwrite"))
            $root.ProtoParagraphFormat.encode(message.overwrite, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        if (message.paragraphFormatUUID != null && Object.hasOwnProperty.call(message, "paragraphFormatUUID"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.paragraphFormatUUID);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.uuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoParagraph message, length delimited. Does not implicitly {@link ProtoParagraph.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoParagraph
     * @static
     * @param {IProtoParagraph} message ProtoParagraph message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoParagraph.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoParagraph message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoParagraph
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoParagraph} ProtoParagraph
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoParagraph.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoParagraph();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.format = $root.ProtoParagraphFormat.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.overwrite = $root.ProtoParagraphFormat.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 6: {
                    message.paragraphFormatUUID = reader.string();
                    break;
                }
            case 7: {
                    message.uuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoParagraph message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoParagraph
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoParagraph} ProtoParagraph
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoParagraph.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoParagraph message.
     * @function verify
     * @memberof ProtoParagraph
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoParagraph.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.format != null && message.hasOwnProperty("format")) {
            var error = $root.ProtoParagraphFormat.verify(message.format);
            if (error)
                return "format." + error;
        }
        if (message.overwrite != null && message.hasOwnProperty("overwrite")) {
            var error = $root.ProtoParagraphFormat.verify(message.overwrite);
            if (error)
                return "overwrite." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.paragraphFormatUUID != null && message.hasOwnProperty("paragraphFormatUUID"))
            if (!$util.isString(message.paragraphFormatUUID))
                return "paragraphFormatUUID: string expected";
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoParagraph message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoParagraph
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoParagraph} ProtoParagraph
     */
    ProtoParagraph.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoParagraph)
            return object;
        var message = new $root.ProtoParagraph();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoParagraph._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoParagraph._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoParagraph.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.format != null) {
            if (typeof object.format !== "object")
                throw TypeError(".ProtoParagraph.format: object expected");
            message.format = $root.ProtoParagraphFormat.fromObject(object.format);
        }
        if (object.overwrite != null) {
            if (typeof object.overwrite !== "object")
                throw TypeError(".ProtoParagraph.overwrite: object expected");
            message.overwrite = $root.ProtoParagraphFormat.fromObject(object.overwrite);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoParagraph.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.paragraphFormatUUID != null)
            message.paragraphFormatUUID = String(object.paragraphFormatUUID);
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoParagraph message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoParagraph
     * @static
     * @param {ProtoParagraph} message ProtoParagraph
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoParagraph.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.format = null;
            object.overwrite = null;
            object.paragraphFormatUUID = "";
            object.uuid = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.format != null && message.hasOwnProperty("format"))
            object.format = $root.ProtoParagraphFormat.toObject(message.format, options);
        if (message.overwrite != null && message.hasOwnProperty("overwrite"))
            object.overwrite = $root.ProtoParagraphFormat.toObject(message.overwrite, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.paragraphFormatUUID != null && message.hasOwnProperty("paragraphFormatUUID"))
            object.paragraphFormatUUID = message.paragraphFormatUUID;
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        return object;
    };

    /**
     * Converts this ProtoParagraph to JSON.
     * @function toJSON
     * @memberof ProtoParagraph
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoParagraph.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoParagraph
     * @function getTypeUrl
     * @memberof ProtoParagraph
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoParagraph.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoParagraph";
    };

    return ProtoParagraph;
})();

$root.ProtoParagraphFormat = (function() {

    /**
     * Properties of a ProtoParagraphFormat.
     * @name IProtoParagraphFormat
     * @interface IProtoParagraphFormat
     * @property {IProtoParagraphFormat|null} [baseFormat] ProtoParagraphFormat baseFormat
     * @property {IProtoBoxedString|null} [name] ProtoParagraphFormat name
     * @property {IProtoBoxedBool|null} ["default"] ProtoParagraphFormat default
     * @property {IProtoBoxedFont|null} [font] ProtoParagraphFormat font
     * @property {IProtoBoxedBool|null} [bold] ProtoParagraphFormat bold
     * @property {IProtoBoxedBool|null} [italic] ProtoParagraphFormat italic
     * @property {IProtoBoxedColor|null} [fontColor] ProtoParagraphFormat fontColor
     * @property {IProtoBoxedUnderlineSpec|null} [underline] ProtoParagraphFormat underline
     * @property {IProtoBoxedMeasure|null} [fontSize] ProtoParagraphFormat fontSize
     * @property {IProtoBoxedMeasure|null} [characterWidth] ProtoParagraphFormat characterWidth
     * @property {IProtoBoxedMeasure|null} [characterSpacing] ProtoParagraphFormat characterSpacing
     * @property {IProtoBoxedMeasure|null} [lineFeed] ProtoParagraphFormat lineFeed
     * @property {IProtoBoxedHorizontalAlignment|null} [alignment] ProtoParagraphFormat alignment
     * @property {IProtoBoxedMeasure|null} [indentionWidth] ProtoParagraphFormat indentionWidth
     * @property {IProtoBoxedInt32|null} [indentionLevel] ProtoParagraphFormat indentionLevel
     * @property {IProtoBoxedMeasure|null} [spaceAbove] ProtoParagraphFormat spaceAbove
     * @property {IProtoBoxedMeasure|null} [spaceBelow] ProtoParagraphFormat spaceBelow
     * @property {IProtoBoxedInt32|null} [widowSetting] ProtoParagraphFormat widowSetting
     * @property {IProtoBoxedInt32|null} [orphanSetting] ProtoParagraphFormat orphanSetting
     * @property {IProtoBoxedInt32|null} [widowPriority] ProtoParagraphFormat widowPriority
     * @property {IProtoBoxedStrikethroughSpec|null} [strikethrough] ProtoParagraphFormat strikethrough
     * @property {IProtoBoxedSPBMode|null} [superscriptSubscript] ProtoParagraphFormat superscriptSubscript
     * @property {IProtoBoxedColor|null} [backgroundColor] ProtoParagraphFormat backgroundColor
     * @property {IProtoBoxedListSetting|null} [listSetting] ProtoParagraphFormat listSetting
     * @property {IProtoBoxedBool|null} [hyphenation] ProtoParagraphFormat hyphenation
     * @property {IProtoBoxedString|null} [preNamedString] ProtoParagraphFormat preNamedString
     * @property {IProtoBoxedString|null} [postNamedString] ProtoParagraphFormat postNamedString
     * @property {IProtoBoxedString|null} [semanticType] ProtoParagraphFormat semanticType
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoParagraphFormat comChannelUUIDs
     */

    /**
     * Constructs a new ProtoParagraphFormat.
     * @name ProtoParagraphFormat
     * @classdesc Represents a ProtoParagraphFormat.
     * @implements IProtoParagraphFormat
     * @constructor
     * @param {IProtoParagraphFormat=} [properties] Properties to set
     */
    function ProtoParagraphFormat(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoParagraphFormat baseFormat.
     * @member {IProtoParagraphFormat|null|undefined} baseFormat
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.baseFormat = null;

    /**
     * ProtoParagraphFormat name.
     * @member {IProtoBoxedString|null|undefined} name
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.name = null;

    /**
     * ProtoParagraphFormat default.
     * @member {IProtoBoxedBool|null|undefined} default
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype["default"] = null;

    /**
     * ProtoParagraphFormat font.
     * @member {IProtoBoxedFont|null|undefined} font
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.font = null;

    /**
     * ProtoParagraphFormat bold.
     * @member {IProtoBoxedBool|null|undefined} bold
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.bold = null;

    /**
     * ProtoParagraphFormat italic.
     * @member {IProtoBoxedBool|null|undefined} italic
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.italic = null;

    /**
     * ProtoParagraphFormat fontColor.
     * @member {IProtoBoxedColor|null|undefined} fontColor
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.fontColor = null;

    /**
     * ProtoParagraphFormat underline.
     * @member {IProtoBoxedUnderlineSpec|null|undefined} underline
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.underline = null;

    /**
     * ProtoParagraphFormat fontSize.
     * @member {IProtoBoxedMeasure|null|undefined} fontSize
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.fontSize = null;

    /**
     * ProtoParagraphFormat characterWidth.
     * @member {IProtoBoxedMeasure|null|undefined} characterWidth
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.characterWidth = null;

    /**
     * ProtoParagraphFormat characterSpacing.
     * @member {IProtoBoxedMeasure|null|undefined} characterSpacing
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.characterSpacing = null;

    /**
     * ProtoParagraphFormat lineFeed.
     * @member {IProtoBoxedMeasure|null|undefined} lineFeed
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.lineFeed = null;

    /**
     * ProtoParagraphFormat alignment.
     * @member {IProtoBoxedHorizontalAlignment|null|undefined} alignment
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.alignment = null;

    /**
     * ProtoParagraphFormat indentionWidth.
     * @member {IProtoBoxedMeasure|null|undefined} indentionWidth
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.indentionWidth = null;

    /**
     * ProtoParagraphFormat indentionLevel.
     * @member {IProtoBoxedInt32|null|undefined} indentionLevel
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.indentionLevel = null;

    /**
     * ProtoParagraphFormat spaceAbove.
     * @member {IProtoBoxedMeasure|null|undefined} spaceAbove
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.spaceAbove = null;

    /**
     * ProtoParagraphFormat spaceBelow.
     * @member {IProtoBoxedMeasure|null|undefined} spaceBelow
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.spaceBelow = null;

    /**
     * ProtoParagraphFormat widowSetting.
     * @member {IProtoBoxedInt32|null|undefined} widowSetting
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.widowSetting = null;

    /**
     * ProtoParagraphFormat orphanSetting.
     * @member {IProtoBoxedInt32|null|undefined} orphanSetting
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.orphanSetting = null;

    /**
     * ProtoParagraphFormat widowPriority.
     * @member {IProtoBoxedInt32|null|undefined} widowPriority
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.widowPriority = null;

    /**
     * ProtoParagraphFormat strikethrough.
     * @member {IProtoBoxedStrikethroughSpec|null|undefined} strikethrough
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.strikethrough = null;

    /**
     * ProtoParagraphFormat superscriptSubscript.
     * @member {IProtoBoxedSPBMode|null|undefined} superscriptSubscript
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.superscriptSubscript = null;

    /**
     * ProtoParagraphFormat backgroundColor.
     * @member {IProtoBoxedColor|null|undefined} backgroundColor
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.backgroundColor = null;

    /**
     * ProtoParagraphFormat listSetting.
     * @member {IProtoBoxedListSetting|null|undefined} listSetting
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.listSetting = null;

    /**
     * ProtoParagraphFormat hyphenation.
     * @member {IProtoBoxedBool|null|undefined} hyphenation
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.hyphenation = null;

    /**
     * ProtoParagraphFormat preNamedString.
     * @member {IProtoBoxedString|null|undefined} preNamedString
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.preNamedString = null;

    /**
     * ProtoParagraphFormat postNamedString.
     * @member {IProtoBoxedString|null|undefined} postNamedString
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.postNamedString = null;

    /**
     * ProtoParagraphFormat semanticType.
     * @member {IProtoBoxedString|null|undefined} semanticType
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.semanticType = null;

    /**
     * ProtoParagraphFormat comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoParagraphFormat
     * @instance
     */
    ProtoParagraphFormat.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoParagraphFormat instance using the specified properties.
     * @function create
     * @memberof ProtoParagraphFormat
     * @static
     * @param {IProtoParagraphFormat=} [properties] Properties to set
     * @returns {ProtoParagraphFormat} ProtoParagraphFormat instance
     */
    ProtoParagraphFormat.create = function create(properties) {
        return new ProtoParagraphFormat(properties);
    };

    /**
     * Encodes the specified ProtoParagraphFormat message. Does not implicitly {@link ProtoParagraphFormat.verify|verify} messages.
     * @function encode
     * @memberof ProtoParagraphFormat
     * @static
     * @param {IProtoParagraphFormat} message ProtoParagraphFormat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoParagraphFormat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.baseFormat != null && Object.hasOwnProperty.call(message, "baseFormat"))
            $root.ProtoParagraphFormat.encode(message.baseFormat, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            $root.ProtoBoxedString.encode(message.name, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message["default"] != null && Object.hasOwnProperty.call(message, "default"))
            $root.ProtoBoxedBool.encode(message["default"], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.font != null && Object.hasOwnProperty.call(message, "font"))
            $root.ProtoBoxedFont.encode(message.font, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.bold != null && Object.hasOwnProperty.call(message, "bold"))
            $root.ProtoBoxedBool.encode(message.bold, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.italic != null && Object.hasOwnProperty.call(message, "italic"))
            $root.ProtoBoxedBool.encode(message.italic, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.fontColor != null && Object.hasOwnProperty.call(message, "fontColor"))
            $root.ProtoBoxedColor.encode(message.fontColor, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.underline != null && Object.hasOwnProperty.call(message, "underline"))
            $root.ProtoBoxedUnderlineSpec.encode(message.underline, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.fontSize != null && Object.hasOwnProperty.call(message, "fontSize"))
            $root.ProtoBoxedMeasure.encode(message.fontSize, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.characterWidth != null && Object.hasOwnProperty.call(message, "characterWidth"))
            $root.ProtoBoxedMeasure.encode(message.characterWidth, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.characterSpacing != null && Object.hasOwnProperty.call(message, "characterSpacing"))
            $root.ProtoBoxedMeasure.encode(message.characterSpacing, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.lineFeed != null && Object.hasOwnProperty.call(message, "lineFeed"))
            $root.ProtoBoxedMeasure.encode(message.lineFeed, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.alignment != null && Object.hasOwnProperty.call(message, "alignment"))
            $root.ProtoBoxedHorizontalAlignment.encode(message.alignment, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.indentionWidth != null && Object.hasOwnProperty.call(message, "indentionWidth"))
            $root.ProtoBoxedMeasure.encode(message.indentionWidth, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.indentionLevel != null && Object.hasOwnProperty.call(message, "indentionLevel"))
            $root.ProtoBoxedInt32.encode(message.indentionLevel, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.spaceAbove != null && Object.hasOwnProperty.call(message, "spaceAbove"))
            $root.ProtoBoxedMeasure.encode(message.spaceAbove, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.spaceBelow != null && Object.hasOwnProperty.call(message, "spaceBelow"))
            $root.ProtoBoxedMeasure.encode(message.spaceBelow, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.widowSetting != null && Object.hasOwnProperty.call(message, "widowSetting"))
            $root.ProtoBoxedInt32.encode(message.widowSetting, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
        if (message.orphanSetting != null && Object.hasOwnProperty.call(message, "orphanSetting"))
            $root.ProtoBoxedInt32.encode(message.orphanSetting, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.widowPriority != null && Object.hasOwnProperty.call(message, "widowPriority"))
            $root.ProtoBoxedInt32.encode(message.widowPriority, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.strikethrough != null && Object.hasOwnProperty.call(message, "strikethrough"))
            $root.ProtoBoxedStrikethroughSpec.encode(message.strikethrough, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.superscriptSubscript != null && Object.hasOwnProperty.call(message, "superscriptSubscript"))
            $root.ProtoBoxedSPBMode.encode(message.superscriptSubscript, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.backgroundColor != null && Object.hasOwnProperty.call(message, "backgroundColor"))
            $root.ProtoBoxedColor.encode(message.backgroundColor, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
        if (message.listSetting != null && Object.hasOwnProperty.call(message, "listSetting"))
            $root.ProtoBoxedListSetting.encode(message.listSetting, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
        if (message.hyphenation != null && Object.hasOwnProperty.call(message, "hyphenation"))
            $root.ProtoBoxedBool.encode(message.hyphenation, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
        if (message.preNamedString != null && Object.hasOwnProperty.call(message, "preNamedString"))
            $root.ProtoBoxedString.encode(message.preNamedString, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        if (message.postNamedString != null && Object.hasOwnProperty.call(message, "postNamedString"))
            $root.ProtoBoxedString.encode(message.postNamedString, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
        if (message.semanticType != null && Object.hasOwnProperty.call(message, "semanticType"))
            $root.ProtoBoxedString.encode(message.semanticType, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 29, wireType 2 =*/234).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoParagraphFormat message, length delimited. Does not implicitly {@link ProtoParagraphFormat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoParagraphFormat
     * @static
     * @param {IProtoParagraphFormat} message ProtoParagraphFormat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoParagraphFormat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoParagraphFormat message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoParagraphFormat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoParagraphFormat} ProtoParagraphFormat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoParagraphFormat.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoParagraphFormat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.baseFormat = $root.ProtoParagraphFormat.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.name = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message["default"] = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.font = $root.ProtoBoxedFont.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.bold = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.italic = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.fontColor = $root.ProtoBoxedColor.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.underline = $root.ProtoBoxedUnderlineSpec.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.fontSize = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 10: {
                    message.characterWidth = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 11: {
                    message.characterSpacing = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.lineFeed = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.alignment = $root.ProtoBoxedHorizontalAlignment.decode(reader, reader.uint32());
                    break;
                }
            case 14: {
                    message.indentionWidth = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 15: {
                    message.indentionLevel = $root.ProtoBoxedInt32.decode(reader, reader.uint32());
                    break;
                }
            case 16: {
                    message.spaceAbove = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 17: {
                    message.spaceBelow = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 18: {
                    message.widowSetting = $root.ProtoBoxedInt32.decode(reader, reader.uint32());
                    break;
                }
            case 19: {
                    message.orphanSetting = $root.ProtoBoxedInt32.decode(reader, reader.uint32());
                    break;
                }
            case 20: {
                    message.widowPriority = $root.ProtoBoxedInt32.decode(reader, reader.uint32());
                    break;
                }
            case 21: {
                    message.strikethrough = $root.ProtoBoxedStrikethroughSpec.decode(reader, reader.uint32());
                    break;
                }
            case 22: {
                    message.superscriptSubscript = $root.ProtoBoxedSPBMode.decode(reader, reader.uint32());
                    break;
                }
            case 23: {
                    message.backgroundColor = $root.ProtoBoxedColor.decode(reader, reader.uint32());
                    break;
                }
            case 24: {
                    message.listSetting = $root.ProtoBoxedListSetting.decode(reader, reader.uint32());
                    break;
                }
            case 25: {
                    message.hyphenation = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 26: {
                    message.preNamedString = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            case 27: {
                    message.postNamedString = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            case 28: {
                    message.semanticType = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            case 29: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoParagraphFormat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoParagraphFormat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoParagraphFormat} ProtoParagraphFormat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoParagraphFormat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoParagraphFormat message.
     * @function verify
     * @memberof ProtoParagraphFormat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoParagraphFormat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.baseFormat != null && message.hasOwnProperty("baseFormat")) {
            var error = $root.ProtoParagraphFormat.verify(message.baseFormat);
            if (error)
                return "baseFormat." + error;
        }
        if (message.name != null && message.hasOwnProperty("name")) {
            var error = $root.ProtoBoxedString.verify(message.name);
            if (error)
                return "name." + error;
        }
        if (message["default"] != null && message.hasOwnProperty("default")) {
            var error = $root.ProtoBoxedBool.verify(message["default"]);
            if (error)
                return "default." + error;
        }
        if (message.font != null && message.hasOwnProperty("font")) {
            var error = $root.ProtoBoxedFont.verify(message.font);
            if (error)
                return "font." + error;
        }
        if (message.bold != null && message.hasOwnProperty("bold")) {
            var error = $root.ProtoBoxedBool.verify(message.bold);
            if (error)
                return "bold." + error;
        }
        if (message.italic != null && message.hasOwnProperty("italic")) {
            var error = $root.ProtoBoxedBool.verify(message.italic);
            if (error)
                return "italic." + error;
        }
        if (message.fontColor != null && message.hasOwnProperty("fontColor")) {
            var error = $root.ProtoBoxedColor.verify(message.fontColor);
            if (error)
                return "fontColor." + error;
        }
        if (message.underline != null && message.hasOwnProperty("underline")) {
            var error = $root.ProtoBoxedUnderlineSpec.verify(message.underline);
            if (error)
                return "underline." + error;
        }
        if (message.fontSize != null && message.hasOwnProperty("fontSize")) {
            var error = $root.ProtoBoxedMeasure.verify(message.fontSize);
            if (error)
                return "fontSize." + error;
        }
        if (message.characterWidth != null && message.hasOwnProperty("characterWidth")) {
            var error = $root.ProtoBoxedMeasure.verify(message.characterWidth);
            if (error)
                return "characterWidth." + error;
        }
        if (message.characterSpacing != null && message.hasOwnProperty("characterSpacing")) {
            var error = $root.ProtoBoxedMeasure.verify(message.characterSpacing);
            if (error)
                return "characterSpacing." + error;
        }
        if (message.lineFeed != null && message.hasOwnProperty("lineFeed")) {
            var error = $root.ProtoBoxedMeasure.verify(message.lineFeed);
            if (error)
                return "lineFeed." + error;
        }
        if (message.alignment != null && message.hasOwnProperty("alignment")) {
            var error = $root.ProtoBoxedHorizontalAlignment.verify(message.alignment);
            if (error)
                return "alignment." + error;
        }
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth")) {
            var error = $root.ProtoBoxedMeasure.verify(message.indentionWidth);
            if (error)
                return "indentionWidth." + error;
        }
        if (message.indentionLevel != null && message.hasOwnProperty("indentionLevel")) {
            var error = $root.ProtoBoxedInt32.verify(message.indentionLevel);
            if (error)
                return "indentionLevel." + error;
        }
        if (message.spaceAbove != null && message.hasOwnProperty("spaceAbove")) {
            var error = $root.ProtoBoxedMeasure.verify(message.spaceAbove);
            if (error)
                return "spaceAbove." + error;
        }
        if (message.spaceBelow != null && message.hasOwnProperty("spaceBelow")) {
            var error = $root.ProtoBoxedMeasure.verify(message.spaceBelow);
            if (error)
                return "spaceBelow." + error;
        }
        if (message.widowSetting != null && message.hasOwnProperty("widowSetting")) {
            var error = $root.ProtoBoxedInt32.verify(message.widowSetting);
            if (error)
                return "widowSetting." + error;
        }
        if (message.orphanSetting != null && message.hasOwnProperty("orphanSetting")) {
            var error = $root.ProtoBoxedInt32.verify(message.orphanSetting);
            if (error)
                return "orphanSetting." + error;
        }
        if (message.widowPriority != null && message.hasOwnProperty("widowPriority")) {
            var error = $root.ProtoBoxedInt32.verify(message.widowPriority);
            if (error)
                return "widowPriority." + error;
        }
        if (message.strikethrough != null && message.hasOwnProperty("strikethrough")) {
            var error = $root.ProtoBoxedStrikethroughSpec.verify(message.strikethrough);
            if (error)
                return "strikethrough." + error;
        }
        if (message.superscriptSubscript != null && message.hasOwnProperty("superscriptSubscript")) {
            var error = $root.ProtoBoxedSPBMode.verify(message.superscriptSubscript);
            if (error)
                return "superscriptSubscript." + error;
        }
        if (message.backgroundColor != null && message.hasOwnProperty("backgroundColor")) {
            var error = $root.ProtoBoxedColor.verify(message.backgroundColor);
            if (error)
                return "backgroundColor." + error;
        }
        if (message.listSetting != null && message.hasOwnProperty("listSetting")) {
            var error = $root.ProtoBoxedListSetting.verify(message.listSetting);
            if (error)
                return "listSetting." + error;
        }
        if (message.hyphenation != null && message.hasOwnProperty("hyphenation")) {
            var error = $root.ProtoBoxedBool.verify(message.hyphenation);
            if (error)
                return "hyphenation." + error;
        }
        if (message.preNamedString != null && message.hasOwnProperty("preNamedString")) {
            var error = $root.ProtoBoxedString.verify(message.preNamedString);
            if (error)
                return "preNamedString." + error;
        }
        if (message.postNamedString != null && message.hasOwnProperty("postNamedString")) {
            var error = $root.ProtoBoxedString.verify(message.postNamedString);
            if (error)
                return "postNamedString." + error;
        }
        if (message.semanticType != null && message.hasOwnProperty("semanticType")) {
            var error = $root.ProtoBoxedString.verify(message.semanticType);
            if (error)
                return "semanticType." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoParagraphFormat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoParagraphFormat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoParagraphFormat} ProtoParagraphFormat
     */
    ProtoParagraphFormat.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoParagraphFormat)
            return object;
        var message = new $root.ProtoParagraphFormat();
        if (object.baseFormat != null) {
            if (typeof object.baseFormat !== "object")
                throw TypeError(".ProtoParagraphFormat.baseFormat: object expected");
            message.baseFormat = $root.ProtoParagraphFormat.fromObject(object.baseFormat);
        }
        if (object.name != null) {
            if (typeof object.name !== "object")
                throw TypeError(".ProtoParagraphFormat.name: object expected");
            message.name = $root.ProtoBoxedString.fromObject(object.name);
        }
        if (object["default"] != null) {
            if (typeof object["default"] !== "object")
                throw TypeError(".ProtoParagraphFormat.default: object expected");
            message["default"] = $root.ProtoBoxedBool.fromObject(object["default"]);
        }
        if (object.font != null) {
            if (typeof object.font !== "object")
                throw TypeError(".ProtoParagraphFormat.font: object expected");
            message.font = $root.ProtoBoxedFont.fromObject(object.font);
        }
        if (object.bold != null) {
            if (typeof object.bold !== "object")
                throw TypeError(".ProtoParagraphFormat.bold: object expected");
            message.bold = $root.ProtoBoxedBool.fromObject(object.bold);
        }
        if (object.italic != null) {
            if (typeof object.italic !== "object")
                throw TypeError(".ProtoParagraphFormat.italic: object expected");
            message.italic = $root.ProtoBoxedBool.fromObject(object.italic);
        }
        if (object.fontColor != null) {
            if (typeof object.fontColor !== "object")
                throw TypeError(".ProtoParagraphFormat.fontColor: object expected");
            message.fontColor = $root.ProtoBoxedColor.fromObject(object.fontColor);
        }
        if (object.underline != null) {
            if (typeof object.underline !== "object")
                throw TypeError(".ProtoParagraphFormat.underline: object expected");
            message.underline = $root.ProtoBoxedUnderlineSpec.fromObject(object.underline);
        }
        if (object.fontSize != null) {
            if (typeof object.fontSize !== "object")
                throw TypeError(".ProtoParagraphFormat.fontSize: object expected");
            message.fontSize = $root.ProtoBoxedMeasure.fromObject(object.fontSize);
        }
        if (object.characterWidth != null) {
            if (typeof object.characterWidth !== "object")
                throw TypeError(".ProtoParagraphFormat.characterWidth: object expected");
            message.characterWidth = $root.ProtoBoxedMeasure.fromObject(object.characterWidth);
        }
        if (object.characterSpacing != null) {
            if (typeof object.characterSpacing !== "object")
                throw TypeError(".ProtoParagraphFormat.characterSpacing: object expected");
            message.characterSpacing = $root.ProtoBoxedMeasure.fromObject(object.characterSpacing);
        }
        if (object.lineFeed != null) {
            if (typeof object.lineFeed !== "object")
                throw TypeError(".ProtoParagraphFormat.lineFeed: object expected");
            message.lineFeed = $root.ProtoBoxedMeasure.fromObject(object.lineFeed);
        }
        if (object.alignment != null) {
            if (typeof object.alignment !== "object")
                throw TypeError(".ProtoParagraphFormat.alignment: object expected");
            message.alignment = $root.ProtoBoxedHorizontalAlignment.fromObject(object.alignment);
        }
        if (object.indentionWidth != null) {
            if (typeof object.indentionWidth !== "object")
                throw TypeError(".ProtoParagraphFormat.indentionWidth: object expected");
            message.indentionWidth = $root.ProtoBoxedMeasure.fromObject(object.indentionWidth);
        }
        if (object.indentionLevel != null) {
            if (typeof object.indentionLevel !== "object")
                throw TypeError(".ProtoParagraphFormat.indentionLevel: object expected");
            message.indentionLevel = $root.ProtoBoxedInt32.fromObject(object.indentionLevel);
        }
        if (object.spaceAbove != null) {
            if (typeof object.spaceAbove !== "object")
                throw TypeError(".ProtoParagraphFormat.spaceAbove: object expected");
            message.spaceAbove = $root.ProtoBoxedMeasure.fromObject(object.spaceAbove);
        }
        if (object.spaceBelow != null) {
            if (typeof object.spaceBelow !== "object")
                throw TypeError(".ProtoParagraphFormat.spaceBelow: object expected");
            message.spaceBelow = $root.ProtoBoxedMeasure.fromObject(object.spaceBelow);
        }
        if (object.widowSetting != null) {
            if (typeof object.widowSetting !== "object")
                throw TypeError(".ProtoParagraphFormat.widowSetting: object expected");
            message.widowSetting = $root.ProtoBoxedInt32.fromObject(object.widowSetting);
        }
        if (object.orphanSetting != null) {
            if (typeof object.orphanSetting !== "object")
                throw TypeError(".ProtoParagraphFormat.orphanSetting: object expected");
            message.orphanSetting = $root.ProtoBoxedInt32.fromObject(object.orphanSetting);
        }
        if (object.widowPriority != null) {
            if (typeof object.widowPriority !== "object")
                throw TypeError(".ProtoParagraphFormat.widowPriority: object expected");
            message.widowPriority = $root.ProtoBoxedInt32.fromObject(object.widowPriority);
        }
        if (object.strikethrough != null) {
            if (typeof object.strikethrough !== "object")
                throw TypeError(".ProtoParagraphFormat.strikethrough: object expected");
            message.strikethrough = $root.ProtoBoxedStrikethroughSpec.fromObject(object.strikethrough);
        }
        if (object.superscriptSubscript != null) {
            if (typeof object.superscriptSubscript !== "object")
                throw TypeError(".ProtoParagraphFormat.superscriptSubscript: object expected");
            message.superscriptSubscript = $root.ProtoBoxedSPBMode.fromObject(object.superscriptSubscript);
        }
        if (object.backgroundColor != null) {
            if (typeof object.backgroundColor !== "object")
                throw TypeError(".ProtoParagraphFormat.backgroundColor: object expected");
            message.backgroundColor = $root.ProtoBoxedColor.fromObject(object.backgroundColor);
        }
        if (object.listSetting != null) {
            if (typeof object.listSetting !== "object")
                throw TypeError(".ProtoParagraphFormat.listSetting: object expected");
            message.listSetting = $root.ProtoBoxedListSetting.fromObject(object.listSetting);
        }
        if (object.hyphenation != null) {
            if (typeof object.hyphenation !== "object")
                throw TypeError(".ProtoParagraphFormat.hyphenation: object expected");
            message.hyphenation = $root.ProtoBoxedBool.fromObject(object.hyphenation);
        }
        if (object.preNamedString != null) {
            if (typeof object.preNamedString !== "object")
                throw TypeError(".ProtoParagraphFormat.preNamedString: object expected");
            message.preNamedString = $root.ProtoBoxedString.fromObject(object.preNamedString);
        }
        if (object.postNamedString != null) {
            if (typeof object.postNamedString !== "object")
                throw TypeError(".ProtoParagraphFormat.postNamedString: object expected");
            message.postNamedString = $root.ProtoBoxedString.fromObject(object.postNamedString);
        }
        if (object.semanticType != null) {
            if (typeof object.semanticType !== "object")
                throw TypeError(".ProtoParagraphFormat.semanticType: object expected");
            message.semanticType = $root.ProtoBoxedString.fromObject(object.semanticType);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoParagraphFormat.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoParagraphFormat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoParagraphFormat
     * @static
     * @param {ProtoParagraphFormat} message ProtoParagraphFormat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoParagraphFormat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.baseFormat = null;
            object.name = null;
            object["default"] = null;
            object.font = null;
            object.bold = null;
            object.italic = null;
            object.fontColor = null;
            object.underline = null;
            object.fontSize = null;
            object.characterWidth = null;
            object.characterSpacing = null;
            object.lineFeed = null;
            object.alignment = null;
            object.indentionWidth = null;
            object.indentionLevel = null;
            object.spaceAbove = null;
            object.spaceBelow = null;
            object.widowSetting = null;
            object.orphanSetting = null;
            object.widowPriority = null;
            object.strikethrough = null;
            object.superscriptSubscript = null;
            object.backgroundColor = null;
            object.listSetting = null;
            object.hyphenation = null;
            object.preNamedString = null;
            object.postNamedString = null;
            object.semanticType = null;
        }
        if (message.baseFormat != null && message.hasOwnProperty("baseFormat"))
            object.baseFormat = $root.ProtoParagraphFormat.toObject(message.baseFormat, options);
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = $root.ProtoBoxedString.toObject(message.name, options);
        if (message["default"] != null && message.hasOwnProperty("default"))
            object["default"] = $root.ProtoBoxedBool.toObject(message["default"], options);
        if (message.font != null && message.hasOwnProperty("font"))
            object.font = $root.ProtoBoxedFont.toObject(message.font, options);
        if (message.bold != null && message.hasOwnProperty("bold"))
            object.bold = $root.ProtoBoxedBool.toObject(message.bold, options);
        if (message.italic != null && message.hasOwnProperty("italic"))
            object.italic = $root.ProtoBoxedBool.toObject(message.italic, options);
        if (message.fontColor != null && message.hasOwnProperty("fontColor"))
            object.fontColor = $root.ProtoBoxedColor.toObject(message.fontColor, options);
        if (message.underline != null && message.hasOwnProperty("underline"))
            object.underline = $root.ProtoBoxedUnderlineSpec.toObject(message.underline, options);
        if (message.fontSize != null && message.hasOwnProperty("fontSize"))
            object.fontSize = $root.ProtoBoxedMeasure.toObject(message.fontSize, options);
        if (message.characterWidth != null && message.hasOwnProperty("characterWidth"))
            object.characterWidth = $root.ProtoBoxedMeasure.toObject(message.characterWidth, options);
        if (message.characterSpacing != null && message.hasOwnProperty("characterSpacing"))
            object.characterSpacing = $root.ProtoBoxedMeasure.toObject(message.characterSpacing, options);
        if (message.lineFeed != null && message.hasOwnProperty("lineFeed"))
            object.lineFeed = $root.ProtoBoxedMeasure.toObject(message.lineFeed, options);
        if (message.alignment != null && message.hasOwnProperty("alignment"))
            object.alignment = $root.ProtoBoxedHorizontalAlignment.toObject(message.alignment, options);
        if (message.indentionWidth != null && message.hasOwnProperty("indentionWidth"))
            object.indentionWidth = $root.ProtoBoxedMeasure.toObject(message.indentionWidth, options);
        if (message.indentionLevel != null && message.hasOwnProperty("indentionLevel"))
            object.indentionLevel = $root.ProtoBoxedInt32.toObject(message.indentionLevel, options);
        if (message.spaceAbove != null && message.hasOwnProperty("spaceAbove"))
            object.spaceAbove = $root.ProtoBoxedMeasure.toObject(message.spaceAbove, options);
        if (message.spaceBelow != null && message.hasOwnProperty("spaceBelow"))
            object.spaceBelow = $root.ProtoBoxedMeasure.toObject(message.spaceBelow, options);
        if (message.widowSetting != null && message.hasOwnProperty("widowSetting"))
            object.widowSetting = $root.ProtoBoxedInt32.toObject(message.widowSetting, options);
        if (message.orphanSetting != null && message.hasOwnProperty("orphanSetting"))
            object.orphanSetting = $root.ProtoBoxedInt32.toObject(message.orphanSetting, options);
        if (message.widowPriority != null && message.hasOwnProperty("widowPriority"))
            object.widowPriority = $root.ProtoBoxedInt32.toObject(message.widowPriority, options);
        if (message.strikethrough != null && message.hasOwnProperty("strikethrough"))
            object.strikethrough = $root.ProtoBoxedStrikethroughSpec.toObject(message.strikethrough, options);
        if (message.superscriptSubscript != null && message.hasOwnProperty("superscriptSubscript"))
            object.superscriptSubscript = $root.ProtoBoxedSPBMode.toObject(message.superscriptSubscript, options);
        if (message.backgroundColor != null && message.hasOwnProperty("backgroundColor"))
            object.backgroundColor = $root.ProtoBoxedColor.toObject(message.backgroundColor, options);
        if (message.listSetting != null && message.hasOwnProperty("listSetting"))
            object.listSetting = $root.ProtoBoxedListSetting.toObject(message.listSetting, options);
        if (message.hyphenation != null && message.hasOwnProperty("hyphenation"))
            object.hyphenation = $root.ProtoBoxedBool.toObject(message.hyphenation, options);
        if (message.preNamedString != null && message.hasOwnProperty("preNamedString"))
            object.preNamedString = $root.ProtoBoxedString.toObject(message.preNamedString, options);
        if (message.postNamedString != null && message.hasOwnProperty("postNamedString"))
            object.postNamedString = $root.ProtoBoxedString.toObject(message.postNamedString, options);
        if (message.semanticType != null && message.hasOwnProperty("semanticType"))
            object.semanticType = $root.ProtoBoxedString.toObject(message.semanticType, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoParagraphFormat to JSON.
     * @function toJSON
     * @memberof ProtoParagraphFormat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoParagraphFormat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoParagraphFormat
     * @function getTypeUrl
     * @memberof ProtoParagraphFormat
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoParagraphFormat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoParagraphFormat";
    };

    return ProtoParagraphFormat;
})();

$root.ProtoSection = (function() {

    /**
     * Properties of a ProtoSection.
     * @name IProtoSection
     * @interface IProtoSection
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoSection _children
     * @property {IProtoDocumentElement|null} [parent] ProtoSection parent
     * @property {string|null} [uuid] ProtoSection uuid
     * @property {string|null} [cDefUuid] ProtoSection cDefUuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoSection comChannelUUIDs
     */

    /**
     * Constructs a new ProtoSection.
     * @name ProtoSection
     * @classdesc Represents a ProtoSection.
     * @implements IProtoSection
     * @constructor
     * @param {IProtoSection=} [properties] Properties to set
     */
    function ProtoSection(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSection _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoSection
     * @instance
     */
    ProtoSection.prototype._children = $util.emptyArray;

    /**
     * ProtoSection parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoSection
     * @instance
     */
    ProtoSection.prototype.parent = null;

    /**
     * ProtoSection uuid.
     * @member {string} uuid
     * @memberof ProtoSection
     * @instance
     */
    ProtoSection.prototype.uuid = "";

    /**
     * ProtoSection cDefUuid.
     * @member {string} cDefUuid
     * @memberof ProtoSection
     * @instance
     */
    ProtoSection.prototype.cDefUuid = "";

    /**
     * ProtoSection comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoSection
     * @instance
     */
    ProtoSection.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoSection instance using the specified properties.
     * @function create
     * @memberof ProtoSection
     * @static
     * @param {IProtoSection=} [properties] Properties to set
     * @returns {ProtoSection} ProtoSection instance
     */
    ProtoSection.create = function create(properties) {
        return new ProtoSection(properties);
    };

    /**
     * Encodes the specified ProtoSection message. Does not implicitly {@link ProtoSection.verify|verify} messages.
     * @function encode
     * @memberof ProtoSection
     * @static
     * @param {IProtoSection} message ProtoSection message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSection.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.cDefUuid != null && Object.hasOwnProperty.call(message, "cDefUuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.cDefUuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoSection message, length delimited. Does not implicitly {@link ProtoSection.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSection
     * @static
     * @param {IProtoSection} message ProtoSection message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSection.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSection message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSection
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSection} ProtoSection
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSection.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSection();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    message.cDefUuid = reader.string();
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSection message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSection
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSection} ProtoSection
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSection.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSection message.
     * @function verify
     * @memberof ProtoSection
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSection.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.cDefUuid != null && message.hasOwnProperty("cDefUuid"))
            if (!$util.isString(message.cDefUuid))
                return "cDefUuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoSection message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSection
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSection} ProtoSection
     */
    ProtoSection.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSection)
            return object;
        var message = new $root.ProtoSection();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoSection._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoSection._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoSection.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.cDefUuid != null)
            message.cDefUuid = String(object.cDefUuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoSection.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoSection message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSection
     * @static
     * @param {ProtoSection} message ProtoSection
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSection.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.cDefUuid = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.cDefUuid != null && message.hasOwnProperty("cDefUuid"))
            object.cDefUuid = message.cDefUuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoSection to JSON.
     * @function toJSON
     * @memberof ProtoSection
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSection.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSection
     * @function getTypeUrl
     * @memberof ProtoSection
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSection";
    };

    return ProtoSection;
})();

$root.ProtoSpaceVertically = (function() {

    /**
     * Properties of a ProtoSpaceVertically.
     * @name IProtoSpaceVertically
     * @interface IProtoSpaceVertically
     * @property {IProtoDocumentElement|null} [parent] ProtoSpaceVertically parent
     * @property {IProtoMeasure|null} [space] ProtoSpaceVertically space
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoSpaceVertically comChannelUUIDs
     */

    /**
     * Constructs a new ProtoSpaceVertically.
     * @name ProtoSpaceVertically
     * @classdesc Represents a ProtoSpaceVertically.
     * @implements IProtoSpaceVertically
     * @constructor
     * @param {IProtoSpaceVertically=} [properties] Properties to set
     */
    function ProtoSpaceVertically(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSpaceVertically parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoSpaceVertically
     * @instance
     */
    ProtoSpaceVertically.prototype.parent = null;

    /**
     * ProtoSpaceVertically space.
     * @member {IProtoMeasure|null|undefined} space
     * @memberof ProtoSpaceVertically
     * @instance
     */
    ProtoSpaceVertically.prototype.space = null;

    /**
     * ProtoSpaceVertically comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoSpaceVertically
     * @instance
     */
    ProtoSpaceVertically.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoSpaceVertically instance using the specified properties.
     * @function create
     * @memberof ProtoSpaceVertically
     * @static
     * @param {IProtoSpaceVertically=} [properties] Properties to set
     * @returns {ProtoSpaceVertically} ProtoSpaceVertically instance
     */
    ProtoSpaceVertically.create = function create(properties) {
        return new ProtoSpaceVertically(properties);
    };

    /**
     * Encodes the specified ProtoSpaceVertically message. Does not implicitly {@link ProtoSpaceVertically.verify|verify} messages.
     * @function encode
     * @memberof ProtoSpaceVertically
     * @static
     * @param {IProtoSpaceVertically} message ProtoSpaceVertically message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSpaceVertically.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.space != null && Object.hasOwnProperty.call(message, "space"))
            $root.ProtoMeasure.encode(message.space, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoSpaceVertically message, length delimited. Does not implicitly {@link ProtoSpaceVertically.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSpaceVertically
     * @static
     * @param {IProtoSpaceVertically} message ProtoSpaceVertically message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSpaceVertically.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSpaceVertically message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSpaceVertically
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSpaceVertically} ProtoSpaceVertically
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSpaceVertically.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSpaceVertically();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.space = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSpaceVertically message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSpaceVertically
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSpaceVertically} ProtoSpaceVertically
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSpaceVertically.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSpaceVertically message.
     * @function verify
     * @memberof ProtoSpaceVertically
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSpaceVertically.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.space != null && message.hasOwnProperty("space")) {
            var error = $root.ProtoMeasure.verify(message.space);
            if (error)
                return "space." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoSpaceVertically message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSpaceVertically
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSpaceVertically} ProtoSpaceVertically
     */
    ProtoSpaceVertically.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSpaceVertically)
            return object;
        var message = new $root.ProtoSpaceVertically();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoSpaceVertically.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.space != null) {
            if (typeof object.space !== "object")
                throw TypeError(".ProtoSpaceVertically.space: object expected");
            message.space = $root.ProtoMeasure.fromObject(object.space);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoSpaceVertically.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoSpaceVertically message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSpaceVertically
     * @static
     * @param {ProtoSpaceVertically} message ProtoSpaceVertically
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSpaceVertically.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.space = null;
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.space != null && message.hasOwnProperty("space"))
            object.space = $root.ProtoMeasure.toObject(message.space, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoSpaceVertically to JSON.
     * @function toJSON
     * @memberof ProtoSpaceVertically
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSpaceVertically.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSpaceVertically
     * @function getTypeUrl
     * @memberof ProtoSpaceVertically
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSpaceVertically.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSpaceVertically";
    };

    return ProtoSpaceVertically;
})();

$root.ProtoSpan = (function() {

    /**
     * Properties of a ProtoSpan.
     * @name IProtoSpan
     * @interface IProtoSpan
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoSpan _children
     * @property {IProtoDocumentElement|null} [parent] ProtoSpan parent
     * @property {IProtoBoxedBool|null} [bold] ProtoSpan bold
     * @property {IProtoBoxedBool|null} [italic] ProtoSpan italic
     * @property {IProtoColor|null} [color] ProtoSpan color
     * @property {IProtoBoxedBool|null} [subscript] ProtoSpan subscript
     * @property {IProtoBoxedBool|null} [superscript] ProtoSpan superscript
     * @property {IProtoBoxedBool|null} [underline] ProtoSpan underline
     * @property {IProtoBoxedBool|null} [strikethrough] ProtoSpan strikethrough
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoSpan comChannelUUIDs
     */

    /**
     * Constructs a new ProtoSpan.
     * @name ProtoSpan
     * @classdesc Represents a ProtoSpan.
     * @implements IProtoSpan
     * @constructor
     * @param {IProtoSpan=} [properties] Properties to set
     */
    function ProtoSpan(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSpan _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype._children = $util.emptyArray;

    /**
     * ProtoSpan parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.parent = null;

    /**
     * ProtoSpan bold.
     * @member {IProtoBoxedBool|null|undefined} bold
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.bold = null;

    /**
     * ProtoSpan italic.
     * @member {IProtoBoxedBool|null|undefined} italic
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.italic = null;

    /**
     * ProtoSpan color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.color = null;

    /**
     * ProtoSpan subscript.
     * @member {IProtoBoxedBool|null|undefined} subscript
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.subscript = null;

    /**
     * ProtoSpan superscript.
     * @member {IProtoBoxedBool|null|undefined} superscript
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.superscript = null;

    /**
     * ProtoSpan underline.
     * @member {IProtoBoxedBool|null|undefined} underline
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.underline = null;

    /**
     * ProtoSpan strikethrough.
     * @member {IProtoBoxedBool|null|undefined} strikethrough
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.strikethrough = null;

    /**
     * ProtoSpan comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoSpan
     * @instance
     */
    ProtoSpan.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoSpan instance using the specified properties.
     * @function create
     * @memberof ProtoSpan
     * @static
     * @param {IProtoSpan=} [properties] Properties to set
     * @returns {ProtoSpan} ProtoSpan instance
     */
    ProtoSpan.create = function create(properties) {
        return new ProtoSpan(properties);
    };

    /**
     * Encodes the specified ProtoSpan message. Does not implicitly {@link ProtoSpan.verify|verify} messages.
     * @function encode
     * @memberof ProtoSpan
     * @static
     * @param {IProtoSpan} message ProtoSpan message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSpan.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.bold != null && Object.hasOwnProperty.call(message, "bold"))
            $root.ProtoBoxedBool.encode(message.bold, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.italic != null && Object.hasOwnProperty.call(message, "italic"))
            $root.ProtoBoxedBool.encode(message.italic, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.subscript != null && Object.hasOwnProperty.call(message, "subscript"))
            $root.ProtoBoxedBool.encode(message.subscript, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.superscript != null && Object.hasOwnProperty.call(message, "superscript"))
            $root.ProtoBoxedBool.encode(message.superscript, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.underline != null && Object.hasOwnProperty.call(message, "underline"))
            $root.ProtoBoxedBool.encode(message.underline, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.strikethrough != null && Object.hasOwnProperty.call(message, "strikethrough"))
            $root.ProtoBoxedBool.encode(message.strikethrough, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoSpan message, length delimited. Does not implicitly {@link ProtoSpan.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSpan
     * @static
     * @param {IProtoSpan} message ProtoSpan message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSpan.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSpan message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSpan
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSpan} ProtoSpan
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSpan.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSpan();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.bold = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.italic = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.subscript = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.superscript = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.underline = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.strikethrough = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 10: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSpan message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSpan
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSpan} ProtoSpan
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSpan.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSpan message.
     * @function verify
     * @memberof ProtoSpan
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSpan.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.bold != null && message.hasOwnProperty("bold")) {
            var error = $root.ProtoBoxedBool.verify(message.bold);
            if (error)
                return "bold." + error;
        }
        if (message.italic != null && message.hasOwnProperty("italic")) {
            var error = $root.ProtoBoxedBool.verify(message.italic);
            if (error)
                return "italic." + error;
        }
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.subscript != null && message.hasOwnProperty("subscript")) {
            var error = $root.ProtoBoxedBool.verify(message.subscript);
            if (error)
                return "subscript." + error;
        }
        if (message.superscript != null && message.hasOwnProperty("superscript")) {
            var error = $root.ProtoBoxedBool.verify(message.superscript);
            if (error)
                return "superscript." + error;
        }
        if (message.underline != null && message.hasOwnProperty("underline")) {
            var error = $root.ProtoBoxedBool.verify(message.underline);
            if (error)
                return "underline." + error;
        }
        if (message.strikethrough != null && message.hasOwnProperty("strikethrough")) {
            var error = $root.ProtoBoxedBool.verify(message.strikethrough);
            if (error)
                return "strikethrough." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoSpan message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSpan
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSpan} ProtoSpan
     */
    ProtoSpan.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSpan)
            return object;
        var message = new $root.ProtoSpan();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoSpan._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoSpan._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoSpan.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.bold != null) {
            if (typeof object.bold !== "object")
                throw TypeError(".ProtoSpan.bold: object expected");
            message.bold = $root.ProtoBoxedBool.fromObject(object.bold);
        }
        if (object.italic != null) {
            if (typeof object.italic !== "object")
                throw TypeError(".ProtoSpan.italic: object expected");
            message.italic = $root.ProtoBoxedBool.fromObject(object.italic);
        }
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoSpan.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.subscript != null) {
            if (typeof object.subscript !== "object")
                throw TypeError(".ProtoSpan.subscript: object expected");
            message.subscript = $root.ProtoBoxedBool.fromObject(object.subscript);
        }
        if (object.superscript != null) {
            if (typeof object.superscript !== "object")
                throw TypeError(".ProtoSpan.superscript: object expected");
            message.superscript = $root.ProtoBoxedBool.fromObject(object.superscript);
        }
        if (object.underline != null) {
            if (typeof object.underline !== "object")
                throw TypeError(".ProtoSpan.underline: object expected");
            message.underline = $root.ProtoBoxedBool.fromObject(object.underline);
        }
        if (object.strikethrough != null) {
            if (typeof object.strikethrough !== "object")
                throw TypeError(".ProtoSpan.strikethrough: object expected");
            message.strikethrough = $root.ProtoBoxedBool.fromObject(object.strikethrough);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoSpan.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoSpan message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSpan
     * @static
     * @param {ProtoSpan} message ProtoSpan
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSpan.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.bold = null;
            object.italic = null;
            object.color = null;
            object.subscript = null;
            object.superscript = null;
            object.underline = null;
            object.strikethrough = null;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.bold != null && message.hasOwnProperty("bold"))
            object.bold = $root.ProtoBoxedBool.toObject(message.bold, options);
        if (message.italic != null && message.hasOwnProperty("italic"))
            object.italic = $root.ProtoBoxedBool.toObject(message.italic, options);
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.subscript != null && message.hasOwnProperty("subscript"))
            object.subscript = $root.ProtoBoxedBool.toObject(message.subscript, options);
        if (message.superscript != null && message.hasOwnProperty("superscript"))
            object.superscript = $root.ProtoBoxedBool.toObject(message.superscript, options);
        if (message.underline != null && message.hasOwnProperty("underline"))
            object.underline = $root.ProtoBoxedBool.toObject(message.underline, options);
        if (message.strikethrough != null && message.hasOwnProperty("strikethrough"))
            object.strikethrough = $root.ProtoBoxedBool.toObject(message.strikethrough, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoSpan to JSON.
     * @function toJSON
     * @memberof ProtoSpan
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSpan.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSpan
     * @function getTypeUrl
     * @memberof ProtoSpan
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSpan.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSpan";
    };

    return ProtoSpan;
})();

$root.ProtoTable = (function() {

    /**
     * Properties of a ProtoTable.
     * @name IProtoTable
     * @interface IProtoTable
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoTable _children
     * @property {IProtoDocumentElement|null} [parent] ProtoTable parent
     * @property {IProtoTableSettings|null} [settings] ProtoTable settings
     * @property {string|null} [configName] ProtoTable configName
     * @property {INode|null} [carryOver] ProtoTable carryOver
     * @property {INode|null} [subTotal] ProtoTable subTotal
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTable comChannelUUIDs
     * @property {IProtoTableElementProperties|null} [properties] ProtoTable properties
     */

    /**
     * Constructs a new ProtoTable.
     * @name ProtoTable
     * @classdesc Represents a ProtoTable.
     * @implements IProtoTable
     * @constructor
     * @param {IProtoTable=} [properties] Properties to set
     */
    function ProtoTable(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTable _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoTable
     * @instance
     */
    ProtoTable.prototype._children = $util.emptyArray;

    /**
     * ProtoTable parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTable
     * @instance
     */
    ProtoTable.prototype.parent = null;

    /**
     * ProtoTable settings.
     * @member {IProtoTableSettings|null|undefined} settings
     * @memberof ProtoTable
     * @instance
     */
    ProtoTable.prototype.settings = null;

    /**
     * ProtoTable configName.
     * @member {string} configName
     * @memberof ProtoTable
     * @instance
     */
    ProtoTable.prototype.configName = "";

    /**
     * ProtoTable carryOver.
     * @member {INode|null|undefined} carryOver
     * @memberof ProtoTable
     * @instance
     */
    ProtoTable.prototype.carryOver = null;

    /**
     * ProtoTable subTotal.
     * @member {INode|null|undefined} subTotal
     * @memberof ProtoTable
     * @instance
     */
    ProtoTable.prototype.subTotal = null;

    /**
     * ProtoTable comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTable
     * @instance
     */
    ProtoTable.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoTable properties.
     * @member {IProtoTableElementProperties|null|undefined} properties
     * @memberof ProtoTable
     * @instance
     */
    ProtoTable.prototype.properties = null;

    /**
     * Creates a new ProtoTable instance using the specified properties.
     * @function create
     * @memberof ProtoTable
     * @static
     * @param {IProtoTable=} [properties] Properties to set
     * @returns {ProtoTable} ProtoTable instance
     */
    ProtoTable.create = function create(properties) {
        return new ProtoTable(properties);
    };

    /**
     * Encodes the specified ProtoTable message. Does not implicitly {@link ProtoTable.verify|verify} messages.
     * @function encode
     * @memberof ProtoTable
     * @static
     * @param {IProtoTable} message ProtoTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
            $root.ProtoTableSettings.encode(message.settings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.configName != null && Object.hasOwnProperty.call(message, "configName"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.configName);
        if (message.carryOver != null && Object.hasOwnProperty.call(message, "carryOver"))
            $root.Node.encode(message.carryOver, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.subTotal != null && Object.hasOwnProperty.call(message, "subTotal"))
            $root.Node.encode(message.subTotal, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.comChannelUUIDs[i]);
        if (message.properties != null && Object.hasOwnProperty.call(message, "properties"))
            $root.ProtoTableElementProperties.encode(message.properties, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTable message, length delimited. Does not implicitly {@link ProtoTable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTable
     * @static
     * @param {IProtoTable} message ProtoTable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTable message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTable} ProtoTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.settings = $root.ProtoTableSettings.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.configName = reader.string();
                    break;
                }
            case 5: {
                    message.carryOver = $root.Node.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.subTotal = $root.Node.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 8: {
                    message.properties = $root.ProtoTableElementProperties.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTable} ProtoTable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTable message.
     * @function verify
     * @memberof ProtoTable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.settings != null && message.hasOwnProperty("settings")) {
            var error = $root.ProtoTableSettings.verify(message.settings);
            if (error)
                return "settings." + error;
        }
        if (message.configName != null && message.hasOwnProperty("configName"))
            if (!$util.isString(message.configName))
                return "configName: string expected";
        if (message.carryOver != null && message.hasOwnProperty("carryOver")) {
            var error = $root.Node.verify(message.carryOver);
            if (error)
                return "carryOver." + error;
        }
        if (message.subTotal != null && message.hasOwnProperty("subTotal")) {
            var error = $root.Node.verify(message.subTotal);
            if (error)
                return "subTotal." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.properties != null && message.hasOwnProperty("properties")) {
            var error = $root.ProtoTableElementProperties.verify(message.properties);
            if (error)
                return "properties." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTable} ProtoTable
     */
    ProtoTable.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTable)
            return object;
        var message = new $root.ProtoTable();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoTable._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoTable._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTable.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.settings != null) {
            if (typeof object.settings !== "object")
                throw TypeError(".ProtoTable.settings: object expected");
            message.settings = $root.ProtoTableSettings.fromObject(object.settings);
        }
        if (object.configName != null)
            message.configName = String(object.configName);
        if (object.carryOver != null) {
            if (typeof object.carryOver !== "object")
                throw TypeError(".ProtoTable.carryOver: object expected");
            message.carryOver = $root.Node.fromObject(object.carryOver);
        }
        if (object.subTotal != null) {
            if (typeof object.subTotal !== "object")
                throw TypeError(".ProtoTable.subTotal: object expected");
            message.subTotal = $root.Node.fromObject(object.subTotal);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTable.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.properties != null) {
            if (typeof object.properties !== "object")
                throw TypeError(".ProtoTable.properties: object expected");
            message.properties = $root.ProtoTableElementProperties.fromObject(object.properties);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTable
     * @static
     * @param {ProtoTable} message ProtoTable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.settings = null;
            object.configName = "";
            object.carryOver = null;
            object.subTotal = null;
            object.properties = null;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.settings != null && message.hasOwnProperty("settings"))
            object.settings = $root.ProtoTableSettings.toObject(message.settings, options);
        if (message.configName != null && message.hasOwnProperty("configName"))
            object.configName = message.configName;
        if (message.carryOver != null && message.hasOwnProperty("carryOver"))
            object.carryOver = $root.Node.toObject(message.carryOver, options);
        if (message.subTotal != null && message.hasOwnProperty("subTotal"))
            object.subTotal = $root.Node.toObject(message.subTotal, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.properties != null && message.hasOwnProperty("properties"))
            object.properties = $root.ProtoTableElementProperties.toObject(message.properties, options);
        return object;
    };

    /**
     * Converts this ProtoTable to JSON.
     * @function toJSON
     * @memberof ProtoTable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTable
     * @function getTypeUrl
     * @memberof ProtoTable
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTable.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTable";
    };

    return ProtoTable;
})();

$root.ProtoTableConfig = (function() {

    /**
     * Properties of a ProtoTableConfig.
     * @name IProtoTableConfig
     * @interface IProtoTableConfig
     * @property {IProtoDocumentElement|null} [parent] ProtoTableConfig parent
     * @property {IProtoTableSettings|null} [settings] ProtoTableConfig settings
     * @property {string|null} [configName] ProtoTableConfig configName
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTableConfig comChannelUUIDs
     */

    /**
     * Constructs a new ProtoTableConfig.
     * @name ProtoTableConfig
     * @classdesc Represents a ProtoTableConfig.
     * @implements IProtoTableConfig
     * @constructor
     * @param {IProtoTableConfig=} [properties] Properties to set
     */
    function ProtoTableConfig(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableConfig parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTableConfig
     * @instance
     */
    ProtoTableConfig.prototype.parent = null;

    /**
     * ProtoTableConfig settings.
     * @member {IProtoTableSettings|null|undefined} settings
     * @memberof ProtoTableConfig
     * @instance
     */
    ProtoTableConfig.prototype.settings = null;

    /**
     * ProtoTableConfig configName.
     * @member {string} configName
     * @memberof ProtoTableConfig
     * @instance
     */
    ProtoTableConfig.prototype.configName = "";

    /**
     * ProtoTableConfig comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTableConfig
     * @instance
     */
    ProtoTableConfig.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoTableConfig instance using the specified properties.
     * @function create
     * @memberof ProtoTableConfig
     * @static
     * @param {IProtoTableConfig=} [properties] Properties to set
     * @returns {ProtoTableConfig} ProtoTableConfig instance
     */
    ProtoTableConfig.create = function create(properties) {
        return new ProtoTableConfig(properties);
    };

    /**
     * Encodes the specified ProtoTableConfig message. Does not implicitly {@link ProtoTableConfig.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableConfig
     * @static
     * @param {IProtoTableConfig} message ProtoTableConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
            $root.ProtoTableSettings.encode(message.settings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.configName != null && Object.hasOwnProperty.call(message, "configName"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.configName);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoTableConfig message, length delimited. Does not implicitly {@link ProtoTableConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableConfig
     * @static
     * @param {IProtoTableConfig} message ProtoTableConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableConfig} ProtoTableConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.settings = $root.ProtoTableSettings.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.configName = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableConfig} ProtoTableConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableConfig message.
     * @function verify
     * @memberof ProtoTableConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.settings != null && message.hasOwnProperty("settings")) {
            var error = $root.ProtoTableSettings.verify(message.settings);
            if (error)
                return "settings." + error;
        }
        if (message.configName != null && message.hasOwnProperty("configName"))
            if (!$util.isString(message.configName))
                return "configName: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoTableConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableConfig} ProtoTableConfig
     */
    ProtoTableConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableConfig)
            return object;
        var message = new $root.ProtoTableConfig();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTableConfig.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.settings != null) {
            if (typeof object.settings !== "object")
                throw TypeError(".ProtoTableConfig.settings: object expected");
            message.settings = $root.ProtoTableSettings.fromObject(object.settings);
        }
        if (object.configName != null)
            message.configName = String(object.configName);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTableConfig.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableConfig
     * @static
     * @param {ProtoTableConfig} message ProtoTableConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.settings = null;
            object.configName = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.settings != null && message.hasOwnProperty("settings"))
            object.settings = $root.ProtoTableSettings.toObject(message.settings, options);
        if (message.configName != null && message.hasOwnProperty("configName"))
            object.configName = message.configName;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoTableConfig to JSON.
     * @function toJSON
     * @memberof ProtoTableConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableConfig
     * @function getTypeUrl
     * @memberof ProtoTableConfig
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableConfig";
    };

    return ProtoTableConfig;
})();

$root.ProtoTableSettings = (function() {

    /**
     * Properties of a ProtoTableSettings.
     * @name IProtoTableSettings
     * @interface IProtoTableSettings
     * @property {IProtoMeasure|null} [xOffset] ProtoTableSettings xOffset
     * @property {IProtoBoxedBool|null} [leftMeasure] ProtoTableSettings leftMeasure
     * @property {IProtoMeasure|null} [width] ProtoTableSettings width
     * @property {IProtoBoxedUint32|null} [repeatHeader] ProtoTableSettings repeatHeader
     * @property {IProtoTableWS|null} [ws] ProtoTableSettings ws
     */

    /**
     * Constructs a new ProtoTableSettings.
     * @name ProtoTableSettings
     * @classdesc Represents a ProtoTableSettings.
     * @implements IProtoTableSettings
     * @constructor
     * @param {IProtoTableSettings=} [properties] Properties to set
     */
    function ProtoTableSettings(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableSettings xOffset.
     * @member {IProtoMeasure|null|undefined} xOffset
     * @memberof ProtoTableSettings
     * @instance
     */
    ProtoTableSettings.prototype.xOffset = null;

    /**
     * ProtoTableSettings leftMeasure.
     * @member {IProtoBoxedBool|null|undefined} leftMeasure
     * @memberof ProtoTableSettings
     * @instance
     */
    ProtoTableSettings.prototype.leftMeasure = null;

    /**
     * ProtoTableSettings width.
     * @member {IProtoMeasure|null|undefined} width
     * @memberof ProtoTableSettings
     * @instance
     */
    ProtoTableSettings.prototype.width = null;

    /**
     * ProtoTableSettings repeatHeader.
     * @member {IProtoBoxedUint32|null|undefined} repeatHeader
     * @memberof ProtoTableSettings
     * @instance
     */
    ProtoTableSettings.prototype.repeatHeader = null;

    /**
     * ProtoTableSettings ws.
     * @member {IProtoTableWS|null|undefined} ws
     * @memberof ProtoTableSettings
     * @instance
     */
    ProtoTableSettings.prototype.ws = null;

    /**
     * Creates a new ProtoTableSettings instance using the specified properties.
     * @function create
     * @memberof ProtoTableSettings
     * @static
     * @param {IProtoTableSettings=} [properties] Properties to set
     * @returns {ProtoTableSettings} ProtoTableSettings instance
     */
    ProtoTableSettings.create = function create(properties) {
        return new ProtoTableSettings(properties);
    };

    /**
     * Encodes the specified ProtoTableSettings message. Does not implicitly {@link ProtoTableSettings.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableSettings
     * @static
     * @param {IProtoTableSettings} message ProtoTableSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.xOffset != null && Object.hasOwnProperty.call(message, "xOffset"))
            $root.ProtoMeasure.encode(message.xOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.leftMeasure != null && Object.hasOwnProperty.call(message, "leftMeasure"))
            $root.ProtoBoxedBool.encode(message.leftMeasure, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoMeasure.encode(message.width, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.repeatHeader != null && Object.hasOwnProperty.call(message, "repeatHeader"))
            $root.ProtoBoxedUint32.encode(message.repeatHeader, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.ws != null && Object.hasOwnProperty.call(message, "ws"))
            $root.ProtoTableWS.encode(message.ws, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTableSettings message, length delimited. Does not implicitly {@link ProtoTableSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableSettings
     * @static
     * @param {IProtoTableSettings} message ProtoTableSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableSettings message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableSettings} ProtoTableSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableSettings.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.xOffset = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.leftMeasure = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.width = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.repeatHeader = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.ws = $root.ProtoTableWS.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableSettings} ProtoTableSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableSettings message.
     * @function verify
     * @memberof ProtoTableSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.xOffset != null && message.hasOwnProperty("xOffset")) {
            var error = $root.ProtoMeasure.verify(message.xOffset);
            if (error)
                return "xOffset." + error;
        }
        if (message.leftMeasure != null && message.hasOwnProperty("leftMeasure")) {
            var error = $root.ProtoBoxedBool.verify(message.leftMeasure);
            if (error)
                return "leftMeasure." + error;
        }
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.repeatHeader != null && message.hasOwnProperty("repeatHeader")) {
            var error = $root.ProtoBoxedUint32.verify(message.repeatHeader);
            if (error)
                return "repeatHeader." + error;
        }
        if (message.ws != null && message.hasOwnProperty("ws")) {
            var error = $root.ProtoTableWS.verify(message.ws);
            if (error)
                return "ws." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTableSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableSettings} ProtoTableSettings
     */
    ProtoTableSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableSettings)
            return object;
        var message = new $root.ProtoTableSettings();
        if (object.xOffset != null) {
            if (typeof object.xOffset !== "object")
                throw TypeError(".ProtoTableSettings.xOffset: object expected");
            message.xOffset = $root.ProtoMeasure.fromObject(object.xOffset);
        }
        if (object.leftMeasure != null) {
            if (typeof object.leftMeasure !== "object")
                throw TypeError(".ProtoTableSettings.leftMeasure: object expected");
            message.leftMeasure = $root.ProtoBoxedBool.fromObject(object.leftMeasure);
        }
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoTableSettings.width: object expected");
            message.width = $root.ProtoMeasure.fromObject(object.width);
        }
        if (object.repeatHeader != null) {
            if (typeof object.repeatHeader !== "object")
                throw TypeError(".ProtoTableSettings.repeatHeader: object expected");
            message.repeatHeader = $root.ProtoBoxedUint32.fromObject(object.repeatHeader);
        }
        if (object.ws != null) {
            if (typeof object.ws !== "object")
                throw TypeError(".ProtoTableSettings.ws: object expected");
            message.ws = $root.ProtoTableWS.fromObject(object.ws);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableSettings
     * @static
     * @param {ProtoTableSettings} message ProtoTableSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.xOffset = null;
            object.leftMeasure = null;
            object.width = null;
            object.repeatHeader = null;
            object.ws = null;
        }
        if (message.xOffset != null && message.hasOwnProperty("xOffset"))
            object.xOffset = $root.ProtoMeasure.toObject(message.xOffset, options);
        if (message.leftMeasure != null && message.hasOwnProperty("leftMeasure"))
            object.leftMeasure = $root.ProtoBoxedBool.toObject(message.leftMeasure, options);
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoMeasure.toObject(message.width, options);
        if (message.repeatHeader != null && message.hasOwnProperty("repeatHeader"))
            object.repeatHeader = $root.ProtoBoxedUint32.toObject(message.repeatHeader, options);
        if (message.ws != null && message.hasOwnProperty("ws"))
            object.ws = $root.ProtoTableWS.toObject(message.ws, options);
        return object;
    };

    /**
     * Converts this ProtoTableSettings to JSON.
     * @function toJSON
     * @memberof ProtoTableSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableSettings
     * @function getTypeUrl
     * @memberof ProtoTableSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableSettings";
    };

    return ProtoTableSettings;
})();

/**
 * ProtoTableContentGroupType enum.
 * @name ProtoTableContentGroupType
 * @enum {number}
 * @property {number} HEADER=0 HEADER value
 * @property {number} BODY=1 BODY value
 * @property {number} FOOTER=2 FOOTER value
 * @property {number} SUB_HEADER=3 SUB_HEADER value
 */
$root.ProtoTableContentGroupType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "HEADER"] = 0;
    values[valuesById[1] = "BODY"] = 1;
    values[valuesById[2] = "FOOTER"] = 2;
    values[valuesById[3] = "SUB_HEADER"] = 3;
    return values;
})();

$root.ProtoBoxedTableContentGroupType = (function() {

    /**
     * Properties of a ProtoBoxedTableContentGroupType.
     * @name IProtoBoxedTableContentGroupType
     * @interface IProtoBoxedTableContentGroupType
     * @property {ProtoTableContentGroupType|null} [value] ProtoBoxedTableContentGroupType value
     * @property {boolean|null} [isNull] ProtoBoxedTableContentGroupType isNull
     */

    /**
     * Constructs a new ProtoBoxedTableContentGroupType.
     * @name ProtoBoxedTableContentGroupType
     * @classdesc Represents a ProtoBoxedTableContentGroupType.
     * @implements IProtoBoxedTableContentGroupType
     * @constructor
     * @param {IProtoBoxedTableContentGroupType=} [properties] Properties to set
     */
    function ProtoBoxedTableContentGroupType(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedTableContentGroupType value.
     * @member {ProtoTableContentGroupType} value
     * @memberof ProtoBoxedTableContentGroupType
     * @instance
     */
    ProtoBoxedTableContentGroupType.prototype.value = 0;

    /**
     * ProtoBoxedTableContentGroupType isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedTableContentGroupType
     * @instance
     */
    ProtoBoxedTableContentGroupType.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedTableContentGroupType instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {IProtoBoxedTableContentGroupType=} [properties] Properties to set
     * @returns {ProtoBoxedTableContentGroupType} ProtoBoxedTableContentGroupType instance
     */
    ProtoBoxedTableContentGroupType.create = function create(properties) {
        return new ProtoBoxedTableContentGroupType(properties);
    };

    /**
     * Encodes the specified ProtoBoxedTableContentGroupType message. Does not implicitly {@link ProtoBoxedTableContentGroupType.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {IProtoBoxedTableContentGroupType} message ProtoBoxedTableContentGroupType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedTableContentGroupType.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedTableContentGroupType message, length delimited. Does not implicitly {@link ProtoBoxedTableContentGroupType.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {IProtoBoxedTableContentGroupType} message ProtoBoxedTableContentGroupType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedTableContentGroupType.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedTableContentGroupType message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedTableContentGroupType} ProtoBoxedTableContentGroupType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedTableContentGroupType.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedTableContentGroupType();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.int32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedTableContentGroupType message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedTableContentGroupType} ProtoBoxedTableContentGroupType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedTableContentGroupType.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedTableContentGroupType message.
     * @function verify
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedTableContentGroupType.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            switch (message.value) {
            default:
                return "value: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedTableContentGroupType message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedTableContentGroupType} ProtoBoxedTableContentGroupType
     */
    ProtoBoxedTableContentGroupType.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedTableContentGroupType)
            return object;
        var message = new $root.ProtoBoxedTableContentGroupType();
        switch (object.value) {
        default:
            if (typeof object.value === "number") {
                message.value = object.value;
                break;
            }
            break;
        case "HEADER":
        case 0:
            message.value = 0;
            break;
        case "BODY":
        case 1:
            message.value = 1;
            break;
        case "FOOTER":
        case 2:
            message.value = 2;
            break;
        case "SUB_HEADER":
        case 3:
            message.value = 3;
            break;
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedTableContentGroupType message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {ProtoBoxedTableContentGroupType} message ProtoBoxedTableContentGroupType
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedTableContentGroupType.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = options.enums === String ? "HEADER" : 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.enums === String ? $root.ProtoTableContentGroupType[message.value] === undefined ? message.value : $root.ProtoTableContentGroupType[message.value] : message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedTableContentGroupType to JSON.
     * @function toJSON
     * @memberof ProtoBoxedTableContentGroupType
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedTableContentGroupType.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedTableContentGroupType
     * @function getTypeUrl
     * @memberof ProtoBoxedTableContentGroupType
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedTableContentGroupType.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedTableContentGroupType";
    };

    return ProtoBoxedTableContentGroupType;
})();

$root.ProtoTableContentGroup = (function() {

    /**
     * Properties of a ProtoTableContentGroup.
     * @name IProtoTableContentGroup
     * @interface IProtoTableContentGroup
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoTableContentGroup _children
     * @property {IProtoDocumentElement|null} [parent] ProtoTableContentGroup parent
     * @property {IProtoTableContentGroupSettings|null} [settings] ProtoTableContentGroup settings
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTableContentGroup comChannelUUIDs
     * @property {IProtoTableElementProperties|null} [properties] ProtoTableContentGroup properties
     */

    /**
     * Constructs a new ProtoTableContentGroup.
     * @name ProtoTableContentGroup
     * @classdesc Represents a ProtoTableContentGroup.
     * @implements IProtoTableContentGroup
     * @constructor
     * @param {IProtoTableContentGroup=} [properties] Properties to set
     */
    function ProtoTableContentGroup(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableContentGroup _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoTableContentGroup
     * @instance
     */
    ProtoTableContentGroup.prototype._children = $util.emptyArray;

    /**
     * ProtoTableContentGroup parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTableContentGroup
     * @instance
     */
    ProtoTableContentGroup.prototype.parent = null;

    /**
     * ProtoTableContentGroup settings.
     * @member {IProtoTableContentGroupSettings|null|undefined} settings
     * @memberof ProtoTableContentGroup
     * @instance
     */
    ProtoTableContentGroup.prototype.settings = null;

    /**
     * ProtoTableContentGroup comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTableContentGroup
     * @instance
     */
    ProtoTableContentGroup.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoTableContentGroup properties.
     * @member {IProtoTableElementProperties|null|undefined} properties
     * @memberof ProtoTableContentGroup
     * @instance
     */
    ProtoTableContentGroup.prototype.properties = null;

    /**
     * Creates a new ProtoTableContentGroup instance using the specified properties.
     * @function create
     * @memberof ProtoTableContentGroup
     * @static
     * @param {IProtoTableContentGroup=} [properties] Properties to set
     * @returns {ProtoTableContentGroup} ProtoTableContentGroup instance
     */
    ProtoTableContentGroup.create = function create(properties) {
        return new ProtoTableContentGroup(properties);
    };

    /**
     * Encodes the specified ProtoTableContentGroup message. Does not implicitly {@link ProtoTableContentGroup.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableContentGroup
     * @static
     * @param {IProtoTableContentGroup} message ProtoTableContentGroup message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableContentGroup.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
            $root.ProtoTableContentGroupSettings.encode(message.settings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.properties != null && Object.hasOwnProperty.call(message, "properties"))
            $root.ProtoTableElementProperties.encode(message.properties, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTableContentGroup message, length delimited. Does not implicitly {@link ProtoTableContentGroup.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableContentGroup
     * @static
     * @param {IProtoTableContentGroup} message ProtoTableContentGroup message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableContentGroup.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableContentGroup message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableContentGroup
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableContentGroup} ProtoTableContentGroup
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableContentGroup.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableContentGroup();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.settings = $root.ProtoTableContentGroupSettings.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.properties = $root.ProtoTableElementProperties.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableContentGroup message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableContentGroup
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableContentGroup} ProtoTableContentGroup
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableContentGroup.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableContentGroup message.
     * @function verify
     * @memberof ProtoTableContentGroup
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableContentGroup.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.settings != null && message.hasOwnProperty("settings")) {
            var error = $root.ProtoTableContentGroupSettings.verify(message.settings);
            if (error)
                return "settings." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.properties != null && message.hasOwnProperty("properties")) {
            var error = $root.ProtoTableElementProperties.verify(message.properties);
            if (error)
                return "properties." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTableContentGroup message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableContentGroup
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableContentGroup} ProtoTableContentGroup
     */
    ProtoTableContentGroup.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableContentGroup)
            return object;
        var message = new $root.ProtoTableContentGroup();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoTableContentGroup._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoTableContentGroup._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTableContentGroup.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.settings != null) {
            if (typeof object.settings !== "object")
                throw TypeError(".ProtoTableContentGroup.settings: object expected");
            message.settings = $root.ProtoTableContentGroupSettings.fromObject(object.settings);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTableContentGroup.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.properties != null) {
            if (typeof object.properties !== "object")
                throw TypeError(".ProtoTableContentGroup.properties: object expected");
            message.properties = $root.ProtoTableElementProperties.fromObject(object.properties);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableContentGroup message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableContentGroup
     * @static
     * @param {ProtoTableContentGroup} message ProtoTableContentGroup
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableContentGroup.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.settings = null;
            object.properties = null;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.settings != null && message.hasOwnProperty("settings"))
            object.settings = $root.ProtoTableContentGroupSettings.toObject(message.settings, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.properties != null && message.hasOwnProperty("properties"))
            object.properties = $root.ProtoTableElementProperties.toObject(message.properties, options);
        return object;
    };

    /**
     * Converts this ProtoTableContentGroup to JSON.
     * @function toJSON
     * @memberof ProtoTableContentGroup
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableContentGroup.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableContentGroup
     * @function getTypeUrl
     * @memberof ProtoTableContentGroup
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableContentGroup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableContentGroup";
    };

    return ProtoTableContentGroup;
})();

$root.ProtoTableContentGroupConfig = (function() {

    /**
     * Properties of a ProtoTableContentGroupConfig.
     * @name IProtoTableContentGroupConfig
     * @interface IProtoTableContentGroupConfig
     * @property {IProtoDocumentElement|null} [parent] ProtoTableContentGroupConfig parent
     * @property {IProtoTableContentGroupSettings|null} [settings] ProtoTableContentGroupConfig settings
     * @property {string|null} [configName] ProtoTableContentGroupConfig configName
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTableContentGroupConfig comChannelUUIDs
     */

    /**
     * Constructs a new ProtoTableContentGroupConfig.
     * @name ProtoTableContentGroupConfig
     * @classdesc Represents a ProtoTableContentGroupConfig.
     * @implements IProtoTableContentGroupConfig
     * @constructor
     * @param {IProtoTableContentGroupConfig=} [properties] Properties to set
     */
    function ProtoTableContentGroupConfig(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableContentGroupConfig parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTableContentGroupConfig
     * @instance
     */
    ProtoTableContentGroupConfig.prototype.parent = null;

    /**
     * ProtoTableContentGroupConfig settings.
     * @member {IProtoTableContentGroupSettings|null|undefined} settings
     * @memberof ProtoTableContentGroupConfig
     * @instance
     */
    ProtoTableContentGroupConfig.prototype.settings = null;

    /**
     * ProtoTableContentGroupConfig configName.
     * @member {string} configName
     * @memberof ProtoTableContentGroupConfig
     * @instance
     */
    ProtoTableContentGroupConfig.prototype.configName = "";

    /**
     * ProtoTableContentGroupConfig comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTableContentGroupConfig
     * @instance
     */
    ProtoTableContentGroupConfig.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoTableContentGroupConfig instance using the specified properties.
     * @function create
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {IProtoTableContentGroupConfig=} [properties] Properties to set
     * @returns {ProtoTableContentGroupConfig} ProtoTableContentGroupConfig instance
     */
    ProtoTableContentGroupConfig.create = function create(properties) {
        return new ProtoTableContentGroupConfig(properties);
    };

    /**
     * Encodes the specified ProtoTableContentGroupConfig message. Does not implicitly {@link ProtoTableContentGroupConfig.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {IProtoTableContentGroupConfig} message ProtoTableContentGroupConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableContentGroupConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
            $root.ProtoTableContentGroupSettings.encode(message.settings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.configName != null && Object.hasOwnProperty.call(message, "configName"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.configName);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoTableContentGroupConfig message, length delimited. Does not implicitly {@link ProtoTableContentGroupConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {IProtoTableContentGroupConfig} message ProtoTableContentGroupConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableContentGroupConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableContentGroupConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableContentGroupConfig} ProtoTableContentGroupConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableContentGroupConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableContentGroupConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.settings = $root.ProtoTableContentGroupSettings.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.configName = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableContentGroupConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableContentGroupConfig} ProtoTableContentGroupConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableContentGroupConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableContentGroupConfig message.
     * @function verify
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableContentGroupConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.settings != null && message.hasOwnProperty("settings")) {
            var error = $root.ProtoTableContentGroupSettings.verify(message.settings);
            if (error)
                return "settings." + error;
        }
        if (message.configName != null && message.hasOwnProperty("configName"))
            if (!$util.isString(message.configName))
                return "configName: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoTableContentGroupConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableContentGroupConfig} ProtoTableContentGroupConfig
     */
    ProtoTableContentGroupConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableContentGroupConfig)
            return object;
        var message = new $root.ProtoTableContentGroupConfig();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTableContentGroupConfig.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.settings != null) {
            if (typeof object.settings !== "object")
                throw TypeError(".ProtoTableContentGroupConfig.settings: object expected");
            message.settings = $root.ProtoTableContentGroupSettings.fromObject(object.settings);
        }
        if (object.configName != null)
            message.configName = String(object.configName);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTableContentGroupConfig.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableContentGroupConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {ProtoTableContentGroupConfig} message ProtoTableContentGroupConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableContentGroupConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.settings = null;
            object.configName = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.settings != null && message.hasOwnProperty("settings"))
            object.settings = $root.ProtoTableContentGroupSettings.toObject(message.settings, options);
        if (message.configName != null && message.hasOwnProperty("configName"))
            object.configName = message.configName;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoTableContentGroupConfig to JSON.
     * @function toJSON
     * @memberof ProtoTableContentGroupConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableContentGroupConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableContentGroupConfig
     * @function getTypeUrl
     * @memberof ProtoTableContentGroupConfig
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableContentGroupConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableContentGroupConfig";
    };

    return ProtoTableContentGroupConfig;
})();

$root.ProtoTableContentGroupSettings = (function() {

    /**
     * Properties of a ProtoTableContentGroupSettings.
     * @name IProtoTableContentGroupSettings
     * @interface IProtoTableContentGroupSettings
     * @property {IProtoBoxedTableContentGroupType|null} [contentGroupType] ProtoTableContentGroupSettings contentGroupType
     * @property {Array.<IProtoColor>|null} [backgroundColors] ProtoTableContentGroupSettings backgroundColors
     * @property {IProtoTableWS|null} [ws] ProtoTableContentGroupSettings ws
     */

    /**
     * Constructs a new ProtoTableContentGroupSettings.
     * @name ProtoTableContentGroupSettings
     * @classdesc Represents a ProtoTableContentGroupSettings.
     * @implements IProtoTableContentGroupSettings
     * @constructor
     * @param {IProtoTableContentGroupSettings=} [properties] Properties to set
     */
    function ProtoTableContentGroupSettings(properties) {
        this.backgroundColors = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableContentGroupSettings contentGroupType.
     * @member {IProtoBoxedTableContentGroupType|null|undefined} contentGroupType
     * @memberof ProtoTableContentGroupSettings
     * @instance
     */
    ProtoTableContentGroupSettings.prototype.contentGroupType = null;

    /**
     * ProtoTableContentGroupSettings backgroundColors.
     * @member {Array.<IProtoColor>} backgroundColors
     * @memberof ProtoTableContentGroupSettings
     * @instance
     */
    ProtoTableContentGroupSettings.prototype.backgroundColors = $util.emptyArray;

    /**
     * ProtoTableContentGroupSettings ws.
     * @member {IProtoTableWS|null|undefined} ws
     * @memberof ProtoTableContentGroupSettings
     * @instance
     */
    ProtoTableContentGroupSettings.prototype.ws = null;

    /**
     * Creates a new ProtoTableContentGroupSettings instance using the specified properties.
     * @function create
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {IProtoTableContentGroupSettings=} [properties] Properties to set
     * @returns {ProtoTableContentGroupSettings} ProtoTableContentGroupSettings instance
     */
    ProtoTableContentGroupSettings.create = function create(properties) {
        return new ProtoTableContentGroupSettings(properties);
    };

    /**
     * Encodes the specified ProtoTableContentGroupSettings message. Does not implicitly {@link ProtoTableContentGroupSettings.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {IProtoTableContentGroupSettings} message ProtoTableContentGroupSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableContentGroupSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.contentGroupType != null && Object.hasOwnProperty.call(message, "contentGroupType"))
            $root.ProtoBoxedTableContentGroupType.encode(message.contentGroupType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.backgroundColors != null && message.backgroundColors.length)
            for (var i = 0; i < message.backgroundColors.length; ++i)
                $root.ProtoColor.encode(message.backgroundColors[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.ws != null && Object.hasOwnProperty.call(message, "ws"))
            $root.ProtoTableWS.encode(message.ws, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTableContentGroupSettings message, length delimited. Does not implicitly {@link ProtoTableContentGroupSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {IProtoTableContentGroupSettings} message ProtoTableContentGroupSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableContentGroupSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableContentGroupSettings message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableContentGroupSettings} ProtoTableContentGroupSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableContentGroupSettings.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableContentGroupSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.contentGroupType = $root.ProtoBoxedTableContentGroupType.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    if (!(message.backgroundColors && message.backgroundColors.length))
                        message.backgroundColors = [];
                    message.backgroundColors.push($root.ProtoColor.decode(reader, reader.uint32()));
                    break;
                }
            case 3: {
                    message.ws = $root.ProtoTableWS.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableContentGroupSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableContentGroupSettings} ProtoTableContentGroupSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableContentGroupSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableContentGroupSettings message.
     * @function verify
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableContentGroupSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.contentGroupType != null && message.hasOwnProperty("contentGroupType")) {
            var error = $root.ProtoBoxedTableContentGroupType.verify(message.contentGroupType);
            if (error)
                return "contentGroupType." + error;
        }
        if (message.backgroundColors != null && message.hasOwnProperty("backgroundColors")) {
            if (!Array.isArray(message.backgroundColors))
                return "backgroundColors: array expected";
            for (var i = 0; i < message.backgroundColors.length; ++i) {
                var error = $root.ProtoColor.verify(message.backgroundColors[i]);
                if (error)
                    return "backgroundColors." + error;
            }
        }
        if (message.ws != null && message.hasOwnProperty("ws")) {
            var error = $root.ProtoTableWS.verify(message.ws);
            if (error)
                return "ws." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTableContentGroupSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableContentGroupSettings} ProtoTableContentGroupSettings
     */
    ProtoTableContentGroupSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableContentGroupSettings)
            return object;
        var message = new $root.ProtoTableContentGroupSettings();
        if (object.contentGroupType != null) {
            if (typeof object.contentGroupType !== "object")
                throw TypeError(".ProtoTableContentGroupSettings.contentGroupType: object expected");
            message.contentGroupType = $root.ProtoBoxedTableContentGroupType.fromObject(object.contentGroupType);
        }
        if (object.backgroundColors) {
            if (!Array.isArray(object.backgroundColors))
                throw TypeError(".ProtoTableContentGroupSettings.backgroundColors: array expected");
            message.backgroundColors = [];
            for (var i = 0; i < object.backgroundColors.length; ++i) {
                if (typeof object.backgroundColors[i] !== "object")
                    throw TypeError(".ProtoTableContentGroupSettings.backgroundColors: object expected");
                message.backgroundColors[i] = $root.ProtoColor.fromObject(object.backgroundColors[i]);
            }
        }
        if (object.ws != null) {
            if (typeof object.ws !== "object")
                throw TypeError(".ProtoTableContentGroupSettings.ws: object expected");
            message.ws = $root.ProtoTableWS.fromObject(object.ws);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableContentGroupSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {ProtoTableContentGroupSettings} message ProtoTableContentGroupSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableContentGroupSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.backgroundColors = [];
        if (options.defaults) {
            object.contentGroupType = null;
            object.ws = null;
        }
        if (message.contentGroupType != null && message.hasOwnProperty("contentGroupType"))
            object.contentGroupType = $root.ProtoBoxedTableContentGroupType.toObject(message.contentGroupType, options);
        if (message.backgroundColors && message.backgroundColors.length) {
            object.backgroundColors = [];
            for (var j = 0; j < message.backgroundColors.length; ++j)
                object.backgroundColors[j] = $root.ProtoColor.toObject(message.backgroundColors[j], options);
        }
        if (message.ws != null && message.hasOwnProperty("ws"))
            object.ws = $root.ProtoTableWS.toObject(message.ws, options);
        return object;
    };

    /**
     * Converts this ProtoTableContentGroupSettings to JSON.
     * @function toJSON
     * @memberof ProtoTableContentGroupSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableContentGroupSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableContentGroupSettings
     * @function getTypeUrl
     * @memberof ProtoTableContentGroupSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableContentGroupSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableContentGroupSettings";
    };

    return ProtoTableContentGroupSettings;
})();

$root.ProtoTableRow = (function() {

    /**
     * Properties of a ProtoTableRow.
     * @name IProtoTableRow
     * @interface IProtoTableRow
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoTableRow _children
     * @property {IProtoDocumentElement|null} [parent] ProtoTableRow parent
     * @property {IProtoTableRowSettings|null} [settings] ProtoTableRow settings
     * @property {IProtoBoxedUint32|null} [rowConfigNumber] ProtoTableRow rowConfigNumber
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTableRow comChannelUUIDs
     * @property {IProtoTableElementProperties|null} [properties] ProtoTableRow properties
     */

    /**
     * Constructs a new ProtoTableRow.
     * @name ProtoTableRow
     * @classdesc Represents a ProtoTableRow.
     * @implements IProtoTableRow
     * @constructor
     * @param {IProtoTableRow=} [properties] Properties to set
     */
    function ProtoTableRow(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableRow _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoTableRow
     * @instance
     */
    ProtoTableRow.prototype._children = $util.emptyArray;

    /**
     * ProtoTableRow parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTableRow
     * @instance
     */
    ProtoTableRow.prototype.parent = null;

    /**
     * ProtoTableRow settings.
     * @member {IProtoTableRowSettings|null|undefined} settings
     * @memberof ProtoTableRow
     * @instance
     */
    ProtoTableRow.prototype.settings = null;

    /**
     * ProtoTableRow rowConfigNumber.
     * @member {IProtoBoxedUint32|null|undefined} rowConfigNumber
     * @memberof ProtoTableRow
     * @instance
     */
    ProtoTableRow.prototype.rowConfigNumber = null;

    /**
     * ProtoTableRow comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTableRow
     * @instance
     */
    ProtoTableRow.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoTableRow properties.
     * @member {IProtoTableElementProperties|null|undefined} properties
     * @memberof ProtoTableRow
     * @instance
     */
    ProtoTableRow.prototype.properties = null;

    /**
     * Creates a new ProtoTableRow instance using the specified properties.
     * @function create
     * @memberof ProtoTableRow
     * @static
     * @param {IProtoTableRow=} [properties] Properties to set
     * @returns {ProtoTableRow} ProtoTableRow instance
     */
    ProtoTableRow.create = function create(properties) {
        return new ProtoTableRow(properties);
    };

    /**
     * Encodes the specified ProtoTableRow message. Does not implicitly {@link ProtoTableRow.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableRow
     * @static
     * @param {IProtoTableRow} message ProtoTableRow message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableRow.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
            $root.ProtoTableRowSettings.encode(message.settings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.rowConfigNumber != null && Object.hasOwnProperty.call(message, "rowConfigNumber"))
            $root.ProtoBoxedUint32.encode(message.rowConfigNumber, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        if (message.properties != null && Object.hasOwnProperty.call(message, "properties"))
            $root.ProtoTableElementProperties.encode(message.properties, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTableRow message, length delimited. Does not implicitly {@link ProtoTableRow.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableRow
     * @static
     * @param {IProtoTableRow} message ProtoTableRow message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableRow.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableRow message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableRow
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableRow} ProtoTableRow
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableRow.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableRow();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.settings = $root.ProtoTableRowSettings.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.rowConfigNumber = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 6: {
                    message.properties = $root.ProtoTableElementProperties.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableRow message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableRow
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableRow} ProtoTableRow
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableRow.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableRow message.
     * @function verify
     * @memberof ProtoTableRow
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableRow.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.settings != null && message.hasOwnProperty("settings")) {
            var error = $root.ProtoTableRowSettings.verify(message.settings);
            if (error)
                return "settings." + error;
        }
        if (message.rowConfigNumber != null && message.hasOwnProperty("rowConfigNumber")) {
            var error = $root.ProtoBoxedUint32.verify(message.rowConfigNumber);
            if (error)
                return "rowConfigNumber." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.properties != null && message.hasOwnProperty("properties")) {
            var error = $root.ProtoTableElementProperties.verify(message.properties);
            if (error)
                return "properties." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTableRow message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableRow
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableRow} ProtoTableRow
     */
    ProtoTableRow.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableRow)
            return object;
        var message = new $root.ProtoTableRow();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoTableRow._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoTableRow._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTableRow.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.settings != null) {
            if (typeof object.settings !== "object")
                throw TypeError(".ProtoTableRow.settings: object expected");
            message.settings = $root.ProtoTableRowSettings.fromObject(object.settings);
        }
        if (object.rowConfigNumber != null) {
            if (typeof object.rowConfigNumber !== "object")
                throw TypeError(".ProtoTableRow.rowConfigNumber: object expected");
            message.rowConfigNumber = $root.ProtoBoxedUint32.fromObject(object.rowConfigNumber);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTableRow.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.properties != null) {
            if (typeof object.properties !== "object")
                throw TypeError(".ProtoTableRow.properties: object expected");
            message.properties = $root.ProtoTableElementProperties.fromObject(object.properties);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableRow message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableRow
     * @static
     * @param {ProtoTableRow} message ProtoTableRow
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableRow.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.settings = null;
            object.rowConfigNumber = null;
            object.properties = null;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.settings != null && message.hasOwnProperty("settings"))
            object.settings = $root.ProtoTableRowSettings.toObject(message.settings, options);
        if (message.rowConfigNumber != null && message.hasOwnProperty("rowConfigNumber"))
            object.rowConfigNumber = $root.ProtoBoxedUint32.toObject(message.rowConfigNumber, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.properties != null && message.hasOwnProperty("properties"))
            object.properties = $root.ProtoTableElementProperties.toObject(message.properties, options);
        return object;
    };

    /**
     * Converts this ProtoTableRow to JSON.
     * @function toJSON
     * @memberof ProtoTableRow
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableRow.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableRow
     * @function getTypeUrl
     * @memberof ProtoTableRow
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableRow.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableRow";
    };

    return ProtoTableRow;
})();

$root.ProtoTableRowConfig = (function() {

    /**
     * Properties of a ProtoTableRowConfig.
     * @name IProtoTableRowConfig
     * @interface IProtoTableRowConfig
     * @property {IProtoDocumentElement|null} [parent] ProtoTableRowConfig parent
     * @property {IProtoTableRowSettings|null} [settings] ProtoTableRowConfig settings
     * @property {string|null} [configName] ProtoTableRowConfig configName
     * @property {string|null} [rowHeader] ProtoTableRowConfig rowHeader
     * @property {string|null} [rowFooter] ProtoTableRowConfig rowFooter
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTableRowConfig comChannelUUIDs
     */

    /**
     * Constructs a new ProtoTableRowConfig.
     * @name ProtoTableRowConfig
     * @classdesc Represents a ProtoTableRowConfig.
     * @implements IProtoTableRowConfig
     * @constructor
     * @param {IProtoTableRowConfig=} [properties] Properties to set
     */
    function ProtoTableRowConfig(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableRowConfig parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTableRowConfig
     * @instance
     */
    ProtoTableRowConfig.prototype.parent = null;

    /**
     * ProtoTableRowConfig settings.
     * @member {IProtoTableRowSettings|null|undefined} settings
     * @memberof ProtoTableRowConfig
     * @instance
     */
    ProtoTableRowConfig.prototype.settings = null;

    /**
     * ProtoTableRowConfig configName.
     * @member {string} configName
     * @memberof ProtoTableRowConfig
     * @instance
     */
    ProtoTableRowConfig.prototype.configName = "";

    /**
     * ProtoTableRowConfig rowHeader.
     * @member {string} rowHeader
     * @memberof ProtoTableRowConfig
     * @instance
     */
    ProtoTableRowConfig.prototype.rowHeader = "";

    /**
     * ProtoTableRowConfig rowFooter.
     * @member {string} rowFooter
     * @memberof ProtoTableRowConfig
     * @instance
     */
    ProtoTableRowConfig.prototype.rowFooter = "";

    /**
     * ProtoTableRowConfig comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTableRowConfig
     * @instance
     */
    ProtoTableRowConfig.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoTableRowConfig instance using the specified properties.
     * @function create
     * @memberof ProtoTableRowConfig
     * @static
     * @param {IProtoTableRowConfig=} [properties] Properties to set
     * @returns {ProtoTableRowConfig} ProtoTableRowConfig instance
     */
    ProtoTableRowConfig.create = function create(properties) {
        return new ProtoTableRowConfig(properties);
    };

    /**
     * Encodes the specified ProtoTableRowConfig message. Does not implicitly {@link ProtoTableRowConfig.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableRowConfig
     * @static
     * @param {IProtoTableRowConfig} message ProtoTableRowConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableRowConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
            $root.ProtoTableRowSettings.encode(message.settings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.configName != null && Object.hasOwnProperty.call(message, "configName"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.configName);
        if (message.rowHeader != null && Object.hasOwnProperty.call(message, "rowHeader"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.rowHeader);
        if (message.rowFooter != null && Object.hasOwnProperty.call(message, "rowFooter"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.rowFooter);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoTableRowConfig message, length delimited. Does not implicitly {@link ProtoTableRowConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableRowConfig
     * @static
     * @param {IProtoTableRowConfig} message ProtoTableRowConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableRowConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableRowConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableRowConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableRowConfig} ProtoTableRowConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableRowConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableRowConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.settings = $root.ProtoTableRowSettings.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.configName = reader.string();
                    break;
                }
            case 4: {
                    message.rowHeader = reader.string();
                    break;
                }
            case 5: {
                    message.rowFooter = reader.string();
                    break;
                }
            case 6: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableRowConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableRowConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableRowConfig} ProtoTableRowConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableRowConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableRowConfig message.
     * @function verify
     * @memberof ProtoTableRowConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableRowConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.settings != null && message.hasOwnProperty("settings")) {
            var error = $root.ProtoTableRowSettings.verify(message.settings);
            if (error)
                return "settings." + error;
        }
        if (message.configName != null && message.hasOwnProperty("configName"))
            if (!$util.isString(message.configName))
                return "configName: string expected";
        if (message.rowHeader != null && message.hasOwnProperty("rowHeader"))
            if (!$util.isString(message.rowHeader))
                return "rowHeader: string expected";
        if (message.rowFooter != null && message.hasOwnProperty("rowFooter"))
            if (!$util.isString(message.rowFooter))
                return "rowFooter: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoTableRowConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableRowConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableRowConfig} ProtoTableRowConfig
     */
    ProtoTableRowConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableRowConfig)
            return object;
        var message = new $root.ProtoTableRowConfig();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTableRowConfig.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.settings != null) {
            if (typeof object.settings !== "object")
                throw TypeError(".ProtoTableRowConfig.settings: object expected");
            message.settings = $root.ProtoTableRowSettings.fromObject(object.settings);
        }
        if (object.configName != null)
            message.configName = String(object.configName);
        if (object.rowHeader != null)
            message.rowHeader = String(object.rowHeader);
        if (object.rowFooter != null)
            message.rowFooter = String(object.rowFooter);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTableRowConfig.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableRowConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableRowConfig
     * @static
     * @param {ProtoTableRowConfig} message ProtoTableRowConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableRowConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.settings = null;
            object.configName = "";
            object.rowHeader = "";
            object.rowFooter = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.settings != null && message.hasOwnProperty("settings"))
            object.settings = $root.ProtoTableRowSettings.toObject(message.settings, options);
        if (message.configName != null && message.hasOwnProperty("configName"))
            object.configName = message.configName;
        if (message.rowHeader != null && message.hasOwnProperty("rowHeader"))
            object.rowHeader = message.rowHeader;
        if (message.rowFooter != null && message.hasOwnProperty("rowFooter"))
            object.rowFooter = message.rowFooter;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoTableRowConfig to JSON.
     * @function toJSON
     * @memberof ProtoTableRowConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableRowConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableRowConfig
     * @function getTypeUrl
     * @memberof ProtoTableRowConfig
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableRowConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableRowConfig";
    };

    return ProtoTableRowConfig;
})();

$root.ProtoTableRowSettings = (function() {

    /**
     * Properties of a ProtoTableRowSettings.
     * @name IProtoTableRowSettings
     * @interface IProtoTableRowSettings
     * @property {IProtoMeasure|null} [minHeight] ProtoTableRowSettings minHeight
     * @property {IProtoTableWS|null} [ws] ProtoTableRowSettings ws
     */

    /**
     * Constructs a new ProtoTableRowSettings.
     * @name ProtoTableRowSettings
     * @classdesc Represents a ProtoTableRowSettings.
     * @implements IProtoTableRowSettings
     * @constructor
     * @param {IProtoTableRowSettings=} [properties] Properties to set
     */
    function ProtoTableRowSettings(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableRowSettings minHeight.
     * @member {IProtoMeasure|null|undefined} minHeight
     * @memberof ProtoTableRowSettings
     * @instance
     */
    ProtoTableRowSettings.prototype.minHeight = null;

    /**
     * ProtoTableRowSettings ws.
     * @member {IProtoTableWS|null|undefined} ws
     * @memberof ProtoTableRowSettings
     * @instance
     */
    ProtoTableRowSettings.prototype.ws = null;

    /**
     * Creates a new ProtoTableRowSettings instance using the specified properties.
     * @function create
     * @memberof ProtoTableRowSettings
     * @static
     * @param {IProtoTableRowSettings=} [properties] Properties to set
     * @returns {ProtoTableRowSettings} ProtoTableRowSettings instance
     */
    ProtoTableRowSettings.create = function create(properties) {
        return new ProtoTableRowSettings(properties);
    };

    /**
     * Encodes the specified ProtoTableRowSettings message. Does not implicitly {@link ProtoTableRowSettings.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableRowSettings
     * @static
     * @param {IProtoTableRowSettings} message ProtoTableRowSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableRowSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.minHeight != null && Object.hasOwnProperty.call(message, "minHeight"))
            $root.ProtoMeasure.encode(message.minHeight, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.ws != null && Object.hasOwnProperty.call(message, "ws"))
            $root.ProtoTableWS.encode(message.ws, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTableRowSettings message, length delimited. Does not implicitly {@link ProtoTableRowSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableRowSettings
     * @static
     * @param {IProtoTableRowSettings} message ProtoTableRowSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableRowSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableRowSettings message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableRowSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableRowSettings} ProtoTableRowSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableRowSettings.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableRowSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.minHeight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.ws = $root.ProtoTableWS.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableRowSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableRowSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableRowSettings} ProtoTableRowSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableRowSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableRowSettings message.
     * @function verify
     * @memberof ProtoTableRowSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableRowSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.minHeight != null && message.hasOwnProperty("minHeight")) {
            var error = $root.ProtoMeasure.verify(message.minHeight);
            if (error)
                return "minHeight." + error;
        }
        if (message.ws != null && message.hasOwnProperty("ws")) {
            var error = $root.ProtoTableWS.verify(message.ws);
            if (error)
                return "ws." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTableRowSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableRowSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableRowSettings} ProtoTableRowSettings
     */
    ProtoTableRowSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableRowSettings)
            return object;
        var message = new $root.ProtoTableRowSettings();
        if (object.minHeight != null) {
            if (typeof object.minHeight !== "object")
                throw TypeError(".ProtoTableRowSettings.minHeight: object expected");
            message.minHeight = $root.ProtoMeasure.fromObject(object.minHeight);
        }
        if (object.ws != null) {
            if (typeof object.ws !== "object")
                throw TypeError(".ProtoTableRowSettings.ws: object expected");
            message.ws = $root.ProtoTableWS.fromObject(object.ws);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableRowSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableRowSettings
     * @static
     * @param {ProtoTableRowSettings} message ProtoTableRowSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableRowSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.minHeight = null;
            object.ws = null;
        }
        if (message.minHeight != null && message.hasOwnProperty("minHeight"))
            object.minHeight = $root.ProtoMeasure.toObject(message.minHeight, options);
        if (message.ws != null && message.hasOwnProperty("ws"))
            object.ws = $root.ProtoTableWS.toObject(message.ws, options);
        return object;
    };

    /**
     * Converts this ProtoTableRowSettings to JSON.
     * @function toJSON
     * @memberof ProtoTableRowSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableRowSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableRowSettings
     * @function getTypeUrl
     * @memberof ProtoTableRowSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableRowSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableRowSettings";
    };

    return ProtoTableRowSettings;
})();

/**
 * ProtoTableCellType enum.
 * @name ProtoTableCellType
 * @enum {number}
 * @property {number} TABLE_CELL_BODY=0 TABLE_CELL_BODY value
 * @property {number} TABLE_CELL_ROW_HEADER=1 TABLE_CELL_ROW_HEADER value
 * @property {number} TABLE_CELL_ROW_FOOTER=2 TABLE_CELL_ROW_FOOTER value
 */
$root.ProtoTableCellType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "TABLE_CELL_BODY"] = 0;
    values[valuesById[1] = "TABLE_CELL_ROW_HEADER"] = 1;
    values[valuesById[2] = "TABLE_CELL_ROW_FOOTER"] = 2;
    return values;
})();

$root.ProtoBoxedTableCellType = (function() {

    /**
     * Properties of a ProtoBoxedTableCellType.
     * @name IProtoBoxedTableCellType
     * @interface IProtoBoxedTableCellType
     * @property {ProtoTableCellType|null} [value] ProtoBoxedTableCellType value
     * @property {boolean|null} [isNull] ProtoBoxedTableCellType isNull
     */

    /**
     * Constructs a new ProtoBoxedTableCellType.
     * @name ProtoBoxedTableCellType
     * @classdesc Represents a ProtoBoxedTableCellType.
     * @implements IProtoBoxedTableCellType
     * @constructor
     * @param {IProtoBoxedTableCellType=} [properties] Properties to set
     */
    function ProtoBoxedTableCellType(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBoxedTableCellType value.
     * @member {ProtoTableCellType} value
     * @memberof ProtoBoxedTableCellType
     * @instance
     */
    ProtoBoxedTableCellType.prototype.value = 0;

    /**
     * ProtoBoxedTableCellType isNull.
     * @member {boolean} isNull
     * @memberof ProtoBoxedTableCellType
     * @instance
     */
    ProtoBoxedTableCellType.prototype.isNull = false;

    /**
     * Creates a new ProtoBoxedTableCellType instance using the specified properties.
     * @function create
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {IProtoBoxedTableCellType=} [properties] Properties to set
     * @returns {ProtoBoxedTableCellType} ProtoBoxedTableCellType instance
     */
    ProtoBoxedTableCellType.create = function create(properties) {
        return new ProtoBoxedTableCellType(properties);
    };

    /**
     * Encodes the specified ProtoBoxedTableCellType message. Does not implicitly {@link ProtoBoxedTableCellType.verify|verify} messages.
     * @function encode
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {IProtoBoxedTableCellType} message ProtoBoxedTableCellType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedTableCellType.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
        if (message.isNull != null && Object.hasOwnProperty.call(message, "isNull"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isNull);
        return writer;
    };

    /**
     * Encodes the specified ProtoBoxedTableCellType message, length delimited. Does not implicitly {@link ProtoBoxedTableCellType.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {IProtoBoxedTableCellType} message ProtoBoxedTableCellType message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBoxedTableCellType.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBoxedTableCellType message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBoxedTableCellType} ProtoBoxedTableCellType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedTableCellType.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBoxedTableCellType();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.value = reader.int32();
                    break;
                }
            case 2: {
                    message.isNull = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBoxedTableCellType message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBoxedTableCellType} ProtoBoxedTableCellType
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBoxedTableCellType.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBoxedTableCellType message.
     * @function verify
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBoxedTableCellType.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.value != null && message.hasOwnProperty("value"))
            switch (message.value) {
            default:
                return "value: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            if (typeof message.isNull !== "boolean")
                return "isNull: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoBoxedTableCellType message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBoxedTableCellType} ProtoBoxedTableCellType
     */
    ProtoBoxedTableCellType.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBoxedTableCellType)
            return object;
        var message = new $root.ProtoBoxedTableCellType();
        switch (object.value) {
        default:
            if (typeof object.value === "number") {
                message.value = object.value;
                break;
            }
            break;
        case "TABLE_CELL_BODY":
        case 0:
            message.value = 0;
            break;
        case "TABLE_CELL_ROW_HEADER":
        case 1:
            message.value = 1;
            break;
        case "TABLE_CELL_ROW_FOOTER":
        case 2:
            message.value = 2;
            break;
        }
        if (object.isNull != null)
            message.isNull = Boolean(object.isNull);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBoxedTableCellType message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {ProtoBoxedTableCellType} message ProtoBoxedTableCellType
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBoxedTableCellType.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.value = options.enums === String ? "TABLE_CELL_BODY" : 0;
            object.isNull = false;
        }
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = options.enums === String ? $root.ProtoTableCellType[message.value] === undefined ? message.value : $root.ProtoTableCellType[message.value] : message.value;
        if (message.isNull != null && message.hasOwnProperty("isNull"))
            object.isNull = message.isNull;
        return object;
    };

    /**
     * Converts this ProtoBoxedTableCellType to JSON.
     * @function toJSON
     * @memberof ProtoBoxedTableCellType
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBoxedTableCellType.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBoxedTableCellType
     * @function getTypeUrl
     * @memberof ProtoBoxedTableCellType
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBoxedTableCellType.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBoxedTableCellType";
    };

    return ProtoBoxedTableCellType;
})();

$root.ProtoTableCell = (function() {

    /**
     * Properties of a ProtoTableCell.
     * @name IProtoTableCell
     * @interface IProtoTableCell
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoTableCell _children
     * @property {IProtoDocumentElement|null} [parent] ProtoTableCell parent
     * @property {IProtoTableCellSettings|null} [settings] ProtoTableCell settings
     * @property {IProtoBoxedUint32|null} [cellConfigNumber] ProtoTableCell cellConfigNumber
     * @property {boolean|null} [mergedLeft] ProtoTableCell mergedLeft
     * @property {boolean|null} [mergedUp] ProtoTableCell mergedUp
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTableCell comChannelUUIDs
     * @property {IProtoTableElementProperties|null} [properties] ProtoTableCell properties
     */

    /**
     * Constructs a new ProtoTableCell.
     * @name ProtoTableCell
     * @classdesc Represents a ProtoTableCell.
     * @implements IProtoTableCell
     * @constructor
     * @param {IProtoTableCell=} [properties] Properties to set
     */
    function ProtoTableCell(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableCell _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoTableCell
     * @instance
     */
    ProtoTableCell.prototype._children = $util.emptyArray;

    /**
     * ProtoTableCell parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTableCell
     * @instance
     */
    ProtoTableCell.prototype.parent = null;

    /**
     * ProtoTableCell settings.
     * @member {IProtoTableCellSettings|null|undefined} settings
     * @memberof ProtoTableCell
     * @instance
     */
    ProtoTableCell.prototype.settings = null;

    /**
     * ProtoTableCell cellConfigNumber.
     * @member {IProtoBoxedUint32|null|undefined} cellConfigNumber
     * @memberof ProtoTableCell
     * @instance
     */
    ProtoTableCell.prototype.cellConfigNumber = null;

    /**
     * ProtoTableCell mergedLeft.
     * @member {boolean} mergedLeft
     * @memberof ProtoTableCell
     * @instance
     */
    ProtoTableCell.prototype.mergedLeft = false;

    /**
     * ProtoTableCell mergedUp.
     * @member {boolean} mergedUp
     * @memberof ProtoTableCell
     * @instance
     */
    ProtoTableCell.prototype.mergedUp = false;

    /**
     * ProtoTableCell comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTableCell
     * @instance
     */
    ProtoTableCell.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoTableCell properties.
     * @member {IProtoTableElementProperties|null|undefined} properties
     * @memberof ProtoTableCell
     * @instance
     */
    ProtoTableCell.prototype.properties = null;

    /**
     * Creates a new ProtoTableCell instance using the specified properties.
     * @function create
     * @memberof ProtoTableCell
     * @static
     * @param {IProtoTableCell=} [properties] Properties to set
     * @returns {ProtoTableCell} ProtoTableCell instance
     */
    ProtoTableCell.create = function create(properties) {
        return new ProtoTableCell(properties);
    };

    /**
     * Encodes the specified ProtoTableCell message. Does not implicitly {@link ProtoTableCell.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableCell
     * @static
     * @param {IProtoTableCell} message ProtoTableCell message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableCell.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
            $root.ProtoTableCellSettings.encode(message.settings, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.cellConfigNumber != null && Object.hasOwnProperty.call(message, "cellConfigNumber"))
            $root.ProtoBoxedUint32.encode(message.cellConfigNumber, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.mergedLeft != null && Object.hasOwnProperty.call(message, "mergedLeft"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.mergedLeft);
        if (message.mergedUp != null && Object.hasOwnProperty.call(message, "mergedUp"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.mergedUp);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.comChannelUUIDs[i]);
        if (message.properties != null && Object.hasOwnProperty.call(message, "properties"))
            $root.ProtoTableElementProperties.encode(message.properties, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTableCell message, length delimited. Does not implicitly {@link ProtoTableCell.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableCell
     * @static
     * @param {IProtoTableCell} message ProtoTableCell message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableCell.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableCell message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableCell
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableCell} ProtoTableCell
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableCell.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableCell();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.settings = $root.ProtoTableCellSettings.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.cellConfigNumber = $root.ProtoBoxedUint32.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.mergedLeft = reader.bool();
                    break;
                }
            case 6: {
                    message.mergedUp = reader.bool();
                    break;
                }
            case 7: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 8: {
                    message.properties = $root.ProtoTableElementProperties.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableCell message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableCell
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableCell} ProtoTableCell
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableCell.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableCell message.
     * @function verify
     * @memberof ProtoTableCell
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableCell.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.settings != null && message.hasOwnProperty("settings")) {
            var error = $root.ProtoTableCellSettings.verify(message.settings);
            if (error)
                return "settings." + error;
        }
        if (message.cellConfigNumber != null && message.hasOwnProperty("cellConfigNumber")) {
            var error = $root.ProtoBoxedUint32.verify(message.cellConfigNumber);
            if (error)
                return "cellConfigNumber." + error;
        }
        if (message.mergedLeft != null && message.hasOwnProperty("mergedLeft"))
            if (typeof message.mergedLeft !== "boolean")
                return "mergedLeft: boolean expected";
        if (message.mergedUp != null && message.hasOwnProperty("mergedUp"))
            if (typeof message.mergedUp !== "boolean")
                return "mergedUp: boolean expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.properties != null && message.hasOwnProperty("properties")) {
            var error = $root.ProtoTableElementProperties.verify(message.properties);
            if (error)
                return "properties." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTableCell message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableCell
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableCell} ProtoTableCell
     */
    ProtoTableCell.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableCell)
            return object;
        var message = new $root.ProtoTableCell();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoTableCell._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoTableCell._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTableCell.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.settings != null) {
            if (typeof object.settings !== "object")
                throw TypeError(".ProtoTableCell.settings: object expected");
            message.settings = $root.ProtoTableCellSettings.fromObject(object.settings);
        }
        if (object.cellConfigNumber != null) {
            if (typeof object.cellConfigNumber !== "object")
                throw TypeError(".ProtoTableCell.cellConfigNumber: object expected");
            message.cellConfigNumber = $root.ProtoBoxedUint32.fromObject(object.cellConfigNumber);
        }
        if (object.mergedLeft != null)
            message.mergedLeft = Boolean(object.mergedLeft);
        if (object.mergedUp != null)
            message.mergedUp = Boolean(object.mergedUp);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTableCell.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.properties != null) {
            if (typeof object.properties !== "object")
                throw TypeError(".ProtoTableCell.properties: object expected");
            message.properties = $root.ProtoTableElementProperties.fromObject(object.properties);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableCell message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableCell
     * @static
     * @param {ProtoTableCell} message ProtoTableCell
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableCell.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.settings = null;
            object.cellConfigNumber = null;
            object.mergedLeft = false;
            object.mergedUp = false;
            object.properties = null;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.settings != null && message.hasOwnProperty("settings"))
            object.settings = $root.ProtoTableCellSettings.toObject(message.settings, options);
        if (message.cellConfigNumber != null && message.hasOwnProperty("cellConfigNumber"))
            object.cellConfigNumber = $root.ProtoBoxedUint32.toObject(message.cellConfigNumber, options);
        if (message.mergedLeft != null && message.hasOwnProperty("mergedLeft"))
            object.mergedLeft = message.mergedLeft;
        if (message.mergedUp != null && message.hasOwnProperty("mergedUp"))
            object.mergedUp = message.mergedUp;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.properties != null && message.hasOwnProperty("properties"))
            object.properties = $root.ProtoTableElementProperties.toObject(message.properties, options);
        return object;
    };

    /**
     * Converts this ProtoTableCell to JSON.
     * @function toJSON
     * @memberof ProtoTableCell
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableCell.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableCell
     * @function getTypeUrl
     * @memberof ProtoTableCell
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableCell.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableCell";
    };

    return ProtoTableCell;
})();

$root.ProtoTableCellConfig = (function() {

    /**
     * Properties of a ProtoTableCellConfig.
     * @name IProtoTableCellConfig
     * @interface IProtoTableCellConfig
     * @property {IProtoDocumentElement|null} [parent] ProtoTableCellConfig parent
     * @property {IProtoTableCellSettings|null} [settings] ProtoTableCellConfig settings
     * @property {string|null} [configName] ProtoTableCellConfig configName
     * @property {IProtoBoxedTableCellType|null} [cellType] ProtoTableCellConfig cellType
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTableCellConfig comChannelUUIDs
     */

    /**
     * Constructs a new ProtoTableCellConfig.
     * @name ProtoTableCellConfig
     * @classdesc Represents a ProtoTableCellConfig.
     * @implements IProtoTableCellConfig
     * @constructor
     * @param {IProtoTableCellConfig=} [properties] Properties to set
     */
    function ProtoTableCellConfig(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableCellConfig parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTableCellConfig
     * @instance
     */
    ProtoTableCellConfig.prototype.parent = null;

    /**
     * ProtoTableCellConfig settings.
     * @member {IProtoTableCellSettings|null|undefined} settings
     * @memberof ProtoTableCellConfig
     * @instance
     */
    ProtoTableCellConfig.prototype.settings = null;

    /**
     * ProtoTableCellConfig configName.
     * @member {string} configName
     * @memberof ProtoTableCellConfig
     * @instance
     */
    ProtoTableCellConfig.prototype.configName = "";

    /**
     * ProtoTableCellConfig cellType.
     * @member {IProtoBoxedTableCellType|null|undefined} cellType
     * @memberof ProtoTableCellConfig
     * @instance
     */
    ProtoTableCellConfig.prototype.cellType = null;

    /**
     * ProtoTableCellConfig comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTableCellConfig
     * @instance
     */
    ProtoTableCellConfig.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoTableCellConfig instance using the specified properties.
     * @function create
     * @memberof ProtoTableCellConfig
     * @static
     * @param {IProtoTableCellConfig=} [properties] Properties to set
     * @returns {ProtoTableCellConfig} ProtoTableCellConfig instance
     */
    ProtoTableCellConfig.create = function create(properties) {
        return new ProtoTableCellConfig(properties);
    };

    /**
     * Encodes the specified ProtoTableCellConfig message. Does not implicitly {@link ProtoTableCellConfig.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableCellConfig
     * @static
     * @param {IProtoTableCellConfig} message ProtoTableCellConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableCellConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.settings != null && Object.hasOwnProperty.call(message, "settings"))
            $root.ProtoTableCellSettings.encode(message.settings, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.configName != null && Object.hasOwnProperty.call(message, "configName"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.configName);
        if (message.cellType != null && Object.hasOwnProperty.call(message, "cellType"))
            $root.ProtoBoxedTableCellType.encode(message.cellType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoTableCellConfig message, length delimited. Does not implicitly {@link ProtoTableCellConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableCellConfig
     * @static
     * @param {IProtoTableCellConfig} message ProtoTableCellConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableCellConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableCellConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableCellConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableCellConfig} ProtoTableCellConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableCellConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableCellConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.settings = $root.ProtoTableCellSettings.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.configName = reader.string();
                    break;
                }
            case 4: {
                    message.cellType = $root.ProtoBoxedTableCellType.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableCellConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableCellConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableCellConfig} ProtoTableCellConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableCellConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableCellConfig message.
     * @function verify
     * @memberof ProtoTableCellConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableCellConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.settings != null && message.hasOwnProperty("settings")) {
            var error = $root.ProtoTableCellSettings.verify(message.settings);
            if (error)
                return "settings." + error;
        }
        if (message.configName != null && message.hasOwnProperty("configName"))
            if (!$util.isString(message.configName))
                return "configName: string expected";
        if (message.cellType != null && message.hasOwnProperty("cellType")) {
            var error = $root.ProtoBoxedTableCellType.verify(message.cellType);
            if (error)
                return "cellType." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoTableCellConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableCellConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableCellConfig} ProtoTableCellConfig
     */
    ProtoTableCellConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableCellConfig)
            return object;
        var message = new $root.ProtoTableCellConfig();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTableCellConfig.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.settings != null) {
            if (typeof object.settings !== "object")
                throw TypeError(".ProtoTableCellConfig.settings: object expected");
            message.settings = $root.ProtoTableCellSettings.fromObject(object.settings);
        }
        if (object.configName != null)
            message.configName = String(object.configName);
        if (object.cellType != null) {
            if (typeof object.cellType !== "object")
                throw TypeError(".ProtoTableCellConfig.cellType: object expected");
            message.cellType = $root.ProtoBoxedTableCellType.fromObject(object.cellType);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTableCellConfig.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableCellConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableCellConfig
     * @static
     * @param {ProtoTableCellConfig} message ProtoTableCellConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableCellConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.settings = null;
            object.configName = "";
            object.cellType = null;
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.settings != null && message.hasOwnProperty("settings"))
            object.settings = $root.ProtoTableCellSettings.toObject(message.settings, options);
        if (message.configName != null && message.hasOwnProperty("configName"))
            object.configName = message.configName;
        if (message.cellType != null && message.hasOwnProperty("cellType"))
            object.cellType = $root.ProtoBoxedTableCellType.toObject(message.cellType, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoTableCellConfig to JSON.
     * @function toJSON
     * @memberof ProtoTableCellConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableCellConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableCellConfig
     * @function getTypeUrl
     * @memberof ProtoTableCellConfig
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableCellConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableCellConfig";
    };

    return ProtoTableCellConfig;
})();

$root.ProtoTableCellSettings = (function() {

    /**
     * Properties of a ProtoTableCellSettings.
     * @name IProtoTableCellSettings
     * @interface IProtoTableCellSettings
     * @property {IProtoMeasure|null} [width] ProtoTableCellSettings width
     * @property {IProtoBoxedHorizontalAlignment|null} [align] ProtoTableCellSettings align
     * @property {IProtoBoxedVerticalAlignment|null} [valign] ProtoTableCellSettings valign
     * @property {IProtoColor|null} [backgroundColor] ProtoTableCellSettings backgroundColor
     * @property {IProtoSideMeasures|null} [padding] ProtoTableCellSettings padding
     * @property {IProtoSideBorders|null} [border] ProtoTableCellSettings border
     * @property {IProtoSideMeasures|null} [margin] ProtoTableCellSettings margin
     * @property {IProtoBoxedDouble|null} [rotation] ProtoTableCellSettings rotation
     * @property {IProtoBoxedString|null} [defaultParagraphFormat] ProtoTableCellSettings defaultParagraphFormat
     */

    /**
     * Constructs a new ProtoTableCellSettings.
     * @name ProtoTableCellSettings
     * @classdesc Represents a ProtoTableCellSettings.
     * @implements IProtoTableCellSettings
     * @constructor
     * @param {IProtoTableCellSettings=} [properties] Properties to set
     */
    function ProtoTableCellSettings(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableCellSettings width.
     * @member {IProtoMeasure|null|undefined} width
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.width = null;

    /**
     * ProtoTableCellSettings align.
     * @member {IProtoBoxedHorizontalAlignment|null|undefined} align
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.align = null;

    /**
     * ProtoTableCellSettings valign.
     * @member {IProtoBoxedVerticalAlignment|null|undefined} valign
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.valign = null;

    /**
     * ProtoTableCellSettings backgroundColor.
     * @member {IProtoColor|null|undefined} backgroundColor
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.backgroundColor = null;

    /**
     * ProtoTableCellSettings padding.
     * @member {IProtoSideMeasures|null|undefined} padding
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.padding = null;

    /**
     * ProtoTableCellSettings border.
     * @member {IProtoSideBorders|null|undefined} border
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.border = null;

    /**
     * ProtoTableCellSettings margin.
     * @member {IProtoSideMeasures|null|undefined} margin
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.margin = null;

    /**
     * ProtoTableCellSettings rotation.
     * @member {IProtoBoxedDouble|null|undefined} rotation
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.rotation = null;

    /**
     * ProtoTableCellSettings defaultParagraphFormat.
     * @member {IProtoBoxedString|null|undefined} defaultParagraphFormat
     * @memberof ProtoTableCellSettings
     * @instance
     */
    ProtoTableCellSettings.prototype.defaultParagraphFormat = null;

    /**
     * Creates a new ProtoTableCellSettings instance using the specified properties.
     * @function create
     * @memberof ProtoTableCellSettings
     * @static
     * @param {IProtoTableCellSettings=} [properties] Properties to set
     * @returns {ProtoTableCellSettings} ProtoTableCellSettings instance
     */
    ProtoTableCellSettings.create = function create(properties) {
        return new ProtoTableCellSettings(properties);
    };

    /**
     * Encodes the specified ProtoTableCellSettings message. Does not implicitly {@link ProtoTableCellSettings.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableCellSettings
     * @static
     * @param {IProtoTableCellSettings} message ProtoTableCellSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableCellSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoMeasure.encode(message.width, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.align != null && Object.hasOwnProperty.call(message, "align"))
            $root.ProtoBoxedHorizontalAlignment.encode(message.align, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.valign != null && Object.hasOwnProperty.call(message, "valign"))
            $root.ProtoBoxedVerticalAlignment.encode(message.valign, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.backgroundColor != null && Object.hasOwnProperty.call(message, "backgroundColor"))
            $root.ProtoColor.encode(message.backgroundColor, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.padding != null && Object.hasOwnProperty.call(message, "padding"))
            $root.ProtoSideMeasures.encode(message.padding, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.border != null && Object.hasOwnProperty.call(message, "border"))
            $root.ProtoSideBorders.encode(message.border, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.margin != null && Object.hasOwnProperty.call(message, "margin"))
            $root.ProtoSideMeasures.encode(message.margin, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.rotation != null && Object.hasOwnProperty.call(message, "rotation"))
            $root.ProtoBoxedDouble.encode(message.rotation, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.defaultParagraphFormat != null && Object.hasOwnProperty.call(message, "defaultParagraphFormat"))
            $root.ProtoBoxedString.encode(message.defaultParagraphFormat, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoTableCellSettings message, length delimited. Does not implicitly {@link ProtoTableCellSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableCellSettings
     * @static
     * @param {IProtoTableCellSettings} message ProtoTableCellSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableCellSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableCellSettings message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableCellSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableCellSettings} ProtoTableCellSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableCellSettings.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableCellSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.width = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.align = $root.ProtoBoxedHorizontalAlignment.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.valign = $root.ProtoBoxedVerticalAlignment.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.backgroundColor = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.padding = $root.ProtoSideMeasures.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.border = $root.ProtoSideBorders.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.margin = $root.ProtoSideMeasures.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.rotation = $root.ProtoBoxedDouble.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.defaultParagraphFormat = $root.ProtoBoxedString.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableCellSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableCellSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableCellSettings} ProtoTableCellSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableCellSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableCellSettings message.
     * @function verify
     * @memberof ProtoTableCellSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableCellSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.align != null && message.hasOwnProperty("align")) {
            var error = $root.ProtoBoxedHorizontalAlignment.verify(message.align);
            if (error)
                return "align." + error;
        }
        if (message.valign != null && message.hasOwnProperty("valign")) {
            var error = $root.ProtoBoxedVerticalAlignment.verify(message.valign);
            if (error)
                return "valign." + error;
        }
        if (message.backgroundColor != null && message.hasOwnProperty("backgroundColor")) {
            var error = $root.ProtoColor.verify(message.backgroundColor);
            if (error)
                return "backgroundColor." + error;
        }
        if (message.padding != null && message.hasOwnProperty("padding")) {
            var error = $root.ProtoSideMeasures.verify(message.padding);
            if (error)
                return "padding." + error;
        }
        if (message.border != null && message.hasOwnProperty("border")) {
            var error = $root.ProtoSideBorders.verify(message.border);
            if (error)
                return "border." + error;
        }
        if (message.margin != null && message.hasOwnProperty("margin")) {
            var error = $root.ProtoSideMeasures.verify(message.margin);
            if (error)
                return "margin." + error;
        }
        if (message.rotation != null && message.hasOwnProperty("rotation")) {
            var error = $root.ProtoBoxedDouble.verify(message.rotation);
            if (error)
                return "rotation." + error;
        }
        if (message.defaultParagraphFormat != null && message.hasOwnProperty("defaultParagraphFormat")) {
            var error = $root.ProtoBoxedString.verify(message.defaultParagraphFormat);
            if (error)
                return "defaultParagraphFormat." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoTableCellSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableCellSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableCellSettings} ProtoTableCellSettings
     */
    ProtoTableCellSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableCellSettings)
            return object;
        var message = new $root.ProtoTableCellSettings();
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoTableCellSettings.width: object expected");
            message.width = $root.ProtoMeasure.fromObject(object.width);
        }
        if (object.align != null) {
            if (typeof object.align !== "object")
                throw TypeError(".ProtoTableCellSettings.align: object expected");
            message.align = $root.ProtoBoxedHorizontalAlignment.fromObject(object.align);
        }
        if (object.valign != null) {
            if (typeof object.valign !== "object")
                throw TypeError(".ProtoTableCellSettings.valign: object expected");
            message.valign = $root.ProtoBoxedVerticalAlignment.fromObject(object.valign);
        }
        if (object.backgroundColor != null) {
            if (typeof object.backgroundColor !== "object")
                throw TypeError(".ProtoTableCellSettings.backgroundColor: object expected");
            message.backgroundColor = $root.ProtoColor.fromObject(object.backgroundColor);
        }
        if (object.padding != null) {
            if (typeof object.padding !== "object")
                throw TypeError(".ProtoTableCellSettings.padding: object expected");
            message.padding = $root.ProtoSideMeasures.fromObject(object.padding);
        }
        if (object.border != null) {
            if (typeof object.border !== "object")
                throw TypeError(".ProtoTableCellSettings.border: object expected");
            message.border = $root.ProtoSideBorders.fromObject(object.border);
        }
        if (object.margin != null) {
            if (typeof object.margin !== "object")
                throw TypeError(".ProtoTableCellSettings.margin: object expected");
            message.margin = $root.ProtoSideMeasures.fromObject(object.margin);
        }
        if (object.rotation != null) {
            if (typeof object.rotation !== "object")
                throw TypeError(".ProtoTableCellSettings.rotation: object expected");
            message.rotation = $root.ProtoBoxedDouble.fromObject(object.rotation);
        }
        if (object.defaultParagraphFormat != null) {
            if (typeof object.defaultParagraphFormat !== "object")
                throw TypeError(".ProtoTableCellSettings.defaultParagraphFormat: object expected");
            message.defaultParagraphFormat = $root.ProtoBoxedString.fromObject(object.defaultParagraphFormat);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableCellSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableCellSettings
     * @static
     * @param {ProtoTableCellSettings} message ProtoTableCellSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableCellSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.width = null;
            object.align = null;
            object.valign = null;
            object.backgroundColor = null;
            object.padding = null;
            object.border = null;
            object.margin = null;
            object.rotation = null;
            object.defaultParagraphFormat = null;
        }
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoMeasure.toObject(message.width, options);
        if (message.align != null && message.hasOwnProperty("align"))
            object.align = $root.ProtoBoxedHorizontalAlignment.toObject(message.align, options);
        if (message.valign != null && message.hasOwnProperty("valign"))
            object.valign = $root.ProtoBoxedVerticalAlignment.toObject(message.valign, options);
        if (message.backgroundColor != null && message.hasOwnProperty("backgroundColor"))
            object.backgroundColor = $root.ProtoColor.toObject(message.backgroundColor, options);
        if (message.padding != null && message.hasOwnProperty("padding"))
            object.padding = $root.ProtoSideMeasures.toObject(message.padding, options);
        if (message.border != null && message.hasOwnProperty("border"))
            object.border = $root.ProtoSideBorders.toObject(message.border, options);
        if (message.margin != null && message.hasOwnProperty("margin"))
            object.margin = $root.ProtoSideMeasures.toObject(message.margin, options);
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            object.rotation = $root.ProtoBoxedDouble.toObject(message.rotation, options);
        if (message.defaultParagraphFormat != null && message.hasOwnProperty("defaultParagraphFormat"))
            object.defaultParagraphFormat = $root.ProtoBoxedString.toObject(message.defaultParagraphFormat, options);
        return object;
    };

    /**
     * Converts this ProtoTableCellSettings to JSON.
     * @function toJSON
     * @memberof ProtoTableCellSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableCellSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableCellSettings
     * @function getTypeUrl
     * @memberof ProtoTableCellSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableCellSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableCellSettings";
    };

    return ProtoTableCellSettings;
})();

$root.ProtoTableWS = (function() {

    /**
     * Properties of a ProtoTableWS.
     * @name IProtoTableWS
     * @interface IProtoTableWS
     * @property {number|null} [minLinesBefore] ProtoTableWS minLinesBefore
     * @property {number|null} [minLinesAfter] ProtoTableWS minLinesAfter
     * @property {number|null} [priority] ProtoTableWS priority
     */

    /**
     * Constructs a new ProtoTableWS.
     * @name ProtoTableWS
     * @classdesc Represents a ProtoTableWS.
     * @implements IProtoTableWS
     * @constructor
     * @param {IProtoTableWS=} [properties] Properties to set
     */
    function ProtoTableWS(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableWS minLinesBefore.
     * @member {number} minLinesBefore
     * @memberof ProtoTableWS
     * @instance
     */
    ProtoTableWS.prototype.minLinesBefore = 0;

    /**
     * ProtoTableWS minLinesAfter.
     * @member {number} minLinesAfter
     * @memberof ProtoTableWS
     * @instance
     */
    ProtoTableWS.prototype.minLinesAfter = 0;

    /**
     * ProtoTableWS priority.
     * @member {number} priority
     * @memberof ProtoTableWS
     * @instance
     */
    ProtoTableWS.prototype.priority = 0;

    /**
     * Creates a new ProtoTableWS instance using the specified properties.
     * @function create
     * @memberof ProtoTableWS
     * @static
     * @param {IProtoTableWS=} [properties] Properties to set
     * @returns {ProtoTableWS} ProtoTableWS instance
     */
    ProtoTableWS.create = function create(properties) {
        return new ProtoTableWS(properties);
    };

    /**
     * Encodes the specified ProtoTableWS message. Does not implicitly {@link ProtoTableWS.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableWS
     * @static
     * @param {IProtoTableWS} message ProtoTableWS message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableWS.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.minLinesBefore != null && Object.hasOwnProperty.call(message, "minLinesBefore"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.minLinesBefore);
        if (message.minLinesAfter != null && Object.hasOwnProperty.call(message, "minLinesAfter"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.minLinesAfter);
        if (message.priority != null && Object.hasOwnProperty.call(message, "priority"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.priority);
        return writer;
    };

    /**
     * Encodes the specified ProtoTableWS message, length delimited. Does not implicitly {@link ProtoTableWS.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableWS
     * @static
     * @param {IProtoTableWS} message ProtoTableWS message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableWS.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableWS message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableWS
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableWS} ProtoTableWS
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableWS.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableWS();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.minLinesBefore = reader.uint32();
                    break;
                }
            case 2: {
                    message.minLinesAfter = reader.uint32();
                    break;
                }
            case 3: {
                    message.priority = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableWS message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableWS
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableWS} ProtoTableWS
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableWS.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableWS message.
     * @function verify
     * @memberof ProtoTableWS
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableWS.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.minLinesBefore != null && message.hasOwnProperty("minLinesBefore"))
            if (!$util.isInteger(message.minLinesBefore))
                return "minLinesBefore: integer expected";
        if (message.minLinesAfter != null && message.hasOwnProperty("minLinesAfter"))
            if (!$util.isInteger(message.minLinesAfter))
                return "minLinesAfter: integer expected";
        if (message.priority != null && message.hasOwnProperty("priority"))
            if (!$util.isInteger(message.priority))
                return "priority: integer expected";
        return null;
    };

    /**
     * Creates a ProtoTableWS message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableWS
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableWS} ProtoTableWS
     */
    ProtoTableWS.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableWS)
            return object;
        var message = new $root.ProtoTableWS();
        if (object.minLinesBefore != null)
            message.minLinesBefore = object.minLinesBefore >>> 0;
        if (object.minLinesAfter != null)
            message.minLinesAfter = object.minLinesAfter >>> 0;
        if (object.priority != null)
            message.priority = object.priority >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableWS message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableWS
     * @static
     * @param {ProtoTableWS} message ProtoTableWS
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableWS.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.minLinesBefore = 0;
            object.minLinesAfter = 0;
            object.priority = 0;
        }
        if (message.minLinesBefore != null && message.hasOwnProperty("minLinesBefore"))
            object.minLinesBefore = message.minLinesBefore;
        if (message.minLinesAfter != null && message.hasOwnProperty("minLinesAfter"))
            object.minLinesAfter = message.minLinesAfter;
        if (message.priority != null && message.hasOwnProperty("priority"))
            object.priority = message.priority;
        return object;
    };

    /**
     * Converts this ProtoTableWS to JSON.
     * @function toJSON
     * @memberof ProtoTableWS
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableWS.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableWS
     * @function getTypeUrl
     * @memberof ProtoTableWS
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableWS.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableWS";
    };

    return ProtoTableWS;
})();

$root.ProtoTableElementProperties = (function() {

    /**
     * Properties of a ProtoTableElementProperties.
     * @name IProtoTableElementProperties
     * @interface IProtoTableElementProperties
     * @property {Inheritance|null} [widthInheritance] ProtoTableElementProperties widthInheritance
     * @property {IProtoMeasure|null} [width] ProtoTableElementProperties width
     * @property {string|null} [widthCode] ProtoTableElementProperties widthCode
     * @property {Inheritance|null} [alignInheritance] ProtoTableElementProperties alignInheritance
     * @property {ProtoHorizontalAlignment|null} [align] ProtoTableElementProperties align
     * @property {string|null} [alignCode] ProtoTableElementProperties alignCode
     * @property {Inheritance|null} [valignInheritance] ProtoTableElementProperties valignInheritance
     * @property {ProtoVerticalAlignment|null} [valign] ProtoTableElementProperties valign
     * @property {string|null} [valignCode] ProtoTableElementProperties valignCode
     * @property {Inheritance|null} [backgroundColorInheritance] ProtoTableElementProperties backgroundColorInheritance
     * @property {Array.<IProtoColor>|null} [backgroundColor] ProtoTableElementProperties backgroundColor
     * @property {string|null} [backgroundColorCode] ProtoTableElementProperties backgroundColorCode
     * @property {Inheritance|null} [paddingTopInheritance] ProtoTableElementProperties paddingTopInheritance
     * @property {IProtoMeasure|null} [paddingTop] ProtoTableElementProperties paddingTop
     * @property {string|null} [paddingTopCode] ProtoTableElementProperties paddingTopCode
     * @property {Inheritance|null} [paddingRightInheritance] ProtoTableElementProperties paddingRightInheritance
     * @property {IProtoMeasure|null} [paddingRight] ProtoTableElementProperties paddingRight
     * @property {string|null} [paddingRightCode] ProtoTableElementProperties paddingRightCode
     * @property {Inheritance|null} [paddingBottomInheritance] ProtoTableElementProperties paddingBottomInheritance
     * @property {IProtoMeasure|null} [paddingBottom] ProtoTableElementProperties paddingBottom
     * @property {string|null} [paddingBottomCode] ProtoTableElementProperties paddingBottomCode
     * @property {Inheritance|null} [paddingLeftInheritance] ProtoTableElementProperties paddingLeftInheritance
     * @property {IProtoMeasure|null} [paddingLeft] ProtoTableElementProperties paddingLeft
     * @property {string|null} [paddingLeftCode] ProtoTableElementProperties paddingLeftCode
     * @property {Inheritance|null} [borderTopColorInheritance] ProtoTableElementProperties borderTopColorInheritance
     * @property {IProtoMeasure|null} [borderTopColor] ProtoTableElementProperties borderTopColor
     * @property {string|null} [borderTopColorCode] ProtoTableElementProperties borderTopColorCode
     * @property {Inheritance|null} [borderTopWeightInheritance] ProtoTableElementProperties borderTopWeightInheritance
     * @property {IProtoMeasure|null} [borderTopWeight] ProtoTableElementProperties borderTopWeight
     * @property {string|null} [borderTopWeightCode] ProtoTableElementProperties borderTopWeightCode
     * @property {Inheritance|null} [borderRightColorInheritance] ProtoTableElementProperties borderRightColorInheritance
     * @property {IProtoMeasure|null} [borderRightColor] ProtoTableElementProperties borderRightColor
     * @property {string|null} [borderRightColorCode] ProtoTableElementProperties borderRightColorCode
     * @property {Inheritance|null} [borderRightWeightInheritance] ProtoTableElementProperties borderRightWeightInheritance
     * @property {IProtoMeasure|null} [borderRightWeight] ProtoTableElementProperties borderRightWeight
     * @property {string|null} [borderRightWeightCode] ProtoTableElementProperties borderRightWeightCode
     * @property {Inheritance|null} [borderBottomColorInheritance] ProtoTableElementProperties borderBottomColorInheritance
     * @property {IProtoMeasure|null} [borderBottomColor] ProtoTableElementProperties borderBottomColor
     * @property {string|null} [borderBottomColorCode] ProtoTableElementProperties borderBottomColorCode
     * @property {Inheritance|null} [borderBottomWeightInheritance] ProtoTableElementProperties borderBottomWeightInheritance
     * @property {IProtoMeasure|null} [borderBottomWeight] ProtoTableElementProperties borderBottomWeight
     * @property {string|null} [borderBottomWeightCode] ProtoTableElementProperties borderBottomWeightCode
     * @property {Inheritance|null} [borderLeftColorInheritance] ProtoTableElementProperties borderLeftColorInheritance
     * @property {IProtoMeasure|null} [borderLeftColor] ProtoTableElementProperties borderLeftColor
     * @property {string|null} [borderLeftColorCode] ProtoTableElementProperties borderLeftColorCode
     * @property {Inheritance|null} [borderLeftWeightInheritance] ProtoTableElementProperties borderLeftWeightInheritance
     * @property {IProtoMeasure|null} [borderLeftWeight] ProtoTableElementProperties borderLeftWeight
     * @property {string|null} [borderLeftWeightCode] ProtoTableElementProperties borderLeftWeightCode
     * @property {Inheritance|null} [marginTopInheritance] ProtoTableElementProperties marginTopInheritance
     * @property {IProtoMeasure|null} [marginTop] ProtoTableElementProperties marginTop
     * @property {string|null} [marginTopCode] ProtoTableElementProperties marginTopCode
     * @property {Inheritance|null} [marginRightInheritance] ProtoTableElementProperties marginRightInheritance
     * @property {IProtoMeasure|null} [marginRight] ProtoTableElementProperties marginRight
     * @property {string|null} [marginRightCode] ProtoTableElementProperties marginRightCode
     * @property {Inheritance|null} [marginBottomInheritance] ProtoTableElementProperties marginBottomInheritance
     * @property {IProtoMeasure|null} [marginBottom] ProtoTableElementProperties marginBottom
     * @property {string|null} [marginBottomCode] ProtoTableElementProperties marginBottomCode
     * @property {Inheritance|null} [marginLeftInheritance] ProtoTableElementProperties marginLeftInheritance
     * @property {IProtoMeasure|null} [marginLeft] ProtoTableElementProperties marginLeft
     * @property {string|null} [marginLeftCode] ProtoTableElementProperties marginLeftCode
     * @property {Inheritance|null} [rotationInheritance] ProtoTableElementProperties rotationInheritance
     * @property {number|null} [rotation] ProtoTableElementProperties rotation
     * @property {string|null} [rotationCode] ProtoTableElementProperties rotationCode
     * @property {Inheritance|null} [defaultParagraphFormatUUIDInheritance] ProtoTableElementProperties defaultParagraphFormatUUIDInheritance
     * @property {string|null} [defaultParagraphFormatUUID] ProtoTableElementProperties defaultParagraphFormatUUID
     * @property {string|null} [defaultParagraphFormatUUIDCode] ProtoTableElementProperties defaultParagraphFormatUUIDCode
     * @property {Inheritance|null} [tableContentGroupTypeInheritance] ProtoTableElementProperties tableContentGroupTypeInheritance
     * @property {ProtoTableContentGroupType|null} [tableContentGroupType] ProtoTableElementProperties tableContentGroupType
     * @property {string|null} [tableContentGroupTypeCode] ProtoTableElementProperties tableContentGroupTypeCode
     * @property {Inheritance|null} [cellTypeInheritance] ProtoTableElementProperties cellTypeInheritance
     * @property {ProtoTableCellType|null} [cellType] ProtoTableElementProperties cellType
     * @property {string|null} [cellTypeCode] ProtoTableElementProperties cellTypeCode
     * @property {Inheritance|null} [minRowHeightInheritance] ProtoTableElementProperties minRowHeightInheritance
     * @property {IProtoMeasure|null} [minRowHeight] ProtoTableElementProperties minRowHeight
     * @property {string|null} [minRowHeightCode] ProtoTableElementProperties minRowHeightCode
     * @property {Inheritance|null} [wsInheritance] ProtoTableElementProperties wsInheritance
     * @property {IProtoTableWS|null} [ws] ProtoTableElementProperties ws
     * @property {string|null} [wsCode] ProtoTableElementProperties wsCode
     */

    /**
     * Constructs a new ProtoTableElementProperties.
     * @name ProtoTableElementProperties
     * @classdesc Represents a ProtoTableElementProperties.
     * @implements IProtoTableElementProperties
     * @constructor
     * @param {IProtoTableElementProperties=} [properties] Properties to set
     */
    function ProtoTableElementProperties(properties) {
        this.backgroundColor = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTableElementProperties widthInheritance.
     * @member {Inheritance} widthInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.widthInheritance = 0;

    /**
     * ProtoTableElementProperties width.
     * @member {IProtoMeasure|null|undefined} width
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.width = null;

    /**
     * ProtoTableElementProperties widthCode.
     * @member {string} widthCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.widthCode = "";

    /**
     * ProtoTableElementProperties alignInheritance.
     * @member {Inheritance} alignInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.alignInheritance = 0;

    /**
     * ProtoTableElementProperties align.
     * @member {ProtoHorizontalAlignment} align
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.align = 0;

    /**
     * ProtoTableElementProperties alignCode.
     * @member {string} alignCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.alignCode = "";

    /**
     * ProtoTableElementProperties valignInheritance.
     * @member {Inheritance} valignInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.valignInheritance = 0;

    /**
     * ProtoTableElementProperties valign.
     * @member {ProtoVerticalAlignment} valign
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.valign = 0;

    /**
     * ProtoTableElementProperties valignCode.
     * @member {string} valignCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.valignCode = "";

    /**
     * ProtoTableElementProperties backgroundColorInheritance.
     * @member {Inheritance} backgroundColorInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.backgroundColorInheritance = 0;

    /**
     * ProtoTableElementProperties backgroundColor.
     * @member {Array.<IProtoColor>} backgroundColor
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.backgroundColor = $util.emptyArray;

    /**
     * ProtoTableElementProperties backgroundColorCode.
     * @member {string} backgroundColorCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.backgroundColorCode = "";

    /**
     * ProtoTableElementProperties paddingTopInheritance.
     * @member {Inheritance} paddingTopInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingTopInheritance = 0;

    /**
     * ProtoTableElementProperties paddingTop.
     * @member {IProtoMeasure|null|undefined} paddingTop
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingTop = null;

    /**
     * ProtoTableElementProperties paddingTopCode.
     * @member {string} paddingTopCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingTopCode = "";

    /**
     * ProtoTableElementProperties paddingRightInheritance.
     * @member {Inheritance} paddingRightInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingRightInheritance = 0;

    /**
     * ProtoTableElementProperties paddingRight.
     * @member {IProtoMeasure|null|undefined} paddingRight
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingRight = null;

    /**
     * ProtoTableElementProperties paddingRightCode.
     * @member {string} paddingRightCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingRightCode = "";

    /**
     * ProtoTableElementProperties paddingBottomInheritance.
     * @member {Inheritance} paddingBottomInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingBottomInheritance = 0;

    /**
     * ProtoTableElementProperties paddingBottom.
     * @member {IProtoMeasure|null|undefined} paddingBottom
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingBottom = null;

    /**
     * ProtoTableElementProperties paddingBottomCode.
     * @member {string} paddingBottomCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingBottomCode = "";

    /**
     * ProtoTableElementProperties paddingLeftInheritance.
     * @member {Inheritance} paddingLeftInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingLeftInheritance = 0;

    /**
     * ProtoTableElementProperties paddingLeft.
     * @member {IProtoMeasure|null|undefined} paddingLeft
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingLeft = null;

    /**
     * ProtoTableElementProperties paddingLeftCode.
     * @member {string} paddingLeftCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.paddingLeftCode = "";

    /**
     * ProtoTableElementProperties borderTopColorInheritance.
     * @member {Inheritance} borderTopColorInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderTopColorInheritance = 0;

    /**
     * ProtoTableElementProperties borderTopColor.
     * @member {IProtoMeasure|null|undefined} borderTopColor
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderTopColor = null;

    /**
     * ProtoTableElementProperties borderTopColorCode.
     * @member {string} borderTopColorCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderTopColorCode = "";

    /**
     * ProtoTableElementProperties borderTopWeightInheritance.
     * @member {Inheritance} borderTopWeightInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderTopWeightInheritance = 0;

    /**
     * ProtoTableElementProperties borderTopWeight.
     * @member {IProtoMeasure|null|undefined} borderTopWeight
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderTopWeight = null;

    /**
     * ProtoTableElementProperties borderTopWeightCode.
     * @member {string} borderTopWeightCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderTopWeightCode = "";

    /**
     * ProtoTableElementProperties borderRightColorInheritance.
     * @member {Inheritance} borderRightColorInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderRightColorInheritance = 0;

    /**
     * ProtoTableElementProperties borderRightColor.
     * @member {IProtoMeasure|null|undefined} borderRightColor
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderRightColor = null;

    /**
     * ProtoTableElementProperties borderRightColorCode.
     * @member {string} borderRightColorCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderRightColorCode = "";

    /**
     * ProtoTableElementProperties borderRightWeightInheritance.
     * @member {Inheritance} borderRightWeightInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderRightWeightInheritance = 0;

    /**
     * ProtoTableElementProperties borderRightWeight.
     * @member {IProtoMeasure|null|undefined} borderRightWeight
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderRightWeight = null;

    /**
     * ProtoTableElementProperties borderRightWeightCode.
     * @member {string} borderRightWeightCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderRightWeightCode = "";

    /**
     * ProtoTableElementProperties borderBottomColorInheritance.
     * @member {Inheritance} borderBottomColorInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderBottomColorInheritance = 0;

    /**
     * ProtoTableElementProperties borderBottomColor.
     * @member {IProtoMeasure|null|undefined} borderBottomColor
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderBottomColor = null;

    /**
     * ProtoTableElementProperties borderBottomColorCode.
     * @member {string} borderBottomColorCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderBottomColorCode = "";

    /**
     * ProtoTableElementProperties borderBottomWeightInheritance.
     * @member {Inheritance} borderBottomWeightInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderBottomWeightInheritance = 0;

    /**
     * ProtoTableElementProperties borderBottomWeight.
     * @member {IProtoMeasure|null|undefined} borderBottomWeight
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderBottomWeight = null;

    /**
     * ProtoTableElementProperties borderBottomWeightCode.
     * @member {string} borderBottomWeightCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderBottomWeightCode = "";

    /**
     * ProtoTableElementProperties borderLeftColorInheritance.
     * @member {Inheritance} borderLeftColorInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderLeftColorInheritance = 0;

    /**
     * ProtoTableElementProperties borderLeftColor.
     * @member {IProtoMeasure|null|undefined} borderLeftColor
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderLeftColor = null;

    /**
     * ProtoTableElementProperties borderLeftColorCode.
     * @member {string} borderLeftColorCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderLeftColorCode = "";

    /**
     * ProtoTableElementProperties borderLeftWeightInheritance.
     * @member {Inheritance} borderLeftWeightInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderLeftWeightInheritance = 0;

    /**
     * ProtoTableElementProperties borderLeftWeight.
     * @member {IProtoMeasure|null|undefined} borderLeftWeight
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderLeftWeight = null;

    /**
     * ProtoTableElementProperties borderLeftWeightCode.
     * @member {string} borderLeftWeightCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.borderLeftWeightCode = "";

    /**
     * ProtoTableElementProperties marginTopInheritance.
     * @member {Inheritance} marginTopInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginTopInheritance = 0;

    /**
     * ProtoTableElementProperties marginTop.
     * @member {IProtoMeasure|null|undefined} marginTop
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginTop = null;

    /**
     * ProtoTableElementProperties marginTopCode.
     * @member {string} marginTopCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginTopCode = "";

    /**
     * ProtoTableElementProperties marginRightInheritance.
     * @member {Inheritance} marginRightInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginRightInheritance = 0;

    /**
     * ProtoTableElementProperties marginRight.
     * @member {IProtoMeasure|null|undefined} marginRight
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginRight = null;

    /**
     * ProtoTableElementProperties marginRightCode.
     * @member {string} marginRightCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginRightCode = "";

    /**
     * ProtoTableElementProperties marginBottomInheritance.
     * @member {Inheritance} marginBottomInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginBottomInheritance = 0;

    /**
     * ProtoTableElementProperties marginBottom.
     * @member {IProtoMeasure|null|undefined} marginBottom
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginBottom = null;

    /**
     * ProtoTableElementProperties marginBottomCode.
     * @member {string} marginBottomCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginBottomCode = "";

    /**
     * ProtoTableElementProperties marginLeftInheritance.
     * @member {Inheritance} marginLeftInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginLeftInheritance = 0;

    /**
     * ProtoTableElementProperties marginLeft.
     * @member {IProtoMeasure|null|undefined} marginLeft
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginLeft = null;

    /**
     * ProtoTableElementProperties marginLeftCode.
     * @member {string} marginLeftCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.marginLeftCode = "";

    /**
     * ProtoTableElementProperties rotationInheritance.
     * @member {Inheritance} rotationInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.rotationInheritance = 0;

    /**
     * ProtoTableElementProperties rotation.
     * @member {number} rotation
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.rotation = 0;

    /**
     * ProtoTableElementProperties rotationCode.
     * @member {string} rotationCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.rotationCode = "";

    /**
     * ProtoTableElementProperties defaultParagraphFormatUUIDInheritance.
     * @member {Inheritance} defaultParagraphFormatUUIDInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.defaultParagraphFormatUUIDInheritance = 0;

    /**
     * ProtoTableElementProperties defaultParagraphFormatUUID.
     * @member {string} defaultParagraphFormatUUID
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.defaultParagraphFormatUUID = "";

    /**
     * ProtoTableElementProperties defaultParagraphFormatUUIDCode.
     * @member {string} defaultParagraphFormatUUIDCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.defaultParagraphFormatUUIDCode = "";

    /**
     * ProtoTableElementProperties tableContentGroupTypeInheritance.
     * @member {Inheritance} tableContentGroupTypeInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.tableContentGroupTypeInheritance = 0;

    /**
     * ProtoTableElementProperties tableContentGroupType.
     * @member {ProtoTableContentGroupType} tableContentGroupType
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.tableContentGroupType = 0;

    /**
     * ProtoTableElementProperties tableContentGroupTypeCode.
     * @member {string} tableContentGroupTypeCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.tableContentGroupTypeCode = "";

    /**
     * ProtoTableElementProperties cellTypeInheritance.
     * @member {Inheritance} cellTypeInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.cellTypeInheritance = 0;

    /**
     * ProtoTableElementProperties cellType.
     * @member {ProtoTableCellType} cellType
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.cellType = 0;

    /**
     * ProtoTableElementProperties cellTypeCode.
     * @member {string} cellTypeCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.cellTypeCode = "";

    /**
     * ProtoTableElementProperties minRowHeightInheritance.
     * @member {Inheritance} minRowHeightInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.minRowHeightInheritance = 0;

    /**
     * ProtoTableElementProperties minRowHeight.
     * @member {IProtoMeasure|null|undefined} minRowHeight
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.minRowHeight = null;

    /**
     * ProtoTableElementProperties minRowHeightCode.
     * @member {string} minRowHeightCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.minRowHeightCode = "";

    /**
     * ProtoTableElementProperties wsInheritance.
     * @member {Inheritance} wsInheritance
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.wsInheritance = 0;

    /**
     * ProtoTableElementProperties ws.
     * @member {IProtoTableWS|null|undefined} ws
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.ws = null;

    /**
     * ProtoTableElementProperties wsCode.
     * @member {string} wsCode
     * @memberof ProtoTableElementProperties
     * @instance
     */
    ProtoTableElementProperties.prototype.wsCode = "";

    /**
     * Creates a new ProtoTableElementProperties instance using the specified properties.
     * @function create
     * @memberof ProtoTableElementProperties
     * @static
     * @param {IProtoTableElementProperties=} [properties] Properties to set
     * @returns {ProtoTableElementProperties} ProtoTableElementProperties instance
     */
    ProtoTableElementProperties.create = function create(properties) {
        return new ProtoTableElementProperties(properties);
    };

    /**
     * Encodes the specified ProtoTableElementProperties message. Does not implicitly {@link ProtoTableElementProperties.verify|verify} messages.
     * @function encode
     * @memberof ProtoTableElementProperties
     * @static
     * @param {IProtoTableElementProperties} message ProtoTableElementProperties message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableElementProperties.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.widthInheritance != null && Object.hasOwnProperty.call(message, "widthInheritance"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.widthInheritance);
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoMeasure.encode(message.width, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.widthCode != null && Object.hasOwnProperty.call(message, "widthCode"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.widthCode);
        if (message.alignInheritance != null && Object.hasOwnProperty.call(message, "alignInheritance"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.alignInheritance);
        if (message.align != null && Object.hasOwnProperty.call(message, "align"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.align);
        if (message.alignCode != null && Object.hasOwnProperty.call(message, "alignCode"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.alignCode);
        if (message.valignInheritance != null && Object.hasOwnProperty.call(message, "valignInheritance"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.valignInheritance);
        if (message.valign != null && Object.hasOwnProperty.call(message, "valign"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.valign);
        if (message.valignCode != null && Object.hasOwnProperty.call(message, "valignCode"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.valignCode);
        if (message.backgroundColorInheritance != null && Object.hasOwnProperty.call(message, "backgroundColorInheritance"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.backgroundColorInheritance);
        if (message.backgroundColor != null && message.backgroundColor.length)
            for (var i = 0; i < message.backgroundColor.length; ++i)
                $root.ProtoColor.encode(message.backgroundColor[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.backgroundColorCode != null && Object.hasOwnProperty.call(message, "backgroundColorCode"))
            writer.uint32(/* id 12, wireType 2 =*/98).string(message.backgroundColorCode);
        if (message.paddingTopInheritance != null && Object.hasOwnProperty.call(message, "paddingTopInheritance"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.paddingTopInheritance);
        if (message.paddingTop != null && Object.hasOwnProperty.call(message, "paddingTop"))
            $root.ProtoMeasure.encode(message.paddingTop, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.paddingTopCode != null && Object.hasOwnProperty.call(message, "paddingTopCode"))
            writer.uint32(/* id 15, wireType 2 =*/122).string(message.paddingTopCode);
        if (message.paddingRightInheritance != null && Object.hasOwnProperty.call(message, "paddingRightInheritance"))
            writer.uint32(/* id 16, wireType 0 =*/128).int32(message.paddingRightInheritance);
        if (message.paddingRight != null && Object.hasOwnProperty.call(message, "paddingRight"))
            $root.ProtoMeasure.encode(message.paddingRight, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.paddingRightCode != null && Object.hasOwnProperty.call(message, "paddingRightCode"))
            writer.uint32(/* id 18, wireType 2 =*/146).string(message.paddingRightCode);
        if (message.paddingBottomInheritance != null && Object.hasOwnProperty.call(message, "paddingBottomInheritance"))
            writer.uint32(/* id 19, wireType 0 =*/152).int32(message.paddingBottomInheritance);
        if (message.paddingBottom != null && Object.hasOwnProperty.call(message, "paddingBottom"))
            $root.ProtoMeasure.encode(message.paddingBottom, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.paddingBottomCode != null && Object.hasOwnProperty.call(message, "paddingBottomCode"))
            writer.uint32(/* id 21, wireType 2 =*/170).string(message.paddingBottomCode);
        if (message.paddingLeftInheritance != null && Object.hasOwnProperty.call(message, "paddingLeftInheritance"))
            writer.uint32(/* id 22, wireType 0 =*/176).int32(message.paddingLeftInheritance);
        if (message.paddingLeft != null && Object.hasOwnProperty.call(message, "paddingLeft"))
            $root.ProtoMeasure.encode(message.paddingLeft, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
        if (message.paddingLeftCode != null && Object.hasOwnProperty.call(message, "paddingLeftCode"))
            writer.uint32(/* id 24, wireType 2 =*/194).string(message.paddingLeftCode);
        if (message.borderTopColorInheritance != null && Object.hasOwnProperty.call(message, "borderTopColorInheritance"))
            writer.uint32(/* id 25, wireType 0 =*/200).int32(message.borderTopColorInheritance);
        if (message.borderTopColor != null && Object.hasOwnProperty.call(message, "borderTopColor"))
            $root.ProtoMeasure.encode(message.borderTopColor, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        if (message.borderTopColorCode != null && Object.hasOwnProperty.call(message, "borderTopColorCode"))
            writer.uint32(/* id 27, wireType 2 =*/218).string(message.borderTopColorCode);
        if (message.borderTopWeightInheritance != null && Object.hasOwnProperty.call(message, "borderTopWeightInheritance"))
            writer.uint32(/* id 28, wireType 0 =*/224).int32(message.borderTopWeightInheritance);
        if (message.borderTopWeight != null && Object.hasOwnProperty.call(message, "borderTopWeight"))
            $root.ProtoMeasure.encode(message.borderTopWeight, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
        if (message.borderTopWeightCode != null && Object.hasOwnProperty.call(message, "borderTopWeightCode"))
            writer.uint32(/* id 30, wireType 2 =*/242).string(message.borderTopWeightCode);
        if (message.borderRightColorInheritance != null && Object.hasOwnProperty.call(message, "borderRightColorInheritance"))
            writer.uint32(/* id 31, wireType 0 =*/248).int32(message.borderRightColorInheritance);
        if (message.borderRightColor != null && Object.hasOwnProperty.call(message, "borderRightColor"))
            $root.ProtoMeasure.encode(message.borderRightColor, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        if (message.borderRightColorCode != null && Object.hasOwnProperty.call(message, "borderRightColorCode"))
            writer.uint32(/* id 33, wireType 2 =*/266).string(message.borderRightColorCode);
        if (message.borderRightWeightInheritance != null && Object.hasOwnProperty.call(message, "borderRightWeightInheritance"))
            writer.uint32(/* id 34, wireType 0 =*/272).int32(message.borderRightWeightInheritance);
        if (message.borderRightWeight != null && Object.hasOwnProperty.call(message, "borderRightWeight"))
            $root.ProtoMeasure.encode(message.borderRightWeight, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
        if (message.borderRightWeightCode != null && Object.hasOwnProperty.call(message, "borderRightWeightCode"))
            writer.uint32(/* id 36, wireType 2 =*/290).string(message.borderRightWeightCode);
        if (message.borderBottomColorInheritance != null && Object.hasOwnProperty.call(message, "borderBottomColorInheritance"))
            writer.uint32(/* id 37, wireType 0 =*/296).int32(message.borderBottomColorInheritance);
        if (message.borderBottomColor != null && Object.hasOwnProperty.call(message, "borderBottomColor"))
            $root.ProtoMeasure.encode(message.borderBottomColor, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
        if (message.borderBottomColorCode != null && Object.hasOwnProperty.call(message, "borderBottomColorCode"))
            writer.uint32(/* id 39, wireType 2 =*/314).string(message.borderBottomColorCode);
        if (message.borderBottomWeightInheritance != null && Object.hasOwnProperty.call(message, "borderBottomWeightInheritance"))
            writer.uint32(/* id 40, wireType 0 =*/320).int32(message.borderBottomWeightInheritance);
        if (message.borderBottomWeight != null && Object.hasOwnProperty.call(message, "borderBottomWeight"))
            $root.ProtoMeasure.encode(message.borderBottomWeight, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
        if (message.borderBottomWeightCode != null && Object.hasOwnProperty.call(message, "borderBottomWeightCode"))
            writer.uint32(/* id 42, wireType 2 =*/338).string(message.borderBottomWeightCode);
        if (message.borderLeftColorInheritance != null && Object.hasOwnProperty.call(message, "borderLeftColorInheritance"))
            writer.uint32(/* id 43, wireType 0 =*/344).int32(message.borderLeftColorInheritance);
        if (message.borderLeftColor != null && Object.hasOwnProperty.call(message, "borderLeftColor"))
            $root.ProtoMeasure.encode(message.borderLeftColor, writer.uint32(/* id 44, wireType 2 =*/354).fork()).ldelim();
        if (message.borderLeftColorCode != null && Object.hasOwnProperty.call(message, "borderLeftColorCode"))
            writer.uint32(/* id 45, wireType 2 =*/362).string(message.borderLeftColorCode);
        if (message.borderLeftWeightInheritance != null && Object.hasOwnProperty.call(message, "borderLeftWeightInheritance"))
            writer.uint32(/* id 46, wireType 0 =*/368).int32(message.borderLeftWeightInheritance);
        if (message.borderLeftWeight != null && Object.hasOwnProperty.call(message, "borderLeftWeight"))
            $root.ProtoMeasure.encode(message.borderLeftWeight, writer.uint32(/* id 47, wireType 2 =*/378).fork()).ldelim();
        if (message.borderLeftWeightCode != null && Object.hasOwnProperty.call(message, "borderLeftWeightCode"))
            writer.uint32(/* id 48, wireType 2 =*/386).string(message.borderLeftWeightCode);
        if (message.marginTopInheritance != null && Object.hasOwnProperty.call(message, "marginTopInheritance"))
            writer.uint32(/* id 49, wireType 0 =*/392).int32(message.marginTopInheritance);
        if (message.marginTop != null && Object.hasOwnProperty.call(message, "marginTop"))
            $root.ProtoMeasure.encode(message.marginTop, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
        if (message.marginTopCode != null && Object.hasOwnProperty.call(message, "marginTopCode"))
            writer.uint32(/* id 51, wireType 2 =*/410).string(message.marginTopCode);
        if (message.marginRightInheritance != null && Object.hasOwnProperty.call(message, "marginRightInheritance"))
            writer.uint32(/* id 52, wireType 0 =*/416).int32(message.marginRightInheritance);
        if (message.marginRight != null && Object.hasOwnProperty.call(message, "marginRight"))
            $root.ProtoMeasure.encode(message.marginRight, writer.uint32(/* id 53, wireType 2 =*/426).fork()).ldelim();
        if (message.marginRightCode != null && Object.hasOwnProperty.call(message, "marginRightCode"))
            writer.uint32(/* id 54, wireType 2 =*/434).string(message.marginRightCode);
        if (message.marginBottomInheritance != null && Object.hasOwnProperty.call(message, "marginBottomInheritance"))
            writer.uint32(/* id 55, wireType 0 =*/440).int32(message.marginBottomInheritance);
        if (message.marginBottom != null && Object.hasOwnProperty.call(message, "marginBottom"))
            $root.ProtoMeasure.encode(message.marginBottom, writer.uint32(/* id 56, wireType 2 =*/450).fork()).ldelim();
        if (message.marginBottomCode != null && Object.hasOwnProperty.call(message, "marginBottomCode"))
            writer.uint32(/* id 57, wireType 2 =*/458).string(message.marginBottomCode);
        if (message.marginLeftInheritance != null && Object.hasOwnProperty.call(message, "marginLeftInheritance"))
            writer.uint32(/* id 58, wireType 0 =*/464).int32(message.marginLeftInheritance);
        if (message.marginLeft != null && Object.hasOwnProperty.call(message, "marginLeft"))
            $root.ProtoMeasure.encode(message.marginLeft, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
        if (message.marginLeftCode != null && Object.hasOwnProperty.call(message, "marginLeftCode"))
            writer.uint32(/* id 60, wireType 2 =*/482).string(message.marginLeftCode);
        if (message.rotationInheritance != null && Object.hasOwnProperty.call(message, "rotationInheritance"))
            writer.uint32(/* id 61, wireType 0 =*/488).int32(message.rotationInheritance);
        if (message.rotation != null && Object.hasOwnProperty.call(message, "rotation"))
            writer.uint32(/* id 62, wireType 1 =*/497).double(message.rotation);
        if (message.rotationCode != null && Object.hasOwnProperty.call(message, "rotationCode"))
            writer.uint32(/* id 63, wireType 2 =*/506).string(message.rotationCode);
        if (message.defaultParagraphFormatUUIDInheritance != null && Object.hasOwnProperty.call(message, "defaultParagraphFormatUUIDInheritance"))
            writer.uint32(/* id 64, wireType 0 =*/512).int32(message.defaultParagraphFormatUUIDInheritance);
        if (message.defaultParagraphFormatUUID != null && Object.hasOwnProperty.call(message, "defaultParagraphFormatUUID"))
            writer.uint32(/* id 65, wireType 2 =*/522).string(message.defaultParagraphFormatUUID);
        if (message.defaultParagraphFormatUUIDCode != null && Object.hasOwnProperty.call(message, "defaultParagraphFormatUUIDCode"))
            writer.uint32(/* id 66, wireType 2 =*/530).string(message.defaultParagraphFormatUUIDCode);
        if (message.tableContentGroupTypeInheritance != null && Object.hasOwnProperty.call(message, "tableContentGroupTypeInheritance"))
            writer.uint32(/* id 67, wireType 0 =*/536).int32(message.tableContentGroupTypeInheritance);
        if (message.tableContentGroupType != null && Object.hasOwnProperty.call(message, "tableContentGroupType"))
            writer.uint32(/* id 68, wireType 0 =*/544).int32(message.tableContentGroupType);
        if (message.tableContentGroupTypeCode != null && Object.hasOwnProperty.call(message, "tableContentGroupTypeCode"))
            writer.uint32(/* id 69, wireType 2 =*/554).string(message.tableContentGroupTypeCode);
        if (message.cellTypeInheritance != null && Object.hasOwnProperty.call(message, "cellTypeInheritance"))
            writer.uint32(/* id 70, wireType 0 =*/560).int32(message.cellTypeInheritance);
        if (message.cellType != null && Object.hasOwnProperty.call(message, "cellType"))
            writer.uint32(/* id 71, wireType 0 =*/568).int32(message.cellType);
        if (message.cellTypeCode != null && Object.hasOwnProperty.call(message, "cellTypeCode"))
            writer.uint32(/* id 72, wireType 2 =*/578).string(message.cellTypeCode);
        if (message.minRowHeightInheritance != null && Object.hasOwnProperty.call(message, "minRowHeightInheritance"))
            writer.uint32(/* id 73, wireType 0 =*/584).int32(message.minRowHeightInheritance);
        if (message.minRowHeight != null && Object.hasOwnProperty.call(message, "minRowHeight"))
            $root.ProtoMeasure.encode(message.minRowHeight, writer.uint32(/* id 74, wireType 2 =*/594).fork()).ldelim();
        if (message.minRowHeightCode != null && Object.hasOwnProperty.call(message, "minRowHeightCode"))
            writer.uint32(/* id 75, wireType 2 =*/602).string(message.minRowHeightCode);
        if (message.wsInheritance != null && Object.hasOwnProperty.call(message, "wsInheritance"))
            writer.uint32(/* id 76, wireType 0 =*/608).int32(message.wsInheritance);
        if (message.ws != null && Object.hasOwnProperty.call(message, "ws"))
            $root.ProtoTableWS.encode(message.ws, writer.uint32(/* id 77, wireType 2 =*/618).fork()).ldelim();
        if (message.wsCode != null && Object.hasOwnProperty.call(message, "wsCode"))
            writer.uint32(/* id 78, wireType 2 =*/626).string(message.wsCode);
        return writer;
    };

    /**
     * Encodes the specified ProtoTableElementProperties message, length delimited. Does not implicitly {@link ProtoTableElementProperties.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTableElementProperties
     * @static
     * @param {IProtoTableElementProperties} message ProtoTableElementProperties message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTableElementProperties.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTableElementProperties message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTableElementProperties
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTableElementProperties} ProtoTableElementProperties
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableElementProperties.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTableElementProperties();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.widthInheritance = reader.int32();
                    break;
                }
            case 2: {
                    message.width = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.widthCode = reader.string();
                    break;
                }
            case 4: {
                    message.alignInheritance = reader.int32();
                    break;
                }
            case 5: {
                    message.align = reader.int32();
                    break;
                }
            case 6: {
                    message.alignCode = reader.string();
                    break;
                }
            case 7: {
                    message.valignInheritance = reader.int32();
                    break;
                }
            case 8: {
                    message.valign = reader.int32();
                    break;
                }
            case 9: {
                    message.valignCode = reader.string();
                    break;
                }
            case 10: {
                    message.backgroundColorInheritance = reader.int32();
                    break;
                }
            case 11: {
                    if (!(message.backgroundColor && message.backgroundColor.length))
                        message.backgroundColor = [];
                    message.backgroundColor.push($root.ProtoColor.decode(reader, reader.uint32()));
                    break;
                }
            case 12: {
                    message.backgroundColorCode = reader.string();
                    break;
                }
            case 13: {
                    message.paddingTopInheritance = reader.int32();
                    break;
                }
            case 14: {
                    message.paddingTop = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 15: {
                    message.paddingTopCode = reader.string();
                    break;
                }
            case 16: {
                    message.paddingRightInheritance = reader.int32();
                    break;
                }
            case 17: {
                    message.paddingRight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 18: {
                    message.paddingRightCode = reader.string();
                    break;
                }
            case 19: {
                    message.paddingBottomInheritance = reader.int32();
                    break;
                }
            case 20: {
                    message.paddingBottom = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 21: {
                    message.paddingBottomCode = reader.string();
                    break;
                }
            case 22: {
                    message.paddingLeftInheritance = reader.int32();
                    break;
                }
            case 23: {
                    message.paddingLeft = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 24: {
                    message.paddingLeftCode = reader.string();
                    break;
                }
            case 25: {
                    message.borderTopColorInheritance = reader.int32();
                    break;
                }
            case 26: {
                    message.borderTopColor = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 27: {
                    message.borderTopColorCode = reader.string();
                    break;
                }
            case 28: {
                    message.borderTopWeightInheritance = reader.int32();
                    break;
                }
            case 29: {
                    message.borderTopWeight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 30: {
                    message.borderTopWeightCode = reader.string();
                    break;
                }
            case 31: {
                    message.borderRightColorInheritance = reader.int32();
                    break;
                }
            case 32: {
                    message.borderRightColor = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 33: {
                    message.borderRightColorCode = reader.string();
                    break;
                }
            case 34: {
                    message.borderRightWeightInheritance = reader.int32();
                    break;
                }
            case 35: {
                    message.borderRightWeight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 36: {
                    message.borderRightWeightCode = reader.string();
                    break;
                }
            case 37: {
                    message.borderBottomColorInheritance = reader.int32();
                    break;
                }
            case 38: {
                    message.borderBottomColor = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 39: {
                    message.borderBottomColorCode = reader.string();
                    break;
                }
            case 40: {
                    message.borderBottomWeightInheritance = reader.int32();
                    break;
                }
            case 41: {
                    message.borderBottomWeight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 42: {
                    message.borderBottomWeightCode = reader.string();
                    break;
                }
            case 43: {
                    message.borderLeftColorInheritance = reader.int32();
                    break;
                }
            case 44: {
                    message.borderLeftColor = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 45: {
                    message.borderLeftColorCode = reader.string();
                    break;
                }
            case 46: {
                    message.borderLeftWeightInheritance = reader.int32();
                    break;
                }
            case 47: {
                    message.borderLeftWeight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 48: {
                    message.borderLeftWeightCode = reader.string();
                    break;
                }
            case 49: {
                    message.marginTopInheritance = reader.int32();
                    break;
                }
            case 50: {
                    message.marginTop = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 51: {
                    message.marginTopCode = reader.string();
                    break;
                }
            case 52: {
                    message.marginRightInheritance = reader.int32();
                    break;
                }
            case 53: {
                    message.marginRight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 54: {
                    message.marginRightCode = reader.string();
                    break;
                }
            case 55: {
                    message.marginBottomInheritance = reader.int32();
                    break;
                }
            case 56: {
                    message.marginBottom = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 57: {
                    message.marginBottomCode = reader.string();
                    break;
                }
            case 58: {
                    message.marginLeftInheritance = reader.int32();
                    break;
                }
            case 59: {
                    message.marginLeft = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 60: {
                    message.marginLeftCode = reader.string();
                    break;
                }
            case 61: {
                    message.rotationInheritance = reader.int32();
                    break;
                }
            case 62: {
                    message.rotation = reader.double();
                    break;
                }
            case 63: {
                    message.rotationCode = reader.string();
                    break;
                }
            case 64: {
                    message.defaultParagraphFormatUUIDInheritance = reader.int32();
                    break;
                }
            case 65: {
                    message.defaultParagraphFormatUUID = reader.string();
                    break;
                }
            case 66: {
                    message.defaultParagraphFormatUUIDCode = reader.string();
                    break;
                }
            case 67: {
                    message.tableContentGroupTypeInheritance = reader.int32();
                    break;
                }
            case 68: {
                    message.tableContentGroupType = reader.int32();
                    break;
                }
            case 69: {
                    message.tableContentGroupTypeCode = reader.string();
                    break;
                }
            case 70: {
                    message.cellTypeInheritance = reader.int32();
                    break;
                }
            case 71: {
                    message.cellType = reader.int32();
                    break;
                }
            case 72: {
                    message.cellTypeCode = reader.string();
                    break;
                }
            case 73: {
                    message.minRowHeightInheritance = reader.int32();
                    break;
                }
            case 74: {
                    message.minRowHeight = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 75: {
                    message.minRowHeightCode = reader.string();
                    break;
                }
            case 76: {
                    message.wsInheritance = reader.int32();
                    break;
                }
            case 77: {
                    message.ws = $root.ProtoTableWS.decode(reader, reader.uint32());
                    break;
                }
            case 78: {
                    message.wsCode = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTableElementProperties message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTableElementProperties
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTableElementProperties} ProtoTableElementProperties
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTableElementProperties.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTableElementProperties message.
     * @function verify
     * @memberof ProtoTableElementProperties
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTableElementProperties.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.widthInheritance != null && message.hasOwnProperty("widthInheritance"))
            switch (message.widthInheritance) {
            default:
                return "widthInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.widthCode != null && message.hasOwnProperty("widthCode"))
            if (!$util.isString(message.widthCode))
                return "widthCode: string expected";
        if (message.alignInheritance != null && message.hasOwnProperty("alignInheritance"))
            switch (message.alignInheritance) {
            default:
                return "alignInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.align != null && message.hasOwnProperty("align"))
            switch (message.align) {
            default:
                return "align: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.alignCode != null && message.hasOwnProperty("alignCode"))
            if (!$util.isString(message.alignCode))
                return "alignCode: string expected";
        if (message.valignInheritance != null && message.hasOwnProperty("valignInheritance"))
            switch (message.valignInheritance) {
            default:
                return "valignInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.valign != null && message.hasOwnProperty("valign"))
            switch (message.valign) {
            default:
                return "valign: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.valignCode != null && message.hasOwnProperty("valignCode"))
            if (!$util.isString(message.valignCode))
                return "valignCode: string expected";
        if (message.backgroundColorInheritance != null && message.hasOwnProperty("backgroundColorInheritance"))
            switch (message.backgroundColorInheritance) {
            default:
                return "backgroundColorInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.backgroundColor != null && message.hasOwnProperty("backgroundColor")) {
            if (!Array.isArray(message.backgroundColor))
                return "backgroundColor: array expected";
            for (var i = 0; i < message.backgroundColor.length; ++i) {
                var error = $root.ProtoColor.verify(message.backgroundColor[i]);
                if (error)
                    return "backgroundColor." + error;
            }
        }
        if (message.backgroundColorCode != null && message.hasOwnProperty("backgroundColorCode"))
            if (!$util.isString(message.backgroundColorCode))
                return "backgroundColorCode: string expected";
        if (message.paddingTopInheritance != null && message.hasOwnProperty("paddingTopInheritance"))
            switch (message.paddingTopInheritance) {
            default:
                return "paddingTopInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.paddingTop != null && message.hasOwnProperty("paddingTop")) {
            var error = $root.ProtoMeasure.verify(message.paddingTop);
            if (error)
                return "paddingTop." + error;
        }
        if (message.paddingTopCode != null && message.hasOwnProperty("paddingTopCode"))
            if (!$util.isString(message.paddingTopCode))
                return "paddingTopCode: string expected";
        if (message.paddingRightInheritance != null && message.hasOwnProperty("paddingRightInheritance"))
            switch (message.paddingRightInheritance) {
            default:
                return "paddingRightInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.paddingRight != null && message.hasOwnProperty("paddingRight")) {
            var error = $root.ProtoMeasure.verify(message.paddingRight);
            if (error)
                return "paddingRight." + error;
        }
        if (message.paddingRightCode != null && message.hasOwnProperty("paddingRightCode"))
            if (!$util.isString(message.paddingRightCode))
                return "paddingRightCode: string expected";
        if (message.paddingBottomInheritance != null && message.hasOwnProperty("paddingBottomInheritance"))
            switch (message.paddingBottomInheritance) {
            default:
                return "paddingBottomInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.paddingBottom != null && message.hasOwnProperty("paddingBottom")) {
            var error = $root.ProtoMeasure.verify(message.paddingBottom);
            if (error)
                return "paddingBottom." + error;
        }
        if (message.paddingBottomCode != null && message.hasOwnProperty("paddingBottomCode"))
            if (!$util.isString(message.paddingBottomCode))
                return "paddingBottomCode: string expected";
        if (message.paddingLeftInheritance != null && message.hasOwnProperty("paddingLeftInheritance"))
            switch (message.paddingLeftInheritance) {
            default:
                return "paddingLeftInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.paddingLeft != null && message.hasOwnProperty("paddingLeft")) {
            var error = $root.ProtoMeasure.verify(message.paddingLeft);
            if (error)
                return "paddingLeft." + error;
        }
        if (message.paddingLeftCode != null && message.hasOwnProperty("paddingLeftCode"))
            if (!$util.isString(message.paddingLeftCode))
                return "paddingLeftCode: string expected";
        if (message.borderTopColorInheritance != null && message.hasOwnProperty("borderTopColorInheritance"))
            switch (message.borderTopColorInheritance) {
            default:
                return "borderTopColorInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.borderTopColor != null && message.hasOwnProperty("borderTopColor")) {
            var error = $root.ProtoMeasure.verify(message.borderTopColor);
            if (error)
                return "borderTopColor." + error;
        }
        if (message.borderTopColorCode != null && message.hasOwnProperty("borderTopColorCode"))
            if (!$util.isString(message.borderTopColorCode))
                return "borderTopColorCode: string expected";
        if (message.borderTopWeightInheritance != null && message.hasOwnProperty("borderTopWeightInheritance"))
            switch (message.borderTopWeightInheritance) {
            default:
                return "borderTopWeightInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.borderTopWeight != null && message.hasOwnProperty("borderTopWeight")) {
            var error = $root.ProtoMeasure.verify(message.borderTopWeight);
            if (error)
                return "borderTopWeight." + error;
        }
        if (message.borderTopWeightCode != null && message.hasOwnProperty("borderTopWeightCode"))
            if (!$util.isString(message.borderTopWeightCode))
                return "borderTopWeightCode: string expected";
        if (message.borderRightColorInheritance != null && message.hasOwnProperty("borderRightColorInheritance"))
            switch (message.borderRightColorInheritance) {
            default:
                return "borderRightColorInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.borderRightColor != null && message.hasOwnProperty("borderRightColor")) {
            var error = $root.ProtoMeasure.verify(message.borderRightColor);
            if (error)
                return "borderRightColor." + error;
        }
        if (message.borderRightColorCode != null && message.hasOwnProperty("borderRightColorCode"))
            if (!$util.isString(message.borderRightColorCode))
                return "borderRightColorCode: string expected";
        if (message.borderRightWeightInheritance != null && message.hasOwnProperty("borderRightWeightInheritance"))
            switch (message.borderRightWeightInheritance) {
            default:
                return "borderRightWeightInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.borderRightWeight != null && message.hasOwnProperty("borderRightWeight")) {
            var error = $root.ProtoMeasure.verify(message.borderRightWeight);
            if (error)
                return "borderRightWeight." + error;
        }
        if (message.borderRightWeightCode != null && message.hasOwnProperty("borderRightWeightCode"))
            if (!$util.isString(message.borderRightWeightCode))
                return "borderRightWeightCode: string expected";
        if (message.borderBottomColorInheritance != null && message.hasOwnProperty("borderBottomColorInheritance"))
            switch (message.borderBottomColorInheritance) {
            default:
                return "borderBottomColorInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.borderBottomColor != null && message.hasOwnProperty("borderBottomColor")) {
            var error = $root.ProtoMeasure.verify(message.borderBottomColor);
            if (error)
                return "borderBottomColor." + error;
        }
        if (message.borderBottomColorCode != null && message.hasOwnProperty("borderBottomColorCode"))
            if (!$util.isString(message.borderBottomColorCode))
                return "borderBottomColorCode: string expected";
        if (message.borderBottomWeightInheritance != null && message.hasOwnProperty("borderBottomWeightInheritance"))
            switch (message.borderBottomWeightInheritance) {
            default:
                return "borderBottomWeightInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.borderBottomWeight != null && message.hasOwnProperty("borderBottomWeight")) {
            var error = $root.ProtoMeasure.verify(message.borderBottomWeight);
            if (error)
                return "borderBottomWeight." + error;
        }
        if (message.borderBottomWeightCode != null && message.hasOwnProperty("borderBottomWeightCode"))
            if (!$util.isString(message.borderBottomWeightCode))
                return "borderBottomWeightCode: string expected";
        if (message.borderLeftColorInheritance != null && message.hasOwnProperty("borderLeftColorInheritance"))
            switch (message.borderLeftColorInheritance) {
            default:
                return "borderLeftColorInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.borderLeftColor != null && message.hasOwnProperty("borderLeftColor")) {
            var error = $root.ProtoMeasure.verify(message.borderLeftColor);
            if (error)
                return "borderLeftColor." + error;
        }
        if (message.borderLeftColorCode != null && message.hasOwnProperty("borderLeftColorCode"))
            if (!$util.isString(message.borderLeftColorCode))
                return "borderLeftColorCode: string expected";
        if (message.borderLeftWeightInheritance != null && message.hasOwnProperty("borderLeftWeightInheritance"))
            switch (message.borderLeftWeightInheritance) {
            default:
                return "borderLeftWeightInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.borderLeftWeight != null && message.hasOwnProperty("borderLeftWeight")) {
            var error = $root.ProtoMeasure.verify(message.borderLeftWeight);
            if (error)
                return "borderLeftWeight." + error;
        }
        if (message.borderLeftWeightCode != null && message.hasOwnProperty("borderLeftWeightCode"))
            if (!$util.isString(message.borderLeftWeightCode))
                return "borderLeftWeightCode: string expected";
        if (message.marginTopInheritance != null && message.hasOwnProperty("marginTopInheritance"))
            switch (message.marginTopInheritance) {
            default:
                return "marginTopInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.marginTop != null && message.hasOwnProperty("marginTop")) {
            var error = $root.ProtoMeasure.verify(message.marginTop);
            if (error)
                return "marginTop." + error;
        }
        if (message.marginTopCode != null && message.hasOwnProperty("marginTopCode"))
            if (!$util.isString(message.marginTopCode))
                return "marginTopCode: string expected";
        if (message.marginRightInheritance != null && message.hasOwnProperty("marginRightInheritance"))
            switch (message.marginRightInheritance) {
            default:
                return "marginRightInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.marginRight != null && message.hasOwnProperty("marginRight")) {
            var error = $root.ProtoMeasure.verify(message.marginRight);
            if (error)
                return "marginRight." + error;
        }
        if (message.marginRightCode != null && message.hasOwnProperty("marginRightCode"))
            if (!$util.isString(message.marginRightCode))
                return "marginRightCode: string expected";
        if (message.marginBottomInheritance != null && message.hasOwnProperty("marginBottomInheritance"))
            switch (message.marginBottomInheritance) {
            default:
                return "marginBottomInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.marginBottom != null && message.hasOwnProperty("marginBottom")) {
            var error = $root.ProtoMeasure.verify(message.marginBottom);
            if (error)
                return "marginBottom." + error;
        }
        if (message.marginBottomCode != null && message.hasOwnProperty("marginBottomCode"))
            if (!$util.isString(message.marginBottomCode))
                return "marginBottomCode: string expected";
        if (message.marginLeftInheritance != null && message.hasOwnProperty("marginLeftInheritance"))
            switch (message.marginLeftInheritance) {
            default:
                return "marginLeftInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.marginLeft != null && message.hasOwnProperty("marginLeft")) {
            var error = $root.ProtoMeasure.verify(message.marginLeft);
            if (error)
                return "marginLeft." + error;
        }
        if (message.marginLeftCode != null && message.hasOwnProperty("marginLeftCode"))
            if (!$util.isString(message.marginLeftCode))
                return "marginLeftCode: string expected";
        if (message.rotationInheritance != null && message.hasOwnProperty("rotationInheritance"))
            switch (message.rotationInheritance) {
            default:
                return "rotationInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            if (typeof message.rotation !== "number")
                return "rotation: number expected";
        if (message.rotationCode != null && message.hasOwnProperty("rotationCode"))
            if (!$util.isString(message.rotationCode))
                return "rotationCode: string expected";
        if (message.defaultParagraphFormatUUIDInheritance != null && message.hasOwnProperty("defaultParagraphFormatUUIDInheritance"))
            switch (message.defaultParagraphFormatUUIDInheritance) {
            default:
                return "defaultParagraphFormatUUIDInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.defaultParagraphFormatUUID != null && message.hasOwnProperty("defaultParagraphFormatUUID"))
            if (!$util.isString(message.defaultParagraphFormatUUID))
                return "defaultParagraphFormatUUID: string expected";
        if (message.defaultParagraphFormatUUIDCode != null && message.hasOwnProperty("defaultParagraphFormatUUIDCode"))
            if (!$util.isString(message.defaultParagraphFormatUUIDCode))
                return "defaultParagraphFormatUUIDCode: string expected";
        if (message.tableContentGroupTypeInheritance != null && message.hasOwnProperty("tableContentGroupTypeInheritance"))
            switch (message.tableContentGroupTypeInheritance) {
            default:
                return "tableContentGroupTypeInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.tableContentGroupType != null && message.hasOwnProperty("tableContentGroupType"))
            switch (message.tableContentGroupType) {
            default:
                return "tableContentGroupType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.tableContentGroupTypeCode != null && message.hasOwnProperty("tableContentGroupTypeCode"))
            if (!$util.isString(message.tableContentGroupTypeCode))
                return "tableContentGroupTypeCode: string expected";
        if (message.cellTypeInheritance != null && message.hasOwnProperty("cellTypeInheritance"))
            switch (message.cellTypeInheritance) {
            default:
                return "cellTypeInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.cellType != null && message.hasOwnProperty("cellType"))
            switch (message.cellType) {
            default:
                return "cellType: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.cellTypeCode != null && message.hasOwnProperty("cellTypeCode"))
            if (!$util.isString(message.cellTypeCode))
                return "cellTypeCode: string expected";
        if (message.minRowHeightInheritance != null && message.hasOwnProperty("minRowHeightInheritance"))
            switch (message.minRowHeightInheritance) {
            default:
                return "minRowHeightInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.minRowHeight != null && message.hasOwnProperty("minRowHeight")) {
            var error = $root.ProtoMeasure.verify(message.minRowHeight);
            if (error)
                return "minRowHeight." + error;
        }
        if (message.minRowHeightCode != null && message.hasOwnProperty("minRowHeightCode"))
            if (!$util.isString(message.minRowHeightCode))
                return "minRowHeightCode: string expected";
        if (message.wsInheritance != null && message.hasOwnProperty("wsInheritance"))
            switch (message.wsInheritance) {
            default:
                return "wsInheritance: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.ws != null && message.hasOwnProperty("ws")) {
            var error = $root.ProtoTableWS.verify(message.ws);
            if (error)
                return "ws." + error;
        }
        if (message.wsCode != null && message.hasOwnProperty("wsCode"))
            if (!$util.isString(message.wsCode))
                return "wsCode: string expected";
        return null;
    };

    /**
     * Creates a ProtoTableElementProperties message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTableElementProperties
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTableElementProperties} ProtoTableElementProperties
     */
    ProtoTableElementProperties.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTableElementProperties)
            return object;
        var message = new $root.ProtoTableElementProperties();
        switch (object.widthInheritance) {
        default:
            if (typeof object.widthInheritance === "number") {
                message.widthInheritance = object.widthInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.widthInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.widthInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.widthInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.widthInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.widthInheritance = 4;
            break;
        }
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoTableElementProperties.width: object expected");
            message.width = $root.ProtoMeasure.fromObject(object.width);
        }
        if (object.widthCode != null)
            message.widthCode = String(object.widthCode);
        switch (object.alignInheritance) {
        default:
            if (typeof object.alignInheritance === "number") {
                message.alignInheritance = object.alignInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.alignInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.alignInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.alignInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.alignInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.alignInheritance = 4;
            break;
        }
        switch (object.align) {
        default:
            if (typeof object.align === "number") {
                message.align = object.align;
                break;
            }
            break;
        case "ALIGN_LEFT":
        case 0:
            message.align = 0;
            break;
        case "ALIGN_CENTER":
        case 1:
            message.align = 1;
            break;
        case "ALIGN_RIGHT":
        case 2:
            message.align = 2;
            break;
        case "ALIGN_JUSTIFY":
        case 3:
            message.align = 3;
            break;
        case "ALIGN_FULL_JUSTIFY":
        case 4:
            message.align = 4;
            break;
        case "ALIGN_CENTER_ON_PAGE":
        case 5:
            message.align = 5;
            break;
        }
        if (object.alignCode != null)
            message.alignCode = String(object.alignCode);
        switch (object.valignInheritance) {
        default:
            if (typeof object.valignInheritance === "number") {
                message.valignInheritance = object.valignInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.valignInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.valignInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.valignInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.valignInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.valignInheritance = 4;
            break;
        }
        switch (object.valign) {
        default:
            if (typeof object.valign === "number") {
                message.valign = object.valign;
                break;
            }
            break;
        case "TOP":
        case 0:
            message.valign = 0;
            break;
        case "MIDDLE":
        case 1:
            message.valign = 1;
            break;
        case "BOTTOM":
        case 2:
            message.valign = 2;
            break;
        }
        if (object.valignCode != null)
            message.valignCode = String(object.valignCode);
        switch (object.backgroundColorInheritance) {
        default:
            if (typeof object.backgroundColorInheritance === "number") {
                message.backgroundColorInheritance = object.backgroundColorInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.backgroundColorInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.backgroundColorInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.backgroundColorInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.backgroundColorInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.backgroundColorInheritance = 4;
            break;
        }
        if (object.backgroundColor) {
            if (!Array.isArray(object.backgroundColor))
                throw TypeError(".ProtoTableElementProperties.backgroundColor: array expected");
            message.backgroundColor = [];
            for (var i = 0; i < object.backgroundColor.length; ++i) {
                if (typeof object.backgroundColor[i] !== "object")
                    throw TypeError(".ProtoTableElementProperties.backgroundColor: object expected");
                message.backgroundColor[i] = $root.ProtoColor.fromObject(object.backgroundColor[i]);
            }
        }
        if (object.backgroundColorCode != null)
            message.backgroundColorCode = String(object.backgroundColorCode);
        switch (object.paddingTopInheritance) {
        default:
            if (typeof object.paddingTopInheritance === "number") {
                message.paddingTopInheritance = object.paddingTopInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.paddingTopInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.paddingTopInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.paddingTopInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.paddingTopInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.paddingTopInheritance = 4;
            break;
        }
        if (object.paddingTop != null) {
            if (typeof object.paddingTop !== "object")
                throw TypeError(".ProtoTableElementProperties.paddingTop: object expected");
            message.paddingTop = $root.ProtoMeasure.fromObject(object.paddingTop);
        }
        if (object.paddingTopCode != null)
            message.paddingTopCode = String(object.paddingTopCode);
        switch (object.paddingRightInheritance) {
        default:
            if (typeof object.paddingRightInheritance === "number") {
                message.paddingRightInheritance = object.paddingRightInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.paddingRightInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.paddingRightInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.paddingRightInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.paddingRightInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.paddingRightInheritance = 4;
            break;
        }
        if (object.paddingRight != null) {
            if (typeof object.paddingRight !== "object")
                throw TypeError(".ProtoTableElementProperties.paddingRight: object expected");
            message.paddingRight = $root.ProtoMeasure.fromObject(object.paddingRight);
        }
        if (object.paddingRightCode != null)
            message.paddingRightCode = String(object.paddingRightCode);
        switch (object.paddingBottomInheritance) {
        default:
            if (typeof object.paddingBottomInheritance === "number") {
                message.paddingBottomInheritance = object.paddingBottomInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.paddingBottomInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.paddingBottomInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.paddingBottomInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.paddingBottomInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.paddingBottomInheritance = 4;
            break;
        }
        if (object.paddingBottom != null) {
            if (typeof object.paddingBottom !== "object")
                throw TypeError(".ProtoTableElementProperties.paddingBottom: object expected");
            message.paddingBottom = $root.ProtoMeasure.fromObject(object.paddingBottom);
        }
        if (object.paddingBottomCode != null)
            message.paddingBottomCode = String(object.paddingBottomCode);
        switch (object.paddingLeftInheritance) {
        default:
            if (typeof object.paddingLeftInheritance === "number") {
                message.paddingLeftInheritance = object.paddingLeftInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.paddingLeftInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.paddingLeftInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.paddingLeftInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.paddingLeftInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.paddingLeftInheritance = 4;
            break;
        }
        if (object.paddingLeft != null) {
            if (typeof object.paddingLeft !== "object")
                throw TypeError(".ProtoTableElementProperties.paddingLeft: object expected");
            message.paddingLeft = $root.ProtoMeasure.fromObject(object.paddingLeft);
        }
        if (object.paddingLeftCode != null)
            message.paddingLeftCode = String(object.paddingLeftCode);
        switch (object.borderTopColorInheritance) {
        default:
            if (typeof object.borderTopColorInheritance === "number") {
                message.borderTopColorInheritance = object.borderTopColorInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.borderTopColorInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.borderTopColorInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.borderTopColorInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.borderTopColorInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.borderTopColorInheritance = 4;
            break;
        }
        if (object.borderTopColor != null) {
            if (typeof object.borderTopColor !== "object")
                throw TypeError(".ProtoTableElementProperties.borderTopColor: object expected");
            message.borderTopColor = $root.ProtoMeasure.fromObject(object.borderTopColor);
        }
        if (object.borderTopColorCode != null)
            message.borderTopColorCode = String(object.borderTopColorCode);
        switch (object.borderTopWeightInheritance) {
        default:
            if (typeof object.borderTopWeightInheritance === "number") {
                message.borderTopWeightInheritance = object.borderTopWeightInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.borderTopWeightInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.borderTopWeightInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.borderTopWeightInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.borderTopWeightInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.borderTopWeightInheritance = 4;
            break;
        }
        if (object.borderTopWeight != null) {
            if (typeof object.borderTopWeight !== "object")
                throw TypeError(".ProtoTableElementProperties.borderTopWeight: object expected");
            message.borderTopWeight = $root.ProtoMeasure.fromObject(object.borderTopWeight);
        }
        if (object.borderTopWeightCode != null)
            message.borderTopWeightCode = String(object.borderTopWeightCode);
        switch (object.borderRightColorInheritance) {
        default:
            if (typeof object.borderRightColorInheritance === "number") {
                message.borderRightColorInheritance = object.borderRightColorInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.borderRightColorInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.borderRightColorInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.borderRightColorInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.borderRightColorInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.borderRightColorInheritance = 4;
            break;
        }
        if (object.borderRightColor != null) {
            if (typeof object.borderRightColor !== "object")
                throw TypeError(".ProtoTableElementProperties.borderRightColor: object expected");
            message.borderRightColor = $root.ProtoMeasure.fromObject(object.borderRightColor);
        }
        if (object.borderRightColorCode != null)
            message.borderRightColorCode = String(object.borderRightColorCode);
        switch (object.borderRightWeightInheritance) {
        default:
            if (typeof object.borderRightWeightInheritance === "number") {
                message.borderRightWeightInheritance = object.borderRightWeightInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.borderRightWeightInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.borderRightWeightInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.borderRightWeightInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.borderRightWeightInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.borderRightWeightInheritance = 4;
            break;
        }
        if (object.borderRightWeight != null) {
            if (typeof object.borderRightWeight !== "object")
                throw TypeError(".ProtoTableElementProperties.borderRightWeight: object expected");
            message.borderRightWeight = $root.ProtoMeasure.fromObject(object.borderRightWeight);
        }
        if (object.borderRightWeightCode != null)
            message.borderRightWeightCode = String(object.borderRightWeightCode);
        switch (object.borderBottomColorInheritance) {
        default:
            if (typeof object.borderBottomColorInheritance === "number") {
                message.borderBottomColorInheritance = object.borderBottomColorInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.borderBottomColorInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.borderBottomColorInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.borderBottomColorInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.borderBottomColorInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.borderBottomColorInheritance = 4;
            break;
        }
        if (object.borderBottomColor != null) {
            if (typeof object.borderBottomColor !== "object")
                throw TypeError(".ProtoTableElementProperties.borderBottomColor: object expected");
            message.borderBottomColor = $root.ProtoMeasure.fromObject(object.borderBottomColor);
        }
        if (object.borderBottomColorCode != null)
            message.borderBottomColorCode = String(object.borderBottomColorCode);
        switch (object.borderBottomWeightInheritance) {
        default:
            if (typeof object.borderBottomWeightInheritance === "number") {
                message.borderBottomWeightInheritance = object.borderBottomWeightInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.borderBottomWeightInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.borderBottomWeightInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.borderBottomWeightInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.borderBottomWeightInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.borderBottomWeightInheritance = 4;
            break;
        }
        if (object.borderBottomWeight != null) {
            if (typeof object.borderBottomWeight !== "object")
                throw TypeError(".ProtoTableElementProperties.borderBottomWeight: object expected");
            message.borderBottomWeight = $root.ProtoMeasure.fromObject(object.borderBottomWeight);
        }
        if (object.borderBottomWeightCode != null)
            message.borderBottomWeightCode = String(object.borderBottomWeightCode);
        switch (object.borderLeftColorInheritance) {
        default:
            if (typeof object.borderLeftColorInheritance === "number") {
                message.borderLeftColorInheritance = object.borderLeftColorInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.borderLeftColorInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.borderLeftColorInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.borderLeftColorInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.borderLeftColorInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.borderLeftColorInheritance = 4;
            break;
        }
        if (object.borderLeftColor != null) {
            if (typeof object.borderLeftColor !== "object")
                throw TypeError(".ProtoTableElementProperties.borderLeftColor: object expected");
            message.borderLeftColor = $root.ProtoMeasure.fromObject(object.borderLeftColor);
        }
        if (object.borderLeftColorCode != null)
            message.borderLeftColorCode = String(object.borderLeftColorCode);
        switch (object.borderLeftWeightInheritance) {
        default:
            if (typeof object.borderLeftWeightInheritance === "number") {
                message.borderLeftWeightInheritance = object.borderLeftWeightInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.borderLeftWeightInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.borderLeftWeightInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.borderLeftWeightInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.borderLeftWeightInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.borderLeftWeightInheritance = 4;
            break;
        }
        if (object.borderLeftWeight != null) {
            if (typeof object.borderLeftWeight !== "object")
                throw TypeError(".ProtoTableElementProperties.borderLeftWeight: object expected");
            message.borderLeftWeight = $root.ProtoMeasure.fromObject(object.borderLeftWeight);
        }
        if (object.borderLeftWeightCode != null)
            message.borderLeftWeightCode = String(object.borderLeftWeightCode);
        switch (object.marginTopInheritance) {
        default:
            if (typeof object.marginTopInheritance === "number") {
                message.marginTopInheritance = object.marginTopInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.marginTopInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.marginTopInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.marginTopInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.marginTopInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.marginTopInheritance = 4;
            break;
        }
        if (object.marginTop != null) {
            if (typeof object.marginTop !== "object")
                throw TypeError(".ProtoTableElementProperties.marginTop: object expected");
            message.marginTop = $root.ProtoMeasure.fromObject(object.marginTop);
        }
        if (object.marginTopCode != null)
            message.marginTopCode = String(object.marginTopCode);
        switch (object.marginRightInheritance) {
        default:
            if (typeof object.marginRightInheritance === "number") {
                message.marginRightInheritance = object.marginRightInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.marginRightInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.marginRightInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.marginRightInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.marginRightInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.marginRightInheritance = 4;
            break;
        }
        if (object.marginRight != null) {
            if (typeof object.marginRight !== "object")
                throw TypeError(".ProtoTableElementProperties.marginRight: object expected");
            message.marginRight = $root.ProtoMeasure.fromObject(object.marginRight);
        }
        if (object.marginRightCode != null)
            message.marginRightCode = String(object.marginRightCode);
        switch (object.marginBottomInheritance) {
        default:
            if (typeof object.marginBottomInheritance === "number") {
                message.marginBottomInheritance = object.marginBottomInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.marginBottomInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.marginBottomInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.marginBottomInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.marginBottomInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.marginBottomInheritance = 4;
            break;
        }
        if (object.marginBottom != null) {
            if (typeof object.marginBottom !== "object")
                throw TypeError(".ProtoTableElementProperties.marginBottom: object expected");
            message.marginBottom = $root.ProtoMeasure.fromObject(object.marginBottom);
        }
        if (object.marginBottomCode != null)
            message.marginBottomCode = String(object.marginBottomCode);
        switch (object.marginLeftInheritance) {
        default:
            if (typeof object.marginLeftInheritance === "number") {
                message.marginLeftInheritance = object.marginLeftInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.marginLeftInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.marginLeftInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.marginLeftInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.marginLeftInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.marginLeftInheritance = 4;
            break;
        }
        if (object.marginLeft != null) {
            if (typeof object.marginLeft !== "object")
                throw TypeError(".ProtoTableElementProperties.marginLeft: object expected");
            message.marginLeft = $root.ProtoMeasure.fromObject(object.marginLeft);
        }
        if (object.marginLeftCode != null)
            message.marginLeftCode = String(object.marginLeftCode);
        switch (object.rotationInheritance) {
        default:
            if (typeof object.rotationInheritance === "number") {
                message.rotationInheritance = object.rotationInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.rotationInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.rotationInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.rotationInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.rotationInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.rotationInheritance = 4;
            break;
        }
        if (object.rotation != null)
            message.rotation = Number(object.rotation);
        if (object.rotationCode != null)
            message.rotationCode = String(object.rotationCode);
        switch (object.defaultParagraphFormatUUIDInheritance) {
        default:
            if (typeof object.defaultParagraphFormatUUIDInheritance === "number") {
                message.defaultParagraphFormatUUIDInheritance = object.defaultParagraphFormatUUIDInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.defaultParagraphFormatUUIDInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.defaultParagraphFormatUUIDInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.defaultParagraphFormatUUIDInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.defaultParagraphFormatUUIDInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.defaultParagraphFormatUUIDInheritance = 4;
            break;
        }
        if (object.defaultParagraphFormatUUID != null)
            message.defaultParagraphFormatUUID = String(object.defaultParagraphFormatUUID);
        if (object.defaultParagraphFormatUUIDCode != null)
            message.defaultParagraphFormatUUIDCode = String(object.defaultParagraphFormatUUIDCode);
        switch (object.tableContentGroupTypeInheritance) {
        default:
            if (typeof object.tableContentGroupTypeInheritance === "number") {
                message.tableContentGroupTypeInheritance = object.tableContentGroupTypeInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.tableContentGroupTypeInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.tableContentGroupTypeInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.tableContentGroupTypeInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.tableContentGroupTypeInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.tableContentGroupTypeInheritance = 4;
            break;
        }
        switch (object.tableContentGroupType) {
        default:
            if (typeof object.tableContentGroupType === "number") {
                message.tableContentGroupType = object.tableContentGroupType;
                break;
            }
            break;
        case "HEADER":
        case 0:
            message.tableContentGroupType = 0;
            break;
        case "BODY":
        case 1:
            message.tableContentGroupType = 1;
            break;
        case "FOOTER":
        case 2:
            message.tableContentGroupType = 2;
            break;
        case "SUB_HEADER":
        case 3:
            message.tableContentGroupType = 3;
            break;
        }
        if (object.tableContentGroupTypeCode != null)
            message.tableContentGroupTypeCode = String(object.tableContentGroupTypeCode);
        switch (object.cellTypeInheritance) {
        default:
            if (typeof object.cellTypeInheritance === "number") {
                message.cellTypeInheritance = object.cellTypeInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.cellTypeInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.cellTypeInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.cellTypeInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.cellTypeInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.cellTypeInheritance = 4;
            break;
        }
        switch (object.cellType) {
        default:
            if (typeof object.cellType === "number") {
                message.cellType = object.cellType;
                break;
            }
            break;
        case "TABLE_CELL_BODY":
        case 0:
            message.cellType = 0;
            break;
        case "TABLE_CELL_ROW_HEADER":
        case 1:
            message.cellType = 1;
            break;
        case "TABLE_CELL_ROW_FOOTER":
        case 2:
            message.cellType = 2;
            break;
        }
        if (object.cellTypeCode != null)
            message.cellTypeCode = String(object.cellTypeCode);
        switch (object.minRowHeightInheritance) {
        default:
            if (typeof object.minRowHeightInheritance === "number") {
                message.minRowHeightInheritance = object.minRowHeightInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.minRowHeightInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.minRowHeightInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.minRowHeightInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.minRowHeightInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.minRowHeightInheritance = 4;
            break;
        }
        if (object.minRowHeight != null) {
            if (typeof object.minRowHeight !== "object")
                throw TypeError(".ProtoTableElementProperties.minRowHeight: object expected");
            message.minRowHeight = $root.ProtoMeasure.fromObject(object.minRowHeight);
        }
        if (object.minRowHeightCode != null)
            message.minRowHeightCode = String(object.minRowHeightCode);
        switch (object.wsInheritance) {
        default:
            if (typeof object.wsInheritance === "number") {
                message.wsInheritance = object.wsInheritance;
                break;
            }
            break;
        case "INHERITANCE_INHERIT":
        case 0:
            message.wsInheritance = 0;
            break;
        case "INHERITANCE_CODE":
        case 1:
            message.wsInheritance = 1;
            break;
        case "INHERITANCE_BIND_CODE":
        case 2:
            message.wsInheritance = 2;
            break;
        case "INHERITANCE_STATIC":
        case 3:
            message.wsInheritance = 3;
            break;
        case "INHERITANCE_RESET":
        case 4:
            message.wsInheritance = 4;
            break;
        }
        if (object.ws != null) {
            if (typeof object.ws !== "object")
                throw TypeError(".ProtoTableElementProperties.ws: object expected");
            message.ws = $root.ProtoTableWS.fromObject(object.ws);
        }
        if (object.wsCode != null)
            message.wsCode = String(object.wsCode);
        return message;
    };

    /**
     * Creates a plain object from a ProtoTableElementProperties message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTableElementProperties
     * @static
     * @param {ProtoTableElementProperties} message ProtoTableElementProperties
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTableElementProperties.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.backgroundColor = [];
        if (options.defaults) {
            object.widthInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.width = null;
            object.widthCode = "";
            object.alignInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.align = options.enums === String ? "ALIGN_LEFT" : 0;
            object.alignCode = "";
            object.valignInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.valign = options.enums === String ? "TOP" : 0;
            object.valignCode = "";
            object.backgroundColorInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.backgroundColorCode = "";
            object.paddingTopInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.paddingTop = null;
            object.paddingTopCode = "";
            object.paddingRightInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.paddingRight = null;
            object.paddingRightCode = "";
            object.paddingBottomInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.paddingBottom = null;
            object.paddingBottomCode = "";
            object.paddingLeftInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.paddingLeft = null;
            object.paddingLeftCode = "";
            object.borderTopColorInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.borderTopColor = null;
            object.borderTopColorCode = "";
            object.borderTopWeightInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.borderTopWeight = null;
            object.borderTopWeightCode = "";
            object.borderRightColorInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.borderRightColor = null;
            object.borderRightColorCode = "";
            object.borderRightWeightInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.borderRightWeight = null;
            object.borderRightWeightCode = "";
            object.borderBottomColorInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.borderBottomColor = null;
            object.borderBottomColorCode = "";
            object.borderBottomWeightInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.borderBottomWeight = null;
            object.borderBottomWeightCode = "";
            object.borderLeftColorInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.borderLeftColor = null;
            object.borderLeftColorCode = "";
            object.borderLeftWeightInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.borderLeftWeight = null;
            object.borderLeftWeightCode = "";
            object.marginTopInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.marginTop = null;
            object.marginTopCode = "";
            object.marginRightInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.marginRight = null;
            object.marginRightCode = "";
            object.marginBottomInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.marginBottom = null;
            object.marginBottomCode = "";
            object.marginLeftInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.marginLeft = null;
            object.marginLeftCode = "";
            object.rotationInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.rotation = 0;
            object.rotationCode = "";
            object.defaultParagraphFormatUUIDInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.defaultParagraphFormatUUID = "";
            object.defaultParagraphFormatUUIDCode = "";
            object.tableContentGroupTypeInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.tableContentGroupType = options.enums === String ? "HEADER" : 0;
            object.tableContentGroupTypeCode = "";
            object.cellTypeInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.cellType = options.enums === String ? "TABLE_CELL_BODY" : 0;
            object.cellTypeCode = "";
            object.minRowHeightInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.minRowHeight = null;
            object.minRowHeightCode = "";
            object.wsInheritance = options.enums === String ? "INHERITANCE_INHERIT" : 0;
            object.ws = null;
            object.wsCode = "";
        }
        if (message.widthInheritance != null && message.hasOwnProperty("widthInheritance"))
            object.widthInheritance = options.enums === String ? $root.Inheritance[message.widthInheritance] === undefined ? message.widthInheritance : $root.Inheritance[message.widthInheritance] : message.widthInheritance;
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoMeasure.toObject(message.width, options);
        if (message.widthCode != null && message.hasOwnProperty("widthCode"))
            object.widthCode = message.widthCode;
        if (message.alignInheritance != null && message.hasOwnProperty("alignInheritance"))
            object.alignInheritance = options.enums === String ? $root.Inheritance[message.alignInheritance] === undefined ? message.alignInheritance : $root.Inheritance[message.alignInheritance] : message.alignInheritance;
        if (message.align != null && message.hasOwnProperty("align"))
            object.align = options.enums === String ? $root.ProtoHorizontalAlignment[message.align] === undefined ? message.align : $root.ProtoHorizontalAlignment[message.align] : message.align;
        if (message.alignCode != null && message.hasOwnProperty("alignCode"))
            object.alignCode = message.alignCode;
        if (message.valignInheritance != null && message.hasOwnProperty("valignInheritance"))
            object.valignInheritance = options.enums === String ? $root.Inheritance[message.valignInheritance] === undefined ? message.valignInheritance : $root.Inheritance[message.valignInheritance] : message.valignInheritance;
        if (message.valign != null && message.hasOwnProperty("valign"))
            object.valign = options.enums === String ? $root.ProtoVerticalAlignment[message.valign] === undefined ? message.valign : $root.ProtoVerticalAlignment[message.valign] : message.valign;
        if (message.valignCode != null && message.hasOwnProperty("valignCode"))
            object.valignCode = message.valignCode;
        if (message.backgroundColorInheritance != null && message.hasOwnProperty("backgroundColorInheritance"))
            object.backgroundColorInheritance = options.enums === String ? $root.Inheritance[message.backgroundColorInheritance] === undefined ? message.backgroundColorInheritance : $root.Inheritance[message.backgroundColorInheritance] : message.backgroundColorInheritance;
        if (message.backgroundColor && message.backgroundColor.length) {
            object.backgroundColor = [];
            for (var j = 0; j < message.backgroundColor.length; ++j)
                object.backgroundColor[j] = $root.ProtoColor.toObject(message.backgroundColor[j], options);
        }
        if (message.backgroundColorCode != null && message.hasOwnProperty("backgroundColorCode"))
            object.backgroundColorCode = message.backgroundColorCode;
        if (message.paddingTopInheritance != null && message.hasOwnProperty("paddingTopInheritance"))
            object.paddingTopInheritance = options.enums === String ? $root.Inheritance[message.paddingTopInheritance] === undefined ? message.paddingTopInheritance : $root.Inheritance[message.paddingTopInheritance] : message.paddingTopInheritance;
        if (message.paddingTop != null && message.hasOwnProperty("paddingTop"))
            object.paddingTop = $root.ProtoMeasure.toObject(message.paddingTop, options);
        if (message.paddingTopCode != null && message.hasOwnProperty("paddingTopCode"))
            object.paddingTopCode = message.paddingTopCode;
        if (message.paddingRightInheritance != null && message.hasOwnProperty("paddingRightInheritance"))
            object.paddingRightInheritance = options.enums === String ? $root.Inheritance[message.paddingRightInheritance] === undefined ? message.paddingRightInheritance : $root.Inheritance[message.paddingRightInheritance] : message.paddingRightInheritance;
        if (message.paddingRight != null && message.hasOwnProperty("paddingRight"))
            object.paddingRight = $root.ProtoMeasure.toObject(message.paddingRight, options);
        if (message.paddingRightCode != null && message.hasOwnProperty("paddingRightCode"))
            object.paddingRightCode = message.paddingRightCode;
        if (message.paddingBottomInheritance != null && message.hasOwnProperty("paddingBottomInheritance"))
            object.paddingBottomInheritance = options.enums === String ? $root.Inheritance[message.paddingBottomInheritance] === undefined ? message.paddingBottomInheritance : $root.Inheritance[message.paddingBottomInheritance] : message.paddingBottomInheritance;
        if (message.paddingBottom != null && message.hasOwnProperty("paddingBottom"))
            object.paddingBottom = $root.ProtoMeasure.toObject(message.paddingBottom, options);
        if (message.paddingBottomCode != null && message.hasOwnProperty("paddingBottomCode"))
            object.paddingBottomCode = message.paddingBottomCode;
        if (message.paddingLeftInheritance != null && message.hasOwnProperty("paddingLeftInheritance"))
            object.paddingLeftInheritance = options.enums === String ? $root.Inheritance[message.paddingLeftInheritance] === undefined ? message.paddingLeftInheritance : $root.Inheritance[message.paddingLeftInheritance] : message.paddingLeftInheritance;
        if (message.paddingLeft != null && message.hasOwnProperty("paddingLeft"))
            object.paddingLeft = $root.ProtoMeasure.toObject(message.paddingLeft, options);
        if (message.paddingLeftCode != null && message.hasOwnProperty("paddingLeftCode"))
            object.paddingLeftCode = message.paddingLeftCode;
        if (message.borderTopColorInheritance != null && message.hasOwnProperty("borderTopColorInheritance"))
            object.borderTopColorInheritance = options.enums === String ? $root.Inheritance[message.borderTopColorInheritance] === undefined ? message.borderTopColorInheritance : $root.Inheritance[message.borderTopColorInheritance] : message.borderTopColorInheritance;
        if (message.borderTopColor != null && message.hasOwnProperty("borderTopColor"))
            object.borderTopColor = $root.ProtoMeasure.toObject(message.borderTopColor, options);
        if (message.borderTopColorCode != null && message.hasOwnProperty("borderTopColorCode"))
            object.borderTopColorCode = message.borderTopColorCode;
        if (message.borderTopWeightInheritance != null && message.hasOwnProperty("borderTopWeightInheritance"))
            object.borderTopWeightInheritance = options.enums === String ? $root.Inheritance[message.borderTopWeightInheritance] === undefined ? message.borderTopWeightInheritance : $root.Inheritance[message.borderTopWeightInheritance] : message.borderTopWeightInheritance;
        if (message.borderTopWeight != null && message.hasOwnProperty("borderTopWeight"))
            object.borderTopWeight = $root.ProtoMeasure.toObject(message.borderTopWeight, options);
        if (message.borderTopWeightCode != null && message.hasOwnProperty("borderTopWeightCode"))
            object.borderTopWeightCode = message.borderTopWeightCode;
        if (message.borderRightColorInheritance != null && message.hasOwnProperty("borderRightColorInheritance"))
            object.borderRightColorInheritance = options.enums === String ? $root.Inheritance[message.borderRightColorInheritance] === undefined ? message.borderRightColorInheritance : $root.Inheritance[message.borderRightColorInheritance] : message.borderRightColorInheritance;
        if (message.borderRightColor != null && message.hasOwnProperty("borderRightColor"))
            object.borderRightColor = $root.ProtoMeasure.toObject(message.borderRightColor, options);
        if (message.borderRightColorCode != null && message.hasOwnProperty("borderRightColorCode"))
            object.borderRightColorCode = message.borderRightColorCode;
        if (message.borderRightWeightInheritance != null && message.hasOwnProperty("borderRightWeightInheritance"))
            object.borderRightWeightInheritance = options.enums === String ? $root.Inheritance[message.borderRightWeightInheritance] === undefined ? message.borderRightWeightInheritance : $root.Inheritance[message.borderRightWeightInheritance] : message.borderRightWeightInheritance;
        if (message.borderRightWeight != null && message.hasOwnProperty("borderRightWeight"))
            object.borderRightWeight = $root.ProtoMeasure.toObject(message.borderRightWeight, options);
        if (message.borderRightWeightCode != null && message.hasOwnProperty("borderRightWeightCode"))
            object.borderRightWeightCode = message.borderRightWeightCode;
        if (message.borderBottomColorInheritance != null && message.hasOwnProperty("borderBottomColorInheritance"))
            object.borderBottomColorInheritance = options.enums === String ? $root.Inheritance[message.borderBottomColorInheritance] === undefined ? message.borderBottomColorInheritance : $root.Inheritance[message.borderBottomColorInheritance] : message.borderBottomColorInheritance;
        if (message.borderBottomColor != null && message.hasOwnProperty("borderBottomColor"))
            object.borderBottomColor = $root.ProtoMeasure.toObject(message.borderBottomColor, options);
        if (message.borderBottomColorCode != null && message.hasOwnProperty("borderBottomColorCode"))
            object.borderBottomColorCode = message.borderBottomColorCode;
        if (message.borderBottomWeightInheritance != null && message.hasOwnProperty("borderBottomWeightInheritance"))
            object.borderBottomWeightInheritance = options.enums === String ? $root.Inheritance[message.borderBottomWeightInheritance] === undefined ? message.borderBottomWeightInheritance : $root.Inheritance[message.borderBottomWeightInheritance] : message.borderBottomWeightInheritance;
        if (message.borderBottomWeight != null && message.hasOwnProperty("borderBottomWeight"))
            object.borderBottomWeight = $root.ProtoMeasure.toObject(message.borderBottomWeight, options);
        if (message.borderBottomWeightCode != null && message.hasOwnProperty("borderBottomWeightCode"))
            object.borderBottomWeightCode = message.borderBottomWeightCode;
        if (message.borderLeftColorInheritance != null && message.hasOwnProperty("borderLeftColorInheritance"))
            object.borderLeftColorInheritance = options.enums === String ? $root.Inheritance[message.borderLeftColorInheritance] === undefined ? message.borderLeftColorInheritance : $root.Inheritance[message.borderLeftColorInheritance] : message.borderLeftColorInheritance;
        if (message.borderLeftColor != null && message.hasOwnProperty("borderLeftColor"))
            object.borderLeftColor = $root.ProtoMeasure.toObject(message.borderLeftColor, options);
        if (message.borderLeftColorCode != null && message.hasOwnProperty("borderLeftColorCode"))
            object.borderLeftColorCode = message.borderLeftColorCode;
        if (message.borderLeftWeightInheritance != null && message.hasOwnProperty("borderLeftWeightInheritance"))
            object.borderLeftWeightInheritance = options.enums === String ? $root.Inheritance[message.borderLeftWeightInheritance] === undefined ? message.borderLeftWeightInheritance : $root.Inheritance[message.borderLeftWeightInheritance] : message.borderLeftWeightInheritance;
        if (message.borderLeftWeight != null && message.hasOwnProperty("borderLeftWeight"))
            object.borderLeftWeight = $root.ProtoMeasure.toObject(message.borderLeftWeight, options);
        if (message.borderLeftWeightCode != null && message.hasOwnProperty("borderLeftWeightCode"))
            object.borderLeftWeightCode = message.borderLeftWeightCode;
        if (message.marginTopInheritance != null && message.hasOwnProperty("marginTopInheritance"))
            object.marginTopInheritance = options.enums === String ? $root.Inheritance[message.marginTopInheritance] === undefined ? message.marginTopInheritance : $root.Inheritance[message.marginTopInheritance] : message.marginTopInheritance;
        if (message.marginTop != null && message.hasOwnProperty("marginTop"))
            object.marginTop = $root.ProtoMeasure.toObject(message.marginTop, options);
        if (message.marginTopCode != null && message.hasOwnProperty("marginTopCode"))
            object.marginTopCode = message.marginTopCode;
        if (message.marginRightInheritance != null && message.hasOwnProperty("marginRightInheritance"))
            object.marginRightInheritance = options.enums === String ? $root.Inheritance[message.marginRightInheritance] === undefined ? message.marginRightInheritance : $root.Inheritance[message.marginRightInheritance] : message.marginRightInheritance;
        if (message.marginRight != null && message.hasOwnProperty("marginRight"))
            object.marginRight = $root.ProtoMeasure.toObject(message.marginRight, options);
        if (message.marginRightCode != null && message.hasOwnProperty("marginRightCode"))
            object.marginRightCode = message.marginRightCode;
        if (message.marginBottomInheritance != null && message.hasOwnProperty("marginBottomInheritance"))
            object.marginBottomInheritance = options.enums === String ? $root.Inheritance[message.marginBottomInheritance] === undefined ? message.marginBottomInheritance : $root.Inheritance[message.marginBottomInheritance] : message.marginBottomInheritance;
        if (message.marginBottom != null && message.hasOwnProperty("marginBottom"))
            object.marginBottom = $root.ProtoMeasure.toObject(message.marginBottom, options);
        if (message.marginBottomCode != null && message.hasOwnProperty("marginBottomCode"))
            object.marginBottomCode = message.marginBottomCode;
        if (message.marginLeftInheritance != null && message.hasOwnProperty("marginLeftInheritance"))
            object.marginLeftInheritance = options.enums === String ? $root.Inheritance[message.marginLeftInheritance] === undefined ? message.marginLeftInheritance : $root.Inheritance[message.marginLeftInheritance] : message.marginLeftInheritance;
        if (message.marginLeft != null && message.hasOwnProperty("marginLeft"))
            object.marginLeft = $root.ProtoMeasure.toObject(message.marginLeft, options);
        if (message.marginLeftCode != null && message.hasOwnProperty("marginLeftCode"))
            object.marginLeftCode = message.marginLeftCode;
        if (message.rotationInheritance != null && message.hasOwnProperty("rotationInheritance"))
            object.rotationInheritance = options.enums === String ? $root.Inheritance[message.rotationInheritance] === undefined ? message.rotationInheritance : $root.Inheritance[message.rotationInheritance] : message.rotationInheritance;
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            object.rotation = options.json && !isFinite(message.rotation) ? String(message.rotation) : message.rotation;
        if (message.rotationCode != null && message.hasOwnProperty("rotationCode"))
            object.rotationCode = message.rotationCode;
        if (message.defaultParagraphFormatUUIDInheritance != null && message.hasOwnProperty("defaultParagraphFormatUUIDInheritance"))
            object.defaultParagraphFormatUUIDInheritance = options.enums === String ? $root.Inheritance[message.defaultParagraphFormatUUIDInheritance] === undefined ? message.defaultParagraphFormatUUIDInheritance : $root.Inheritance[message.defaultParagraphFormatUUIDInheritance] : message.defaultParagraphFormatUUIDInheritance;
        if (message.defaultParagraphFormatUUID != null && message.hasOwnProperty("defaultParagraphFormatUUID"))
            object.defaultParagraphFormatUUID = message.defaultParagraphFormatUUID;
        if (message.defaultParagraphFormatUUIDCode != null && message.hasOwnProperty("defaultParagraphFormatUUIDCode"))
            object.defaultParagraphFormatUUIDCode = message.defaultParagraphFormatUUIDCode;
        if (message.tableContentGroupTypeInheritance != null && message.hasOwnProperty("tableContentGroupTypeInheritance"))
            object.tableContentGroupTypeInheritance = options.enums === String ? $root.Inheritance[message.tableContentGroupTypeInheritance] === undefined ? message.tableContentGroupTypeInheritance : $root.Inheritance[message.tableContentGroupTypeInheritance] : message.tableContentGroupTypeInheritance;
        if (message.tableContentGroupType != null && message.hasOwnProperty("tableContentGroupType"))
            object.tableContentGroupType = options.enums === String ? $root.ProtoTableContentGroupType[message.tableContentGroupType] === undefined ? message.tableContentGroupType : $root.ProtoTableContentGroupType[message.tableContentGroupType] : message.tableContentGroupType;
        if (message.tableContentGroupTypeCode != null && message.hasOwnProperty("tableContentGroupTypeCode"))
            object.tableContentGroupTypeCode = message.tableContentGroupTypeCode;
        if (message.cellTypeInheritance != null && message.hasOwnProperty("cellTypeInheritance"))
            object.cellTypeInheritance = options.enums === String ? $root.Inheritance[message.cellTypeInheritance] === undefined ? message.cellTypeInheritance : $root.Inheritance[message.cellTypeInheritance] : message.cellTypeInheritance;
        if (message.cellType != null && message.hasOwnProperty("cellType"))
            object.cellType = options.enums === String ? $root.ProtoTableCellType[message.cellType] === undefined ? message.cellType : $root.ProtoTableCellType[message.cellType] : message.cellType;
        if (message.cellTypeCode != null && message.hasOwnProperty("cellTypeCode"))
            object.cellTypeCode = message.cellTypeCode;
        if (message.minRowHeightInheritance != null && message.hasOwnProperty("minRowHeightInheritance"))
            object.minRowHeightInheritance = options.enums === String ? $root.Inheritance[message.minRowHeightInheritance] === undefined ? message.minRowHeightInheritance : $root.Inheritance[message.minRowHeightInheritance] : message.minRowHeightInheritance;
        if (message.minRowHeight != null && message.hasOwnProperty("minRowHeight"))
            object.minRowHeight = $root.ProtoMeasure.toObject(message.minRowHeight, options);
        if (message.minRowHeightCode != null && message.hasOwnProperty("minRowHeightCode"))
            object.minRowHeightCode = message.minRowHeightCode;
        if (message.wsInheritance != null && message.hasOwnProperty("wsInheritance"))
            object.wsInheritance = options.enums === String ? $root.Inheritance[message.wsInheritance] === undefined ? message.wsInheritance : $root.Inheritance[message.wsInheritance] : message.wsInheritance;
        if (message.ws != null && message.hasOwnProperty("ws"))
            object.ws = $root.ProtoTableWS.toObject(message.ws, options);
        if (message.wsCode != null && message.hasOwnProperty("wsCode"))
            object.wsCode = message.wsCode;
        return object;
    };

    /**
     * Converts this ProtoTableElementProperties to JSON.
     * @function toJSON
     * @memberof ProtoTableElementProperties
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTableElementProperties.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTableElementProperties
     * @function getTypeUrl
     * @memberof ProtoTableElementProperties
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTableElementProperties.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTableElementProperties";
    };

    return ProtoTableElementProperties;
})();

$root.ProtoText = (function() {

    /**
     * Properties of a ProtoText.
     * @name IProtoText
     * @interface IProtoText
     * @property {IProtoDocumentElement|null} [parent] ProtoText parent
     * @property {string|null} [content] ProtoText content
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoText comChannelUUIDs
     */

    /**
     * Constructs a new ProtoText.
     * @name ProtoText
     * @classdesc Represents a ProtoText.
     * @implements IProtoText
     * @constructor
     * @param {IProtoText=} [properties] Properties to set
     */
    function ProtoText(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoText parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoText
     * @instance
     */
    ProtoText.prototype.parent = null;

    /**
     * ProtoText content.
     * @member {string} content
     * @memberof ProtoText
     * @instance
     */
    ProtoText.prototype.content = "";

    /**
     * ProtoText comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoText
     * @instance
     */
    ProtoText.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoText instance using the specified properties.
     * @function create
     * @memberof ProtoText
     * @static
     * @param {IProtoText=} [properties] Properties to set
     * @returns {ProtoText} ProtoText instance
     */
    ProtoText.create = function create(properties) {
        return new ProtoText(properties);
    };

    /**
     * Encodes the specified ProtoText message. Does not implicitly {@link ProtoText.verify|verify} messages.
     * @function encode
     * @memberof ProtoText
     * @static
     * @param {IProtoText} message ProtoText message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoText.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoText message, length delimited. Does not implicitly {@link ProtoText.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoText
     * @static
     * @param {IProtoText} message ProtoText message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoText.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoText message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoText
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoText} ProtoText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoText.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoText();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.content = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoText message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoText
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoText} ProtoText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoText.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoText message.
     * @function verify
     * @memberof ProtoText
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoText.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoText message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoText
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoText} ProtoText
     */
    ProtoText.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoText)
            return object;
        var message = new $root.ProtoText();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoText.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.content != null)
            message.content = String(object.content);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoText.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoText message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoText
     * @static
     * @param {ProtoText} message ProtoText
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoText.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.content = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoText to JSON.
     * @function toJSON
     * @memberof ProtoText
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoText.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoText
     * @function getTypeUrl
     * @memberof ProtoText
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoText.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoText";
    };

    return ProtoText;
})();

$root.ProtoBarcode = (function() {

    /**
     * Properties of a ProtoBarcode.
     * @name IProtoBarcode
     * @interface IProtoBarcode
     * @property {ProtoBarcodeType|null} [type] ProtoBarcode type
     * @property {IProtoMeasure|null} [x] ProtoBarcode x
     * @property {IProtoMeasure|null} [y] ProtoBarcode y
     * @property {ProtoImageReferencePoint|null} [referencePoint] ProtoBarcode referencePoint
     * @property {number|null} [rotation] ProtoBarcode rotation
     * @property {IProtoMeasure|null} [width] ProtoBarcode width
     * @property {IProtoMeasure|null} [height] ProtoBarcode height
     * @property {IProtoMeasure|null} [padding] ProtoBarcode padding
     * @property {string|null} [data] ProtoBarcode data
     * @property {boolean|null} [positionAbsolute] ProtoBarcode positionAbsolute
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoBarcode comChannelUUIDs
     * @property {string|null} [uuid] ProtoBarcode uuid
     * @property {string|null} [code] ProtoBarcode code
     * @property {IProtoSwissQRData|null} [swissQRData] ProtoBarcode swissQRData
     */

    /**
     * Constructs a new ProtoBarcode.
     * @name ProtoBarcode
     * @classdesc Represents a ProtoBarcode.
     * @implements IProtoBarcode
     * @constructor
     * @param {IProtoBarcode=} [properties] Properties to set
     */
    function ProtoBarcode(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBarcode type.
     * @member {ProtoBarcodeType} type
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.type = 0;

    /**
     * ProtoBarcode x.
     * @member {IProtoMeasure|null|undefined} x
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.x = null;

    /**
     * ProtoBarcode y.
     * @member {IProtoMeasure|null|undefined} y
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.y = null;

    /**
     * ProtoBarcode referencePoint.
     * @member {ProtoImageReferencePoint} referencePoint
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.referencePoint = 0;

    /**
     * ProtoBarcode rotation.
     * @member {number} rotation
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.rotation = 0;

    /**
     * ProtoBarcode width.
     * @member {IProtoMeasure|null|undefined} width
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.width = null;

    /**
     * ProtoBarcode height.
     * @member {IProtoMeasure|null|undefined} height
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.height = null;

    /**
     * ProtoBarcode padding.
     * @member {IProtoMeasure|null|undefined} padding
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.padding = null;

    /**
     * ProtoBarcode data.
     * @member {string} data
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.data = "";

    /**
     * ProtoBarcode positionAbsolute.
     * @member {boolean} positionAbsolute
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.positionAbsolute = false;

    /**
     * ProtoBarcode comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoBarcode uuid.
     * @member {string} uuid
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.uuid = "";

    /**
     * ProtoBarcode code.
     * @member {string} code
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.code = "";

    /**
     * ProtoBarcode swissQRData.
     * @member {IProtoSwissQRData|null|undefined} swissQRData
     * @memberof ProtoBarcode
     * @instance
     */
    ProtoBarcode.prototype.swissQRData = null;

    /**
     * Creates a new ProtoBarcode instance using the specified properties.
     * @function create
     * @memberof ProtoBarcode
     * @static
     * @param {IProtoBarcode=} [properties] Properties to set
     * @returns {ProtoBarcode} ProtoBarcode instance
     */
    ProtoBarcode.create = function create(properties) {
        return new ProtoBarcode(properties);
    };

    /**
     * Encodes the specified ProtoBarcode message. Does not implicitly {@link ProtoBarcode.verify|verify} messages.
     * @function encode
     * @memberof ProtoBarcode
     * @static
     * @param {IProtoBarcode} message ProtoBarcode message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBarcode.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        if (message.x != null && Object.hasOwnProperty.call(message, "x"))
            $root.ProtoMeasure.encode(message.x, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.y != null && Object.hasOwnProperty.call(message, "y"))
            $root.ProtoMeasure.encode(message.y, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.referencePoint != null && Object.hasOwnProperty.call(message, "referencePoint"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.referencePoint);
        if (message.rotation != null && Object.hasOwnProperty.call(message, "rotation"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.rotation);
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoMeasure.encode(message.width, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
            $root.ProtoMeasure.encode(message.height, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.padding != null && Object.hasOwnProperty.call(message, "padding"))
            $root.ProtoMeasure.encode(message.padding, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.data);
        if (message.positionAbsolute != null && Object.hasOwnProperty.call(message, "positionAbsolute"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.positionAbsolute);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 12, wireType 2 =*/98).string(message.uuid);
        if (message.code != null && Object.hasOwnProperty.call(message, "code"))
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.code);
        if (message.swissQRData != null && Object.hasOwnProperty.call(message, "swissQRData"))
            $root.ProtoSwissQRData.encode(message.swissQRData, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoBarcode message, length delimited. Does not implicitly {@link ProtoBarcode.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBarcode
     * @static
     * @param {IProtoBarcode} message ProtoBarcode message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBarcode.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBarcode message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBarcode
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBarcode} ProtoBarcode
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBarcode.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBarcode();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.type = reader.int32();
                    break;
                }
            case 2: {
                    message.x = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.y = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.referencePoint = reader.int32();
                    break;
                }
            case 5: {
                    message.rotation = reader.float();
                    break;
                }
            case 6: {
                    message.width = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.height = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.padding = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.data = reader.string();
                    break;
                }
            case 10: {
                    message.positionAbsolute = reader.bool();
                    break;
                }
            case 11: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 12: {
                    message.uuid = reader.string();
                    break;
                }
            case 13: {
                    message.code = reader.string();
                    break;
                }
            case 14: {
                    message.swissQRData = $root.ProtoSwissQRData.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBarcode message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBarcode
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBarcode} ProtoBarcode
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBarcode.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBarcode message.
     * @function verify
     * @memberof ProtoBarcode
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBarcode.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                break;
            }
        if (message.x != null && message.hasOwnProperty("x")) {
            var error = $root.ProtoMeasure.verify(message.x);
            if (error)
                return "x." + error;
        }
        if (message.y != null && message.hasOwnProperty("y")) {
            var error = $root.ProtoMeasure.verify(message.y);
            if (error)
                return "y." + error;
        }
        if (message.referencePoint != null && message.hasOwnProperty("referencePoint"))
            switch (message.referencePoint) {
            default:
                return "referencePoint: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            if (typeof message.rotation !== "number")
                return "rotation: number expected";
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.height != null && message.hasOwnProperty("height")) {
            var error = $root.ProtoMeasure.verify(message.height);
            if (error)
                return "height." + error;
        }
        if (message.padding != null && message.hasOwnProperty("padding")) {
            var error = $root.ProtoMeasure.verify(message.padding);
            if (error)
                return "padding." + error;
        }
        if (message.data != null && message.hasOwnProperty("data"))
            if (!$util.isString(message.data))
                return "data: string expected";
        if (message.positionAbsolute != null && message.hasOwnProperty("positionAbsolute"))
            if (typeof message.positionAbsolute !== "boolean")
                return "positionAbsolute: boolean expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.code != null && message.hasOwnProperty("code"))
            if (!$util.isString(message.code))
                return "code: string expected";
        if (message.swissQRData != null && message.hasOwnProperty("swissQRData")) {
            var error = $root.ProtoSwissQRData.verify(message.swissQRData);
            if (error)
                return "swissQRData." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoBarcode message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBarcode
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBarcode} ProtoBarcode
     */
    ProtoBarcode.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBarcode)
            return object;
        var message = new $root.ProtoBarcode();
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "PDF417":
        case 0:
            message.type = 0;
            break;
        case "DATAMATRIX":
        case 1:
            message.type = 1;
            break;
        case "BC128":
        case 2:
            message.type = 2;
            break;
        case "QR":
        case 3:
            message.type = 3;
            break;
        case "ITF":
        case 4:
            message.type = 4;
            break;
        case "EAN8":
        case 5:
            message.type = 5;
            break;
        case "EAN13":
        case 6:
            message.type = 6;
            break;
        case "CODE39":
        case 7:
            message.type = 7;
            break;
        case "SWISSQR":
        case 8:
            message.type = 8;
            break;
        case "AZTEC":
        case 9:
            message.type = 9;
            break;
        }
        if (object.x != null) {
            if (typeof object.x !== "object")
                throw TypeError(".ProtoBarcode.x: object expected");
            message.x = $root.ProtoMeasure.fromObject(object.x);
        }
        if (object.y != null) {
            if (typeof object.y !== "object")
                throw TypeError(".ProtoBarcode.y: object expected");
            message.y = $root.ProtoMeasure.fromObject(object.y);
        }
        switch (object.referencePoint) {
        default:
            if (typeof object.referencePoint === "number") {
                message.referencePoint = object.referencePoint;
                break;
            }
            break;
        case "REF_POINT_DO_NOT_USE_AT_ALL":
        case 0:
            message.referencePoint = 0;
            break;
        case "REF_POINT_BOTTOM_LEFT":
        case 1:
            message.referencePoint = 1;
            break;
        case "REF_POINT_TOP_LEFT":
        case 2:
            message.referencePoint = 2;
            break;
        case "REF_POINT_CENTER":
        case 3:
            message.referencePoint = 3;
            break;
        case "REF_POINT_BOTTOM_RIGHT":
        case 4:
            message.referencePoint = 4;
            break;
        case "REF_POINT_TOP_RIGHT":
        case 5:
            message.referencePoint = 5;
            break;
        }
        if (object.rotation != null)
            message.rotation = Number(object.rotation);
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoBarcode.width: object expected");
            message.width = $root.ProtoMeasure.fromObject(object.width);
        }
        if (object.height != null) {
            if (typeof object.height !== "object")
                throw TypeError(".ProtoBarcode.height: object expected");
            message.height = $root.ProtoMeasure.fromObject(object.height);
        }
        if (object.padding != null) {
            if (typeof object.padding !== "object")
                throw TypeError(".ProtoBarcode.padding: object expected");
            message.padding = $root.ProtoMeasure.fromObject(object.padding);
        }
        if (object.data != null)
            message.data = String(object.data);
        if (object.positionAbsolute != null)
            message.positionAbsolute = Boolean(object.positionAbsolute);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoBarcode.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.code != null)
            message.code = String(object.code);
        if (object.swissQRData != null) {
            if (typeof object.swissQRData !== "object")
                throw TypeError(".ProtoBarcode.swissQRData: object expected");
            message.swissQRData = $root.ProtoSwissQRData.fromObject(object.swissQRData);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoBarcode message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBarcode
     * @static
     * @param {ProtoBarcode} message ProtoBarcode
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBarcode.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.type = options.enums === String ? "PDF417" : 0;
            object.x = null;
            object.y = null;
            object.referencePoint = options.enums === String ? "REF_POINT_DO_NOT_USE_AT_ALL" : 0;
            object.rotation = 0;
            object.width = null;
            object.height = null;
            object.padding = null;
            object.data = "";
            object.positionAbsolute = false;
            object.uuid = "";
            object.code = "";
            object.swissQRData = null;
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ProtoBarcodeType[message.type] === undefined ? message.type : $root.ProtoBarcodeType[message.type] : message.type;
        if (message.x != null && message.hasOwnProperty("x"))
            object.x = $root.ProtoMeasure.toObject(message.x, options);
        if (message.y != null && message.hasOwnProperty("y"))
            object.y = $root.ProtoMeasure.toObject(message.y, options);
        if (message.referencePoint != null && message.hasOwnProperty("referencePoint"))
            object.referencePoint = options.enums === String ? $root.ProtoImageReferencePoint[message.referencePoint] === undefined ? message.referencePoint : $root.ProtoImageReferencePoint[message.referencePoint] : message.referencePoint;
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            object.rotation = options.json && !isFinite(message.rotation) ? String(message.rotation) : message.rotation;
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoMeasure.toObject(message.width, options);
        if (message.height != null && message.hasOwnProperty("height"))
            object.height = $root.ProtoMeasure.toObject(message.height, options);
        if (message.padding != null && message.hasOwnProperty("padding"))
            object.padding = $root.ProtoMeasure.toObject(message.padding, options);
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = message.data;
        if (message.positionAbsolute != null && message.hasOwnProperty("positionAbsolute"))
            object.positionAbsolute = message.positionAbsolute;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.code != null && message.hasOwnProperty("code"))
            object.code = message.code;
        if (message.swissQRData != null && message.hasOwnProperty("swissQRData"))
            object.swissQRData = $root.ProtoSwissQRData.toObject(message.swissQRData, options);
        return object;
    };

    /**
     * Converts this ProtoBarcode to JSON.
     * @function toJSON
     * @memberof ProtoBarcode
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBarcode.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBarcode
     * @function getTypeUrl
     * @memberof ProtoBarcode
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBarcode.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBarcode";
    };

    return ProtoBarcode;
})();

$root.ProtoBrickReference = (function() {

    /**
     * Properties of a ProtoBrickReference.
     * @name IProtoBrickReference
     * @interface IProtoBrickReference
     * @property {string|null} [internName] ProtoBrickReference internName
     * @property {number|null} [version] ProtoBrickReference version
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoBrickReference comChannelUUIDs
     */

    /**
     * Constructs a new ProtoBrickReference.
     * @name ProtoBrickReference
     * @classdesc Represents a ProtoBrickReference.
     * @implements IProtoBrickReference
     * @constructor
     * @param {IProtoBrickReference=} [properties] Properties to set
     */
    function ProtoBrickReference(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBrickReference internName.
     * @member {string} internName
     * @memberof ProtoBrickReference
     * @instance
     */
    ProtoBrickReference.prototype.internName = "";

    /**
     * ProtoBrickReference version.
     * @member {number} version
     * @memberof ProtoBrickReference
     * @instance
     */
    ProtoBrickReference.prototype.version = 0;

    /**
     * ProtoBrickReference comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoBrickReference
     * @instance
     */
    ProtoBrickReference.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoBrickReference instance using the specified properties.
     * @function create
     * @memberof ProtoBrickReference
     * @static
     * @param {IProtoBrickReference=} [properties] Properties to set
     * @returns {ProtoBrickReference} ProtoBrickReference instance
     */
    ProtoBrickReference.create = function create(properties) {
        return new ProtoBrickReference(properties);
    };

    /**
     * Encodes the specified ProtoBrickReference message. Does not implicitly {@link ProtoBrickReference.verify|verify} messages.
     * @function encode
     * @memberof ProtoBrickReference
     * @static
     * @param {IProtoBrickReference} message ProtoBrickReference message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBrickReference.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.internName != null && Object.hasOwnProperty.call(message, "internName"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.internName);
        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.version);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoBrickReference message, length delimited. Does not implicitly {@link ProtoBrickReference.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBrickReference
     * @static
     * @param {IProtoBrickReference} message ProtoBrickReference message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBrickReference.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBrickReference message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBrickReference
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBrickReference} ProtoBrickReference
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBrickReference.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBrickReference();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.internName = reader.string();
                    break;
                }
            case 2: {
                    message.version = reader.uint32();
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBrickReference message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBrickReference
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBrickReference} ProtoBrickReference
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBrickReference.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBrickReference message.
     * @function verify
     * @memberof ProtoBrickReference
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBrickReference.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.internName != null && message.hasOwnProperty("internName"))
            if (!$util.isString(message.internName))
                return "internName: string expected";
        if (message.version != null && message.hasOwnProperty("version"))
            if (!$util.isInteger(message.version))
                return "version: integer expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoBrickReference message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBrickReference
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBrickReference} ProtoBrickReference
     */
    ProtoBrickReference.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBrickReference)
            return object;
        var message = new $root.ProtoBrickReference();
        if (object.internName != null)
            message.internName = String(object.internName);
        if (object.version != null)
            message.version = object.version >>> 0;
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoBrickReference.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoBrickReference message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBrickReference
     * @static
     * @param {ProtoBrickReference} message ProtoBrickReference
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBrickReference.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.internName = "";
            object.version = 0;
        }
        if (message.internName != null && message.hasOwnProperty("internName"))
            object.internName = message.internName;
        if (message.version != null && message.hasOwnProperty("version"))
            object.version = message.version;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoBrickReference to JSON.
     * @function toJSON
     * @memberof ProtoBrickReference
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBrickReference.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBrickReference
     * @function getTypeUrl
     * @memberof ProtoBrickReference
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBrickReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBrickReference";
    };

    return ProtoBrickReference;
})();

$root.ProtoBrick = (function() {

    /**
     * Properties of a ProtoBrick.
     * @name IProtoBrick
     * @interface IProtoBrick
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoBrick _children
     * @property {IProtoDocumentElement|null} [parent] ProtoBrick parent
     * @property {number|Long|null} [id] ProtoBrick id
     * @property {string|null} [internName] ProtoBrick internName
     * @property {string|null} [uuid] ProtoBrick uuid
     * @property {boolean|null} [editable] ProtoBrick editable
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoBrick comChannelUUIDs
     * @property {string|null} [name] ProtoBrick name
     */

    /**
     * Constructs a new ProtoBrick.
     * @name ProtoBrick
     * @classdesc Represents a ProtoBrick.
     * @implements IProtoBrick
     * @constructor
     * @param {IProtoBrick=} [properties] Properties to set
     */
    function ProtoBrick(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoBrick _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoBrick
     * @instance
     */
    ProtoBrick.prototype._children = $util.emptyArray;

    /**
     * ProtoBrick parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoBrick
     * @instance
     */
    ProtoBrick.prototype.parent = null;

    /**
     * ProtoBrick id.
     * @member {number|Long} id
     * @memberof ProtoBrick
     * @instance
     */
    ProtoBrick.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * ProtoBrick internName.
     * @member {string} internName
     * @memberof ProtoBrick
     * @instance
     */
    ProtoBrick.prototype.internName = "";

    /**
     * ProtoBrick uuid.
     * @member {string} uuid
     * @memberof ProtoBrick
     * @instance
     */
    ProtoBrick.prototype.uuid = "";

    /**
     * ProtoBrick editable.
     * @member {boolean} editable
     * @memberof ProtoBrick
     * @instance
     */
    ProtoBrick.prototype.editable = false;

    /**
     * ProtoBrick comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoBrick
     * @instance
     */
    ProtoBrick.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoBrick name.
     * @member {string} name
     * @memberof ProtoBrick
     * @instance
     */
    ProtoBrick.prototype.name = "";

    /**
     * Creates a new ProtoBrick instance using the specified properties.
     * @function create
     * @memberof ProtoBrick
     * @static
     * @param {IProtoBrick=} [properties] Properties to set
     * @returns {ProtoBrick} ProtoBrick instance
     */
    ProtoBrick.create = function create(properties) {
        return new ProtoBrick(properties);
    };

    /**
     * Encodes the specified ProtoBrick message. Does not implicitly {@link ProtoBrick.verify|verify} messages.
     * @function encode
     * @memberof ProtoBrick
     * @static
     * @param {IProtoBrick} message ProtoBrick message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBrick.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.id);
        if (message.internName != null && Object.hasOwnProperty.call(message, "internName"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.internName);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.uuid);
        if (message.editable != null && Object.hasOwnProperty.call(message, "editable"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.editable);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.comChannelUUIDs[i]);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);
        return writer;
    };

    /**
     * Encodes the specified ProtoBrick message, length delimited. Does not implicitly {@link ProtoBrick.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoBrick
     * @static
     * @param {IProtoBrick} message ProtoBrick message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoBrick.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoBrick message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoBrick
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoBrick} ProtoBrick
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBrick.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoBrick();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.id = reader.uint64();
                    break;
                }
            case 4: {
                    message.internName = reader.string();
                    break;
                }
            case 5: {
                    message.uuid = reader.string();
                    break;
                }
            case 6: {
                    message.editable = reader.bool();
                    break;
                }
            case 7: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 8: {
                    message.name = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoBrick message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoBrick
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoBrick} ProtoBrick
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoBrick.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoBrick message.
     * @function verify
     * @memberof ProtoBrick
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoBrick.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                return "id: integer|Long expected";
        if (message.internName != null && message.hasOwnProperty("internName"))
            if (!$util.isString(message.internName))
                return "internName: string expected";
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.editable != null && message.hasOwnProperty("editable"))
            if (typeof message.editable !== "boolean")
                return "editable: boolean expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };

    /**
     * Creates a ProtoBrick message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoBrick
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoBrick} ProtoBrick
     */
    ProtoBrick.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoBrick)
            return object;
        var message = new $root.ProtoBrick();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoBrick._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoBrick._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoBrick.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.id != null)
            if ($util.Long)
                (message.id = $util.Long.fromValue(object.id)).unsigned = true;
            else if (typeof object.id === "string")
                message.id = parseInt(object.id, 10);
            else if (typeof object.id === "number")
                message.id = object.id;
            else if (typeof object.id === "object")
                message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
        if (object.internName != null)
            message.internName = String(object.internName);
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.editable != null)
            message.editable = Boolean(object.editable);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoBrick.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };

    /**
     * Creates a plain object from a ProtoBrick message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoBrick
     * @static
     * @param {ProtoBrick} message ProtoBrick
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoBrick.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.id = options.longs === String ? "0" : 0;
            object.internName = "";
            object.uuid = "";
            object.editable = false;
            object.name = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.id != null && message.hasOwnProperty("id"))
            if (typeof message.id === "number")
                object.id = options.longs === String ? String(message.id) : message.id;
            else
                object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
        if (message.internName != null && message.hasOwnProperty("internName"))
            object.internName = message.internName;
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.editable != null && message.hasOwnProperty("editable"))
            object.editable = message.editable;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };

    /**
     * Converts this ProtoBrick to JSON.
     * @function toJSON
     * @memberof ProtoBrick
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoBrick.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoBrick
     * @function getTypeUrl
     * @memberof ProtoBrick
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoBrick.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoBrick";
    };

    return ProtoBrick;
})();

$root.ProtoTemplate = (function() {

    /**
     * Properties of a ProtoTemplate.
     * @name IProtoTemplate
     * @interface IProtoTemplate
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoTemplate _children
     * @property {IProtoDocumentElement|null} [parent] ProtoTemplate parent
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTemplate comChannelUUIDs
     * @property {string|null} [uuid] ProtoTemplate uuid
     * @property {ColumnBalancing|null} [columnBalancing] ProtoTemplate columnBalancing
     * @property {ProtoSemanticType|null} [semanticType] ProtoTemplate semanticType
     * @property {string|null} [templateUuid] ProtoTemplate templateUuid
     */

    /**
     * Constructs a new ProtoTemplate.
     * @name ProtoTemplate
     * @classdesc Represents a ProtoTemplate.
     * @implements IProtoTemplate
     * @constructor
     * @param {IProtoTemplate=} [properties] Properties to set
     */
    function ProtoTemplate(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTemplate _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoTemplate
     * @instance
     */
    ProtoTemplate.prototype._children = $util.emptyArray;

    /**
     * ProtoTemplate parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTemplate
     * @instance
     */
    ProtoTemplate.prototype.parent = null;

    /**
     * ProtoTemplate comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTemplate
     * @instance
     */
    ProtoTemplate.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoTemplate uuid.
     * @member {string} uuid
     * @memberof ProtoTemplate
     * @instance
     */
    ProtoTemplate.prototype.uuid = "";

    /**
     * ProtoTemplate columnBalancing.
     * @member {ColumnBalancing} columnBalancing
     * @memberof ProtoTemplate
     * @instance
     */
    ProtoTemplate.prototype.columnBalancing = 0;

    /**
     * ProtoTemplate semanticType.
     * @member {ProtoSemanticType} semanticType
     * @memberof ProtoTemplate
     * @instance
     */
    ProtoTemplate.prototype.semanticType = 0;

    /**
     * ProtoTemplate templateUuid.
     * @member {string} templateUuid
     * @memberof ProtoTemplate
     * @instance
     */
    ProtoTemplate.prototype.templateUuid = "";

    /**
     * Creates a new ProtoTemplate instance using the specified properties.
     * @function create
     * @memberof ProtoTemplate
     * @static
     * @param {IProtoTemplate=} [properties] Properties to set
     * @returns {ProtoTemplate} ProtoTemplate instance
     */
    ProtoTemplate.create = function create(properties) {
        return new ProtoTemplate(properties);
    };

    /**
     * Encodes the specified ProtoTemplate message. Does not implicitly {@link ProtoTemplate.verify|verify} messages.
     * @function encode
     * @memberof ProtoTemplate
     * @static
     * @param {IProtoTemplate} message ProtoTemplate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTemplate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uuid);
        if (message.columnBalancing != null && Object.hasOwnProperty.call(message, "columnBalancing"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.columnBalancing);
        if (message.semanticType != null && Object.hasOwnProperty.call(message, "semanticType"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.semanticType);
        if (message.templateUuid != null && Object.hasOwnProperty.call(message, "templateUuid"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.templateUuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoTemplate message, length delimited. Does not implicitly {@link ProtoTemplate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTemplate
     * @static
     * @param {IProtoTemplate} message ProtoTemplate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTemplate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTemplate message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTemplate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTemplate} ProtoTemplate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTemplate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTemplate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 4: {
                    message.uuid = reader.string();
                    break;
                }
            case 5: {
                    message.columnBalancing = reader.int32();
                    break;
                }
            case 6: {
                    message.semanticType = reader.int32();
                    break;
                }
            case 7: {
                    message.templateUuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTemplate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTemplate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTemplate} ProtoTemplate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTemplate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTemplate message.
     * @function verify
     * @memberof ProtoTemplate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTemplate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.columnBalancing != null && message.hasOwnProperty("columnBalancing"))
            switch (message.columnBalancing) {
            default:
                return "columnBalancing: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.semanticType != null && message.hasOwnProperty("semanticType"))
            switch (message.semanticType) {
            default:
                return "semanticType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.templateUuid != null && message.hasOwnProperty("templateUuid"))
            if (!$util.isString(message.templateUuid))
                return "templateUuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoTemplate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTemplate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTemplate} ProtoTemplate
     */
    ProtoTemplate.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTemplate)
            return object;
        var message = new $root.ProtoTemplate();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoTemplate._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoTemplate._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTemplate.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTemplate.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        switch (object.columnBalancing) {
        default:
            if (typeof object.columnBalancing === "number") {
                message.columnBalancing = object.columnBalancing;
                break;
            }
            break;
        case "NO_BALANCING":
        case 0:
            message.columnBalancing = 0;
            break;
        case "BALANCING":
        case 1:
            message.columnBalancing = 1;
            break;
        }
        switch (object.semanticType) {
        default:
            if (typeof object.semanticType === "number") {
                message.semanticType = object.semanticType;
                break;
            }
            break;
        case "SEMANTIC_TYPE_NONE":
        case 0:
            message.semanticType = 0;
            break;
        case "SEMANTIC_TYPE_PART":
        case 1:
            message.semanticType = 1;
            break;
        case "SEMANTIC_TYPE_ART":
        case 2:
            message.semanticType = 2;
            break;
        case "SEMANTIC_TYPE_SECT":
        case 3:
            message.semanticType = 3;
            break;
        case "SEMANTIC_TYPE_DIV":
        case 4:
            message.semanticType = 4;
            break;
        }
        if (object.templateUuid != null)
            message.templateUuid = String(object.templateUuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoTemplate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTemplate
     * @static
     * @param {ProtoTemplate} message ProtoTemplate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTemplate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.columnBalancing = options.enums === String ? "NO_BALANCING" : 0;
            object.semanticType = options.enums === String ? "SEMANTIC_TYPE_NONE" : 0;
            object.templateUuid = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.columnBalancing != null && message.hasOwnProperty("columnBalancing"))
            object.columnBalancing = options.enums === String ? $root.ColumnBalancing[message.columnBalancing] === undefined ? message.columnBalancing : $root.ColumnBalancing[message.columnBalancing] : message.columnBalancing;
        if (message.semanticType != null && message.hasOwnProperty("semanticType"))
            object.semanticType = options.enums === String ? $root.ProtoSemanticType[message.semanticType] === undefined ? message.semanticType : $root.ProtoSemanticType[message.semanticType] : message.semanticType;
        if (message.templateUuid != null && message.hasOwnProperty("templateUuid"))
            object.templateUuid = message.templateUuid;
        return object;
    };

    /**
     * Converts this ProtoTemplate to JSON.
     * @function toJSON
     * @memberof ProtoTemplate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTemplate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTemplate
     * @function getTypeUrl
     * @memberof ProtoTemplate
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTemplate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTemplate";
    };

    return ProtoTemplate;
})();

/**
 * ColumnBalancing enum.
 * @name ColumnBalancing
 * @enum {number}
 * @property {number} NO_BALANCING=0 NO_BALANCING value
 * @property {number} BALANCING=1 BALANCING value
 */
$root.ColumnBalancing = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NO_BALANCING"] = 0;
    values[valuesById[1] = "BALANCING"] = 1;
    return values;
})();

/**
 * ProtoHeaderMode enum.
 * @name ProtoHeaderMode
 * @enum {number}
 * @property {number} HEADER_MODE_APPEND_INITIAL=0 HEADER_MODE_APPEND_INITIAL value
 * @property {number} HEADER_MODE_APPEND=1 HEADER_MODE_APPEND value
 * @property {number} HEADER_MODE_EXTEND=2 HEADER_MODE_EXTEND value
 * @property {number} HEADER_MODE_REPLACE=3 HEADER_MODE_REPLACE value
 */
$root.ProtoHeaderMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "HEADER_MODE_APPEND_INITIAL"] = 0;
    values[valuesById[1] = "HEADER_MODE_APPEND"] = 1;
    values[valuesById[2] = "HEADER_MODE_EXTEND"] = 2;
    values[valuesById[3] = "HEADER_MODE_REPLACE"] = 3;
    return values;
})();

$root.ProtoHeader = (function() {

    /**
     * Properties of a ProtoHeader.
     * @name IProtoHeader
     * @interface IProtoHeader
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoHeader _children
     * @property {IProtoDocumentElement|null} [parent] ProtoHeader parent
     * @property {string|null} [uuid] ProtoHeader uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoHeader comChannelUUIDs
     * @property {ProtoHeaderMode|null} [mode] ProtoHeader mode
     */

    /**
     * Constructs a new ProtoHeader.
     * @name ProtoHeader
     * @classdesc Represents a ProtoHeader.
     * @implements IProtoHeader
     * @constructor
     * @param {IProtoHeader=} [properties] Properties to set
     */
    function ProtoHeader(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoHeader _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoHeader
     * @instance
     */
    ProtoHeader.prototype._children = $util.emptyArray;

    /**
     * ProtoHeader parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoHeader
     * @instance
     */
    ProtoHeader.prototype.parent = null;

    /**
     * ProtoHeader uuid.
     * @member {string} uuid
     * @memberof ProtoHeader
     * @instance
     */
    ProtoHeader.prototype.uuid = "";

    /**
     * ProtoHeader comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoHeader
     * @instance
     */
    ProtoHeader.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoHeader mode.
     * @member {ProtoHeaderMode} mode
     * @memberof ProtoHeader
     * @instance
     */
    ProtoHeader.prototype.mode = 0;

    /**
     * Creates a new ProtoHeader instance using the specified properties.
     * @function create
     * @memberof ProtoHeader
     * @static
     * @param {IProtoHeader=} [properties] Properties to set
     * @returns {ProtoHeader} ProtoHeader instance
     */
    ProtoHeader.create = function create(properties) {
        return new ProtoHeader(properties);
    };

    /**
     * Encodes the specified ProtoHeader message. Does not implicitly {@link ProtoHeader.verify|verify} messages.
     * @function encode
     * @memberof ProtoHeader
     * @static
     * @param {IProtoHeader} message ProtoHeader message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoHeader.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.mode);
        return writer;
    };

    /**
     * Encodes the specified ProtoHeader message, length delimited. Does not implicitly {@link ProtoHeader.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoHeader
     * @static
     * @param {IProtoHeader} message ProtoHeader message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoHeader.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoHeader message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoHeader
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoHeader} ProtoHeader
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoHeader.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoHeader();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.mode = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoHeader message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoHeader
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoHeader} ProtoHeader
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoHeader.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoHeader message.
     * @function verify
     * @memberof ProtoHeader
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoHeader.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        return null;
    };

    /**
     * Creates a ProtoHeader message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoHeader
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoHeader} ProtoHeader
     */
    ProtoHeader.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoHeader)
            return object;
        var message = new $root.ProtoHeader();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoHeader._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoHeader._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoHeader.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoHeader.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "HEADER_MODE_APPEND_INITIAL":
        case 0:
            message.mode = 0;
            break;
        case "HEADER_MODE_APPEND":
        case 1:
            message.mode = 1;
            break;
        case "HEADER_MODE_EXTEND":
        case 2:
            message.mode = 2;
            break;
        case "HEADER_MODE_REPLACE":
        case 3:
            message.mode = 3;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoHeader message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoHeader
     * @static
     * @param {ProtoHeader} message ProtoHeader
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoHeader.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.mode = options.enums === String ? "HEADER_MODE_APPEND_INITIAL" : 0;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.ProtoHeaderMode[message.mode] === undefined ? message.mode : $root.ProtoHeaderMode[message.mode] : message.mode;
        return object;
    };

    /**
     * Converts this ProtoHeader to JSON.
     * @function toJSON
     * @memberof ProtoHeader
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoHeader.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoHeader
     * @function getTypeUrl
     * @memberof ProtoHeader
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoHeader.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoHeader";
    };

    return ProtoHeader;
})();

/**
 * ProtoFooterMode enum.
 * @name ProtoFooterMode
 * @enum {number}
 * @property {number} FOOTER_MODE_APPEND_INITIAL=0 FOOTER_MODE_APPEND_INITIAL value
 * @property {number} FOOTER_MODE_APPEND=1 FOOTER_MODE_APPEND value
 * @property {number} FOOTER_MODE_EXTEND=2 FOOTER_MODE_EXTEND value
 * @property {number} FOOTER_MODE_REPLACE=3 FOOTER_MODE_REPLACE value
 */
$root.ProtoFooterMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "FOOTER_MODE_APPEND_INITIAL"] = 0;
    values[valuesById[1] = "FOOTER_MODE_APPEND"] = 1;
    values[valuesById[2] = "FOOTER_MODE_EXTEND"] = 2;
    values[valuesById[3] = "FOOTER_MODE_REPLACE"] = 3;
    return values;
})();

$root.ProtoFooter = (function() {

    /**
     * Properties of a ProtoFooter.
     * @name IProtoFooter
     * @interface IProtoFooter
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoFooter _children
     * @property {IProtoDocumentElement|null} [parent] ProtoFooter parent
     * @property {string|null} [uuid] ProtoFooter uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoFooter comChannelUUIDs
     * @property {ProtoFooterMode|null} [mode] ProtoFooter mode
     */

    /**
     * Constructs a new ProtoFooter.
     * @name ProtoFooter
     * @classdesc Represents a ProtoFooter.
     * @implements IProtoFooter
     * @constructor
     * @param {IProtoFooter=} [properties] Properties to set
     */
    function ProtoFooter(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoFooter _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoFooter
     * @instance
     */
    ProtoFooter.prototype._children = $util.emptyArray;

    /**
     * ProtoFooter parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoFooter
     * @instance
     */
    ProtoFooter.prototype.parent = null;

    /**
     * ProtoFooter uuid.
     * @member {string} uuid
     * @memberof ProtoFooter
     * @instance
     */
    ProtoFooter.prototype.uuid = "";

    /**
     * ProtoFooter comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoFooter
     * @instance
     */
    ProtoFooter.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoFooter mode.
     * @member {ProtoFooterMode} mode
     * @memberof ProtoFooter
     * @instance
     */
    ProtoFooter.prototype.mode = 0;

    /**
     * Creates a new ProtoFooter instance using the specified properties.
     * @function create
     * @memberof ProtoFooter
     * @static
     * @param {IProtoFooter=} [properties] Properties to set
     * @returns {ProtoFooter} ProtoFooter instance
     */
    ProtoFooter.create = function create(properties) {
        return new ProtoFooter(properties);
    };

    /**
     * Encodes the specified ProtoFooter message. Does not implicitly {@link ProtoFooter.verify|verify} messages.
     * @function encode
     * @memberof ProtoFooter
     * @static
     * @param {IProtoFooter} message ProtoFooter message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoFooter.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.mode);
        return writer;
    };

    /**
     * Encodes the specified ProtoFooter message, length delimited. Does not implicitly {@link ProtoFooter.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoFooter
     * @static
     * @param {IProtoFooter} message ProtoFooter message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoFooter.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoFooter message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoFooter
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoFooter} ProtoFooter
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoFooter.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoFooter();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.mode = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoFooter message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoFooter
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoFooter} ProtoFooter
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoFooter.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoFooter message.
     * @function verify
     * @memberof ProtoFooter
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoFooter.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        return null;
    };

    /**
     * Creates a ProtoFooter message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoFooter
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoFooter} ProtoFooter
     */
    ProtoFooter.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoFooter)
            return object;
        var message = new $root.ProtoFooter();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoFooter._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoFooter._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoFooter.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoFooter.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "FOOTER_MODE_APPEND_INITIAL":
        case 0:
            message.mode = 0;
            break;
        case "FOOTER_MODE_APPEND":
        case 1:
            message.mode = 1;
            break;
        case "FOOTER_MODE_EXTEND":
        case 2:
            message.mode = 2;
            break;
        case "FOOTER_MODE_REPLACE":
        case 3:
            message.mode = 3;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoFooter message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoFooter
     * @static
     * @param {ProtoFooter} message ProtoFooter
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoFooter.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.mode = options.enums === String ? "FOOTER_MODE_APPEND_INITIAL" : 0;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.ProtoFooterMode[message.mode] === undefined ? message.mode : $root.ProtoFooterMode[message.mode] : message.mode;
        return object;
    };

    /**
     * Converts this ProtoFooter to JSON.
     * @function toJSON
     * @memberof ProtoFooter
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoFooter.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoFooter
     * @function getTypeUrl
     * @memberof ProtoFooter
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoFooter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoFooter";
    };

    return ProtoFooter;
})();

$root.Node = (function() {

    /**
     * Properties of a Node.
     * @name INode
     * @interface INode
     * @property {Array.<INode>|null} [children] Node children
     * @property {IProtoListSetting|null} [listSetting] Node listSetting
     * @property {IProtoColorDef|null} [colorDef] Node colorDef
     * @property {IProtoBrick|null} [brick] Node brick
     * @property {IProtoTemplate|null} [template] Node template
     * @property {IProtoFormatted|null} [formatted] Node formatted
     * @property {IProtoImage|null} [image] Node image
     * @property {IProtoParagraphFormat|null} [paragraphFormat] Node paragraphFormat
     * @property {IProtoTextBrick|null} [textBrick] Node textBrick
     * @property {IProtoText|null} [text] Node text
     * @property {IProtoLinebreak|null} [linebreak] Node linebreak
     * @property {IProtoSpaceVertically|null} [spaceVertically] Node spaceVertically
     * @property {IProtoFooter|null} [footer] Node footer
     * @property {IProtoHeader|null} [header] Node header
     * @property {IProtoTable|null} [table] Node table
     * @property {IProtoTableRow|null} [tableRow] Node tableRow
     * @property {IProtoTableCell|null} [tableCell] Node tableCell
     * @property {IProtoCDef|null} [cDef] Node cDef
     * @property {IProtoPDef|null} [pDef] Node pDef
     * @property {IProtoApplyProtoCDef|null} [applyCDef] Node applyCDef
     * @property {IProtoApplyProtoPDef|null} [applyPDef] Node applyPDef
     * @property {IProtoApplyPtConfig|null} [applyPtConfig] Node applyPtConfig
     * @property {IProtoApplyUlConfig|null} [applyUlConfig] Node applyUlConfig
     * @property {IProtoPtConfig|null} [ptConfig] Node ptConfig
     * @property {IProtoUlConfig|null} [ulConfig] Node ulConfig
     * @property {IProtoNewPage|null} [newPage] Node newPage
     * @property {IProtoVariable|null} [variable] Node variable
     * @property {IProtoNamedString|null} [namedString] Node namedString
     * @property {IProtoParagraph|null} [paragraph] Node paragraph
     * @property {IProtoSection|null} [section] Node section
     * @property {IProtoSpan|null} [span] Node span
     * @property {IProtoLink|null} [link] Node link
     * @property {IProtoDirectory|null} [directory] Node directory
     * @property {IProtoTableContentGroup|null} [tableContentGroup] Node tableContentGroup
     * @property {IProtoTableConfig|null} [tableConfig] Node tableConfig
     * @property {IProtoTableCellConfig|null} [tableCellConfig] Node tableCellConfig
     * @property {IProtoTableRowConfig|null} [tableRowConfig] Node tableRowConfig
     * @property {IProtoTableContentGroupConfig|null} [tableContentGroupConfig] Node tableContentGroupConfig
     * @property {IProtoBrickReference|null} [brickReference] Node brickReference
     * @property {IProtoIndentation|null} [indentation] Node indentation
     * @property {IProtoBarcode|null} [barcode] Node barcode
     * @property {IProtoWsArea|null} [wsArea] Node wsArea
     * @property {IProtoCarryOver|null} [carryOver] Node carryOver
     * @property {IProtoSubTotal|null} [subTotal] Node subTotal
     * @property {IProtoLoop|null} [loop] Node loop
     * @property {IProtoLoopEntry|null} [loopEntry] Node loopEntry
     * @property {IProtoRule|null} [rule] Node rule
     * @property {IProtoLayout|null} [layout] Node layout
     * @property {IProtoAdvancedIllustrationArea|null} [advancedIllustrationArea] Node advancedIllustrationArea
     * @property {IProtoAdjustHorizontally|null} [adjustHorizontally] Node adjustHorizontally
     * @property {IProtoDoctypeScript|null} [doctypeScript] Node doctypeScript
     * @property {IProtoDmScript|null} [dmScript] Node dmScript
     * @property {IProtoDynamicTemplate|null} [dynamicTemplate] Node dynamicTemplate
     * @property {IProtoSelection|null} [selection] Node selection
     * @property {IProtoSelectionEntry|null} [selectionEntry] Node selectionEntry
     * @property {IProtoCondition|null} [condition] Node condition
     * @property {IProtoPageCondition|null} [pageCondition] Node pageCondition
     * @property {IProtoLocale|null} [locale] Node locale
     * @property {IProtoTag|null} [tag] Node tag
     * @property {IProtoParagraphSetDefault|null} [paragraphSetDefault] Node paragraphSetDefault
     * @property {IProtoInputFieldText|null} [inputFieldText] Node inputFieldText
     * @property {IProtoInputFieldDate|null} [inputFieldDate] Node inputFieldDate
     * @property {IProtoInputFieldCheckbox|null} [inputFieldCheckbox] Node inputFieldCheckbox
     * @property {IProtoInputFieldLabel|null} [inputFieldLabel] Node inputFieldLabel
     * @property {IProtoInputFieldDropdown|null} [inputFieldDropdown] Node inputFieldDropdown
     */

    /**
     * Constructs a new Node.
     * @name Node
     * @classdesc Represents a Node.
     * @implements INode
     * @constructor
     * @param {INode=} [properties] Properties to set
     */
    function Node(properties) {
        this.children = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Node children.
     * @member {Array.<INode>} children
     * @memberof Node
     * @instance
     */
    Node.prototype.children = $util.emptyArray;

    /**
     * Node listSetting.
     * @member {IProtoListSetting|null|undefined} listSetting
     * @memberof Node
     * @instance
     */
    Node.prototype.listSetting = null;

    /**
     * Node colorDef.
     * @member {IProtoColorDef|null|undefined} colorDef
     * @memberof Node
     * @instance
     */
    Node.prototype.colorDef = null;

    /**
     * Node brick.
     * @member {IProtoBrick|null|undefined} brick
     * @memberof Node
     * @instance
     */
    Node.prototype.brick = null;

    /**
     * Node template.
     * @member {IProtoTemplate|null|undefined} template
     * @memberof Node
     * @instance
     */
    Node.prototype.template = null;

    /**
     * Node formatted.
     * @member {IProtoFormatted|null|undefined} formatted
     * @memberof Node
     * @instance
     */
    Node.prototype.formatted = null;

    /**
     * Node image.
     * @member {IProtoImage|null|undefined} image
     * @memberof Node
     * @instance
     */
    Node.prototype.image = null;

    /**
     * Node paragraphFormat.
     * @member {IProtoParagraphFormat|null|undefined} paragraphFormat
     * @memberof Node
     * @instance
     */
    Node.prototype.paragraphFormat = null;

    /**
     * Node textBrick.
     * @member {IProtoTextBrick|null|undefined} textBrick
     * @memberof Node
     * @instance
     */
    Node.prototype.textBrick = null;

    /**
     * Node text.
     * @member {IProtoText|null|undefined} text
     * @memberof Node
     * @instance
     */
    Node.prototype.text = null;

    /**
     * Node linebreak.
     * @member {IProtoLinebreak|null|undefined} linebreak
     * @memberof Node
     * @instance
     */
    Node.prototype.linebreak = null;

    /**
     * Node spaceVertically.
     * @member {IProtoSpaceVertically|null|undefined} spaceVertically
     * @memberof Node
     * @instance
     */
    Node.prototype.spaceVertically = null;

    /**
     * Node footer.
     * @member {IProtoFooter|null|undefined} footer
     * @memberof Node
     * @instance
     */
    Node.prototype.footer = null;

    /**
     * Node header.
     * @member {IProtoHeader|null|undefined} header
     * @memberof Node
     * @instance
     */
    Node.prototype.header = null;

    /**
     * Node table.
     * @member {IProtoTable|null|undefined} table
     * @memberof Node
     * @instance
     */
    Node.prototype.table = null;

    /**
     * Node tableRow.
     * @member {IProtoTableRow|null|undefined} tableRow
     * @memberof Node
     * @instance
     */
    Node.prototype.tableRow = null;

    /**
     * Node tableCell.
     * @member {IProtoTableCell|null|undefined} tableCell
     * @memberof Node
     * @instance
     */
    Node.prototype.tableCell = null;

    /**
     * Node cDef.
     * @member {IProtoCDef|null|undefined} cDef
     * @memberof Node
     * @instance
     */
    Node.prototype.cDef = null;

    /**
     * Node pDef.
     * @member {IProtoPDef|null|undefined} pDef
     * @memberof Node
     * @instance
     */
    Node.prototype.pDef = null;

    /**
     * Node applyCDef.
     * @member {IProtoApplyProtoCDef|null|undefined} applyCDef
     * @memberof Node
     * @instance
     */
    Node.prototype.applyCDef = null;

    /**
     * Node applyPDef.
     * @member {IProtoApplyProtoPDef|null|undefined} applyPDef
     * @memberof Node
     * @instance
     */
    Node.prototype.applyPDef = null;

    /**
     * Node applyPtConfig.
     * @member {IProtoApplyPtConfig|null|undefined} applyPtConfig
     * @memberof Node
     * @instance
     */
    Node.prototype.applyPtConfig = null;

    /**
     * Node applyUlConfig.
     * @member {IProtoApplyUlConfig|null|undefined} applyUlConfig
     * @memberof Node
     * @instance
     */
    Node.prototype.applyUlConfig = null;

    /**
     * Node ptConfig.
     * @member {IProtoPtConfig|null|undefined} ptConfig
     * @memberof Node
     * @instance
     */
    Node.prototype.ptConfig = null;

    /**
     * Node ulConfig.
     * @member {IProtoUlConfig|null|undefined} ulConfig
     * @memberof Node
     * @instance
     */
    Node.prototype.ulConfig = null;

    /**
     * Node newPage.
     * @member {IProtoNewPage|null|undefined} newPage
     * @memberof Node
     * @instance
     */
    Node.prototype.newPage = null;

    /**
     * Node variable.
     * @member {IProtoVariable|null|undefined} variable
     * @memberof Node
     * @instance
     */
    Node.prototype.variable = null;

    /**
     * Node namedString.
     * @member {IProtoNamedString|null|undefined} namedString
     * @memberof Node
     * @instance
     */
    Node.prototype.namedString = null;

    /**
     * Node paragraph.
     * @member {IProtoParagraph|null|undefined} paragraph
     * @memberof Node
     * @instance
     */
    Node.prototype.paragraph = null;

    /**
     * Node section.
     * @member {IProtoSection|null|undefined} section
     * @memberof Node
     * @instance
     */
    Node.prototype.section = null;

    /**
     * Node span.
     * @member {IProtoSpan|null|undefined} span
     * @memberof Node
     * @instance
     */
    Node.prototype.span = null;

    /**
     * Node link.
     * @member {IProtoLink|null|undefined} link
     * @memberof Node
     * @instance
     */
    Node.prototype.link = null;

    /**
     * Node directory.
     * @member {IProtoDirectory|null|undefined} directory
     * @memberof Node
     * @instance
     */
    Node.prototype.directory = null;

    /**
     * Node tableContentGroup.
     * @member {IProtoTableContentGroup|null|undefined} tableContentGroup
     * @memberof Node
     * @instance
     */
    Node.prototype.tableContentGroup = null;

    /**
     * Node tableConfig.
     * @member {IProtoTableConfig|null|undefined} tableConfig
     * @memberof Node
     * @instance
     */
    Node.prototype.tableConfig = null;

    /**
     * Node tableCellConfig.
     * @member {IProtoTableCellConfig|null|undefined} tableCellConfig
     * @memberof Node
     * @instance
     */
    Node.prototype.tableCellConfig = null;

    /**
     * Node tableRowConfig.
     * @member {IProtoTableRowConfig|null|undefined} tableRowConfig
     * @memberof Node
     * @instance
     */
    Node.prototype.tableRowConfig = null;

    /**
     * Node tableContentGroupConfig.
     * @member {IProtoTableContentGroupConfig|null|undefined} tableContentGroupConfig
     * @memberof Node
     * @instance
     */
    Node.prototype.tableContentGroupConfig = null;

    /**
     * Node brickReference.
     * @member {IProtoBrickReference|null|undefined} brickReference
     * @memberof Node
     * @instance
     */
    Node.prototype.brickReference = null;

    /**
     * Node indentation.
     * @member {IProtoIndentation|null|undefined} indentation
     * @memberof Node
     * @instance
     */
    Node.prototype.indentation = null;

    /**
     * Node barcode.
     * @member {IProtoBarcode|null|undefined} barcode
     * @memberof Node
     * @instance
     */
    Node.prototype.barcode = null;

    /**
     * Node wsArea.
     * @member {IProtoWsArea|null|undefined} wsArea
     * @memberof Node
     * @instance
     */
    Node.prototype.wsArea = null;

    /**
     * Node carryOver.
     * @member {IProtoCarryOver|null|undefined} carryOver
     * @memberof Node
     * @instance
     */
    Node.prototype.carryOver = null;

    /**
     * Node subTotal.
     * @member {IProtoSubTotal|null|undefined} subTotal
     * @memberof Node
     * @instance
     */
    Node.prototype.subTotal = null;

    /**
     * Node loop.
     * @member {IProtoLoop|null|undefined} loop
     * @memberof Node
     * @instance
     */
    Node.prototype.loop = null;

    /**
     * Node loopEntry.
     * @member {IProtoLoopEntry|null|undefined} loopEntry
     * @memberof Node
     * @instance
     */
    Node.prototype.loopEntry = null;

    /**
     * Node rule.
     * @member {IProtoRule|null|undefined} rule
     * @memberof Node
     * @instance
     */
    Node.prototype.rule = null;

    /**
     * Node layout.
     * @member {IProtoLayout|null|undefined} layout
     * @memberof Node
     * @instance
     */
    Node.prototype.layout = null;

    /**
     * Node advancedIllustrationArea.
     * @member {IProtoAdvancedIllustrationArea|null|undefined} advancedIllustrationArea
     * @memberof Node
     * @instance
     */
    Node.prototype.advancedIllustrationArea = null;

    /**
     * Node adjustHorizontally.
     * @member {IProtoAdjustHorizontally|null|undefined} adjustHorizontally
     * @memberof Node
     * @instance
     */
    Node.prototype.adjustHorizontally = null;

    /**
     * Node doctypeScript.
     * @member {IProtoDoctypeScript|null|undefined} doctypeScript
     * @memberof Node
     * @instance
     */
    Node.prototype.doctypeScript = null;

    /**
     * Node dmScript.
     * @member {IProtoDmScript|null|undefined} dmScript
     * @memberof Node
     * @instance
     */
    Node.prototype.dmScript = null;

    /**
     * Node dynamicTemplate.
     * @member {IProtoDynamicTemplate|null|undefined} dynamicTemplate
     * @memberof Node
     * @instance
     */
    Node.prototype.dynamicTemplate = null;

    /**
     * Node selection.
     * @member {IProtoSelection|null|undefined} selection
     * @memberof Node
     * @instance
     */
    Node.prototype.selection = null;

    /**
     * Node selectionEntry.
     * @member {IProtoSelectionEntry|null|undefined} selectionEntry
     * @memberof Node
     * @instance
     */
    Node.prototype.selectionEntry = null;

    /**
     * Node condition.
     * @member {IProtoCondition|null|undefined} condition
     * @memberof Node
     * @instance
     */
    Node.prototype.condition = null;

    /**
     * Node pageCondition.
     * @member {IProtoPageCondition|null|undefined} pageCondition
     * @memberof Node
     * @instance
     */
    Node.prototype.pageCondition = null;

    /**
     * Node locale.
     * @member {IProtoLocale|null|undefined} locale
     * @memberof Node
     * @instance
     */
    Node.prototype.locale = null;

    /**
     * Node tag.
     * @member {IProtoTag|null|undefined} tag
     * @memberof Node
     * @instance
     */
    Node.prototype.tag = null;

    /**
     * Node paragraphSetDefault.
     * @member {IProtoParagraphSetDefault|null|undefined} paragraphSetDefault
     * @memberof Node
     * @instance
     */
    Node.prototype.paragraphSetDefault = null;

    /**
     * Node inputFieldText.
     * @member {IProtoInputFieldText|null|undefined} inputFieldText
     * @memberof Node
     * @instance
     */
    Node.prototype.inputFieldText = null;

    /**
     * Node inputFieldDate.
     * @member {IProtoInputFieldDate|null|undefined} inputFieldDate
     * @memberof Node
     * @instance
     */
    Node.prototype.inputFieldDate = null;

    /**
     * Node inputFieldCheckbox.
     * @member {IProtoInputFieldCheckbox|null|undefined} inputFieldCheckbox
     * @memberof Node
     * @instance
     */
    Node.prototype.inputFieldCheckbox = null;

    /**
     * Node inputFieldLabel.
     * @member {IProtoInputFieldLabel|null|undefined} inputFieldLabel
     * @memberof Node
     * @instance
     */
    Node.prototype.inputFieldLabel = null;

    /**
     * Node inputFieldDropdown.
     * @member {IProtoInputFieldDropdown|null|undefined} inputFieldDropdown
     * @memberof Node
     * @instance
     */
    Node.prototype.inputFieldDropdown = null;

    // OneOf field names bound to virtual getters and setters
    var $oneOfFields;

    /**
     * Node object.
     * @member {"listSetting"|"colorDef"|"brick"|"template"|"formatted"|"image"|"paragraphFormat"|"textBrick"|"text"|"linebreak"|"spaceVertically"|"footer"|"header"|"table"|"tableRow"|"tableCell"|"cDef"|"pDef"|"applyCDef"|"applyPDef"|"applyPtConfig"|"applyUlConfig"|"ptConfig"|"ulConfig"|"newPage"|"variable"|"namedString"|"paragraph"|"section"|"span"|"link"|"directory"|"tableContentGroup"|"tableConfig"|"tableCellConfig"|"tableRowConfig"|"tableContentGroupConfig"|"brickReference"|"indentation"|"barcode"|"wsArea"|"carryOver"|"subTotal"|"loop"|"loopEntry"|"rule"|"layout"|"advancedIllustrationArea"|"adjustHorizontally"|"doctypeScript"|"dmScript"|"dynamicTemplate"|"selection"|"selectionEntry"|"condition"|"pageCondition"|"locale"|"tag"|"paragraphSetDefault"|"inputFieldText"|"inputFieldDate"|"inputFieldCheckbox"|"inputFieldLabel"|"inputFieldDropdown"|undefined} object
     * @memberof Node
     * @instance
     */
    Object.defineProperty(Node.prototype, "object", {
        get: $util.oneOfGetter($oneOfFields = ["listSetting", "colorDef", "brick", "template", "formatted", "image", "paragraphFormat", "textBrick", "text", "linebreak", "spaceVertically", "footer", "header", "table", "tableRow", "tableCell", "cDef", "pDef", "applyCDef", "applyPDef", "applyPtConfig", "applyUlConfig", "ptConfig", "ulConfig", "newPage", "variable", "namedString", "paragraph", "section", "span", "link", "directory", "tableContentGroup", "tableConfig", "tableCellConfig", "tableRowConfig", "tableContentGroupConfig", "brickReference", "indentation", "barcode", "wsArea", "carryOver", "subTotal", "loop", "loopEntry", "rule", "layout", "advancedIllustrationArea", "adjustHorizontally", "doctypeScript", "dmScript", "dynamicTemplate", "selection", "selectionEntry", "condition", "pageCondition", "locale", "tag", "paragraphSetDefault", "inputFieldText", "inputFieldDate", "inputFieldCheckbox", "inputFieldLabel", "inputFieldDropdown"]),
        set: $util.oneOfSetter($oneOfFields)
    });

    /**
     * Creates a new Node instance using the specified properties.
     * @function create
     * @memberof Node
     * @static
     * @param {INode=} [properties] Properties to set
     * @returns {Node} Node instance
     */
    Node.create = function create(properties) {
        return new Node(properties);
    };

    /**
     * Encodes the specified Node message. Does not implicitly {@link Node.verify|verify} messages.
     * @function encode
     * @memberof Node
     * @static
     * @param {INode} message Node message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Node.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.children != null && message.children.length)
            for (var i = 0; i < message.children.length; ++i)
                $root.Node.encode(message.children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.listSetting != null && Object.hasOwnProperty.call(message, "listSetting"))
            $root.ProtoListSetting.encode(message.listSetting, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.colorDef != null && Object.hasOwnProperty.call(message, "colorDef"))
            $root.ProtoColorDef.encode(message.colorDef, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.brick != null && Object.hasOwnProperty.call(message, "brick"))
            $root.ProtoBrick.encode(message.brick, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.template != null && Object.hasOwnProperty.call(message, "template"))
            $root.ProtoTemplate.encode(message.template, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.formatted != null && Object.hasOwnProperty.call(message, "formatted"))
            $root.ProtoFormatted.encode(message.formatted, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.image != null && Object.hasOwnProperty.call(message, "image"))
            $root.ProtoImage.encode(message.image, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.paragraphFormat != null && Object.hasOwnProperty.call(message, "paragraphFormat"))
            $root.ProtoParagraphFormat.encode(message.paragraphFormat, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.textBrick != null && Object.hasOwnProperty.call(message, "textBrick"))
            $root.ProtoTextBrick.encode(message.textBrick, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
            $root.ProtoText.encode(message.text, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.linebreak != null && Object.hasOwnProperty.call(message, "linebreak"))
            $root.ProtoLinebreak.encode(message.linebreak, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.spaceVertically != null && Object.hasOwnProperty.call(message, "spaceVertically"))
            $root.ProtoSpaceVertically.encode(message.spaceVertically, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.footer != null && Object.hasOwnProperty.call(message, "footer"))
            $root.ProtoFooter.encode(message.footer, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.header != null && Object.hasOwnProperty.call(message, "header"))
            $root.ProtoHeader.encode(message.header, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.table != null && Object.hasOwnProperty.call(message, "table"))
            $root.ProtoTable.encode(message.table, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.tableRow != null && Object.hasOwnProperty.call(message, "tableRow"))
            $root.ProtoTableRow.encode(message.tableRow, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.tableCell != null && Object.hasOwnProperty.call(message, "tableCell"))
            $root.ProtoTableCell.encode(message.tableCell, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
        if (message.cDef != null && Object.hasOwnProperty.call(message, "cDef"))
            $root.ProtoCDef.encode(message.cDef, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
        if (message.pDef != null && Object.hasOwnProperty.call(message, "pDef"))
            $root.ProtoPDef.encode(message.pDef, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
        if (message.applyCDef != null && Object.hasOwnProperty.call(message, "applyCDef"))
            $root.ProtoApplyProtoCDef.encode(message.applyCDef, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.applyPDef != null && Object.hasOwnProperty.call(message, "applyPDef"))
            $root.ProtoApplyProtoPDef.encode(message.applyPDef, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.applyPtConfig != null && Object.hasOwnProperty.call(message, "applyPtConfig"))
            $root.ProtoApplyPtConfig.encode(message.applyPtConfig, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.applyUlConfig != null && Object.hasOwnProperty.call(message, "applyUlConfig"))
            $root.ProtoApplyUlConfig.encode(message.applyUlConfig, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
        if (message.ptConfig != null && Object.hasOwnProperty.call(message, "ptConfig"))
            $root.ProtoPtConfig.encode(message.ptConfig, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
        if (message.ulConfig != null && Object.hasOwnProperty.call(message, "ulConfig"))
            $root.ProtoUlConfig.encode(message.ulConfig, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
        if (message.newPage != null && Object.hasOwnProperty.call(message, "newPage"))
            $root.ProtoNewPage.encode(message.newPage, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        if (message.variable != null && Object.hasOwnProperty.call(message, "variable"))
            $root.ProtoVariable.encode(message.variable, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
        if (message.namedString != null && Object.hasOwnProperty.call(message, "namedString"))
            $root.ProtoNamedString.encode(message.namedString, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
        if (message.paragraph != null && Object.hasOwnProperty.call(message, "paragraph"))
            $root.ProtoParagraph.encode(message.paragraph, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
        if (message.section != null && Object.hasOwnProperty.call(message, "section"))
            $root.ProtoSection.encode(message.section, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();
        if (message.span != null && Object.hasOwnProperty.call(message, "span"))
            $root.ProtoSpan.encode(message.span, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();
        if (message.link != null && Object.hasOwnProperty.call(message, "link"))
            $root.ProtoLink.encode(message.link, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();
        if (message.directory != null && Object.hasOwnProperty.call(message, "directory"))
            $root.ProtoDirectory.encode(message.directory, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
        if (message.tableContentGroup != null && Object.hasOwnProperty.call(message, "tableContentGroup"))
            $root.ProtoTableContentGroup.encode(message.tableContentGroup, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
        if (message.tableConfig != null && Object.hasOwnProperty.call(message, "tableConfig"))
            $root.ProtoTableConfig.encode(message.tableConfig, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
        if (message.tableCellConfig != null && Object.hasOwnProperty.call(message, "tableCellConfig"))
            $root.ProtoTableCellConfig.encode(message.tableCellConfig, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();
        if (message.tableRowConfig != null && Object.hasOwnProperty.call(message, "tableRowConfig"))
            $root.ProtoTableRowConfig.encode(message.tableRowConfig, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
        if (message.tableContentGroupConfig != null && Object.hasOwnProperty.call(message, "tableContentGroupConfig"))
            $root.ProtoTableContentGroupConfig.encode(message.tableContentGroupConfig, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
        if (message.brickReference != null && Object.hasOwnProperty.call(message, "brickReference"))
            $root.ProtoBrickReference.encode(message.brickReference, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
        if (message.indentation != null && Object.hasOwnProperty.call(message, "indentation"))
            $root.ProtoIndentation.encode(message.indentation, writer.uint32(/* id 55, wireType 2 =*/442).fork()).ldelim();
        if (message.barcode != null && Object.hasOwnProperty.call(message, "barcode"))
            $root.ProtoBarcode.encode(message.barcode, writer.uint32(/* id 56, wireType 2 =*/450).fork()).ldelim();
        if (message.wsArea != null && Object.hasOwnProperty.call(message, "wsArea"))
            $root.ProtoWsArea.encode(message.wsArea, writer.uint32(/* id 57, wireType 2 =*/458).fork()).ldelim();
        if (message.carryOver != null && Object.hasOwnProperty.call(message, "carryOver"))
            $root.ProtoCarryOver.encode(message.carryOver, writer.uint32(/* id 58, wireType 2 =*/466).fork()).ldelim();
        if (message.subTotal != null && Object.hasOwnProperty.call(message, "subTotal"))
            $root.ProtoSubTotal.encode(message.subTotal, writer.uint32(/* id 59, wireType 2 =*/474).fork()).ldelim();
        if (message.loop != null && Object.hasOwnProperty.call(message, "loop"))
            $root.ProtoLoop.encode(message.loop, writer.uint32(/* id 60, wireType 2 =*/482).fork()).ldelim();
        if (message.loopEntry != null && Object.hasOwnProperty.call(message, "loopEntry"))
            $root.ProtoLoopEntry.encode(message.loopEntry, writer.uint32(/* id 61, wireType 2 =*/490).fork()).ldelim();
        if (message.rule != null && Object.hasOwnProperty.call(message, "rule"))
            $root.ProtoRule.encode(message.rule, writer.uint32(/* id 62, wireType 2 =*/498).fork()).ldelim();
        if (message.layout != null && Object.hasOwnProperty.call(message, "layout"))
            $root.ProtoLayout.encode(message.layout, writer.uint32(/* id 63, wireType 2 =*/506).fork()).ldelim();
        if (message.advancedIllustrationArea != null && Object.hasOwnProperty.call(message, "advancedIllustrationArea"))
            $root.ProtoAdvancedIllustrationArea.encode(message.advancedIllustrationArea, writer.uint32(/* id 64, wireType 2 =*/514).fork()).ldelim();
        if (message.adjustHorizontally != null && Object.hasOwnProperty.call(message, "adjustHorizontally"))
            $root.ProtoAdjustHorizontally.encode(message.adjustHorizontally, writer.uint32(/* id 65, wireType 2 =*/522).fork()).ldelim();
        if (message.doctypeScript != null && Object.hasOwnProperty.call(message, "doctypeScript"))
            $root.ProtoDoctypeScript.encode(message.doctypeScript, writer.uint32(/* id 66, wireType 2 =*/530).fork()).ldelim();
        if (message.dmScript != null && Object.hasOwnProperty.call(message, "dmScript"))
            $root.ProtoDmScript.encode(message.dmScript, writer.uint32(/* id 67, wireType 2 =*/538).fork()).ldelim();
        if (message.dynamicTemplate != null && Object.hasOwnProperty.call(message, "dynamicTemplate"))
            $root.ProtoDynamicTemplate.encode(message.dynamicTemplate, writer.uint32(/* id 68, wireType 2 =*/546).fork()).ldelim();
        if (message.selection != null && Object.hasOwnProperty.call(message, "selection"))
            $root.ProtoSelection.encode(message.selection, writer.uint32(/* id 69, wireType 2 =*/554).fork()).ldelim();
        if (message.selectionEntry != null && Object.hasOwnProperty.call(message, "selectionEntry"))
            $root.ProtoSelectionEntry.encode(message.selectionEntry, writer.uint32(/* id 70, wireType 2 =*/562).fork()).ldelim();
        if (message.condition != null && Object.hasOwnProperty.call(message, "condition"))
            $root.ProtoCondition.encode(message.condition, writer.uint32(/* id 71, wireType 2 =*/570).fork()).ldelim();
        if (message.pageCondition != null && Object.hasOwnProperty.call(message, "pageCondition"))
            $root.ProtoPageCondition.encode(message.pageCondition, writer.uint32(/* id 72, wireType 2 =*/578).fork()).ldelim();
        if (message.locale != null && Object.hasOwnProperty.call(message, "locale"))
            $root.ProtoLocale.encode(message.locale, writer.uint32(/* id 73, wireType 2 =*/586).fork()).ldelim();
        if (message.tag != null && Object.hasOwnProperty.call(message, "tag"))
            $root.ProtoTag.encode(message.tag, writer.uint32(/* id 74, wireType 2 =*/594).fork()).ldelim();
        if (message.paragraphSetDefault != null && Object.hasOwnProperty.call(message, "paragraphSetDefault"))
            $root.ProtoParagraphSetDefault.encode(message.paragraphSetDefault, writer.uint32(/* id 75, wireType 2 =*/602).fork()).ldelim();
        if (message.inputFieldText != null && Object.hasOwnProperty.call(message, "inputFieldText"))
            $root.ProtoInputFieldText.encode(message.inputFieldText, writer.uint32(/* id 76, wireType 2 =*/610).fork()).ldelim();
        if (message.inputFieldDate != null && Object.hasOwnProperty.call(message, "inputFieldDate"))
            $root.ProtoInputFieldDate.encode(message.inputFieldDate, writer.uint32(/* id 77, wireType 2 =*/618).fork()).ldelim();
        if (message.inputFieldCheckbox != null && Object.hasOwnProperty.call(message, "inputFieldCheckbox"))
            $root.ProtoInputFieldCheckbox.encode(message.inputFieldCheckbox, writer.uint32(/* id 78, wireType 2 =*/626).fork()).ldelim();
        if (message.inputFieldLabel != null && Object.hasOwnProperty.call(message, "inputFieldLabel"))
            $root.ProtoInputFieldLabel.encode(message.inputFieldLabel, writer.uint32(/* id 79, wireType 2 =*/634).fork()).ldelim();
        if (message.inputFieldDropdown != null && Object.hasOwnProperty.call(message, "inputFieldDropdown"))
            $root.ProtoInputFieldDropdown.encode(message.inputFieldDropdown, writer.uint32(/* id 80, wireType 2 =*/642).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified Node message, length delimited. Does not implicitly {@link Node.verify|verify} messages.
     * @function encodeDelimited
     * @memberof Node
     * @static
     * @param {INode} message Node message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    Node.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a Node message from the specified reader or buffer.
     * @function decode
     * @memberof Node
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {Node} Node
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Node.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Node();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.children && message.children.length))
                        message.children = [];
                    message.children.push($root.Node.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.listSetting = $root.ProtoListSetting.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.colorDef = $root.ProtoColorDef.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.brick = $root.ProtoBrick.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.template = $root.ProtoTemplate.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.formatted = $root.ProtoFormatted.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.image = $root.ProtoImage.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.paragraphFormat = $root.ProtoParagraphFormat.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.textBrick = $root.ProtoTextBrick.decode(reader, reader.uint32());
                    break;
                }
            case 10: {
                    message.text = $root.ProtoText.decode(reader, reader.uint32());
                    break;
                }
            case 11: {
                    message.linebreak = $root.ProtoLinebreak.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.spaceVertically = $root.ProtoSpaceVertically.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.footer = $root.ProtoFooter.decode(reader, reader.uint32());
                    break;
                }
            case 14: {
                    message.header = $root.ProtoHeader.decode(reader, reader.uint32());
                    break;
                }
            case 15: {
                    message.table = $root.ProtoTable.decode(reader, reader.uint32());
                    break;
                }
            case 16: {
                    message.tableRow = $root.ProtoTableRow.decode(reader, reader.uint32());
                    break;
                }
            case 17: {
                    message.tableCell = $root.ProtoTableCell.decode(reader, reader.uint32());
                    break;
                }
            case 18: {
                    message.cDef = $root.ProtoCDef.decode(reader, reader.uint32());
                    break;
                }
            case 19: {
                    message.pDef = $root.ProtoPDef.decode(reader, reader.uint32());
                    break;
                }
            case 20: {
                    message.applyCDef = $root.ProtoApplyProtoCDef.decode(reader, reader.uint32());
                    break;
                }
            case 21: {
                    message.applyPDef = $root.ProtoApplyProtoPDef.decode(reader, reader.uint32());
                    break;
                }
            case 22: {
                    message.applyPtConfig = $root.ProtoApplyPtConfig.decode(reader, reader.uint32());
                    break;
                }
            case 23: {
                    message.applyUlConfig = $root.ProtoApplyUlConfig.decode(reader, reader.uint32());
                    break;
                }
            case 24: {
                    message.ptConfig = $root.ProtoPtConfig.decode(reader, reader.uint32());
                    break;
                }
            case 25: {
                    message.ulConfig = $root.ProtoUlConfig.decode(reader, reader.uint32());
                    break;
                }
            case 26: {
                    message.newPage = $root.ProtoNewPage.decode(reader, reader.uint32());
                    break;
                }
            case 27: {
                    message.variable = $root.ProtoVariable.decode(reader, reader.uint32());
                    break;
                }
            case 28: {
                    message.namedString = $root.ProtoNamedString.decode(reader, reader.uint32());
                    break;
                }
            case 30: {
                    message.paragraph = $root.ProtoParagraph.decode(reader, reader.uint32());
                    break;
                }
            case 31: {
                    message.section = $root.ProtoSection.decode(reader, reader.uint32());
                    break;
                }
            case 32: {
                    message.span = $root.ProtoSpan.decode(reader, reader.uint32());
                    break;
                }
            case 33: {
                    message.link = $root.ProtoLink.decode(reader, reader.uint32());
                    break;
                }
            case 34: {
                    message.directory = $root.ProtoDirectory.decode(reader, reader.uint32());
                    break;
                }
            case 35: {
                    message.tableContentGroup = $root.ProtoTableContentGroup.decode(reader, reader.uint32());
                    break;
                }
            case 36: {
                    message.tableConfig = $root.ProtoTableConfig.decode(reader, reader.uint32());
                    break;
                }
            case 37: {
                    message.tableCellConfig = $root.ProtoTableCellConfig.decode(reader, reader.uint32());
                    break;
                }
            case 38: {
                    message.tableRowConfig = $root.ProtoTableRowConfig.decode(reader, reader.uint32());
                    break;
                }
            case 39: {
                    message.tableContentGroupConfig = $root.ProtoTableContentGroupConfig.decode(reader, reader.uint32());
                    break;
                }
            case 40: {
                    message.brickReference = $root.ProtoBrickReference.decode(reader, reader.uint32());
                    break;
                }
            case 55: {
                    message.indentation = $root.ProtoIndentation.decode(reader, reader.uint32());
                    break;
                }
            case 56: {
                    message.barcode = $root.ProtoBarcode.decode(reader, reader.uint32());
                    break;
                }
            case 57: {
                    message.wsArea = $root.ProtoWsArea.decode(reader, reader.uint32());
                    break;
                }
            case 58: {
                    message.carryOver = $root.ProtoCarryOver.decode(reader, reader.uint32());
                    break;
                }
            case 59: {
                    message.subTotal = $root.ProtoSubTotal.decode(reader, reader.uint32());
                    break;
                }
            case 60: {
                    message.loop = $root.ProtoLoop.decode(reader, reader.uint32());
                    break;
                }
            case 61: {
                    message.loopEntry = $root.ProtoLoopEntry.decode(reader, reader.uint32());
                    break;
                }
            case 62: {
                    message.rule = $root.ProtoRule.decode(reader, reader.uint32());
                    break;
                }
            case 63: {
                    message.layout = $root.ProtoLayout.decode(reader, reader.uint32());
                    break;
                }
            case 64: {
                    message.advancedIllustrationArea = $root.ProtoAdvancedIllustrationArea.decode(reader, reader.uint32());
                    break;
                }
            case 65: {
                    message.adjustHorizontally = $root.ProtoAdjustHorizontally.decode(reader, reader.uint32());
                    break;
                }
            case 66: {
                    message.doctypeScript = $root.ProtoDoctypeScript.decode(reader, reader.uint32());
                    break;
                }
            case 67: {
                    message.dmScript = $root.ProtoDmScript.decode(reader, reader.uint32());
                    break;
                }
            case 68: {
                    message.dynamicTemplate = $root.ProtoDynamicTemplate.decode(reader, reader.uint32());
                    break;
                }
            case 69: {
                    message.selection = $root.ProtoSelection.decode(reader, reader.uint32());
                    break;
                }
            case 70: {
                    message.selectionEntry = $root.ProtoSelectionEntry.decode(reader, reader.uint32());
                    break;
                }
            case 71: {
                    message.condition = $root.ProtoCondition.decode(reader, reader.uint32());
                    break;
                }
            case 72: {
                    message.pageCondition = $root.ProtoPageCondition.decode(reader, reader.uint32());
                    break;
                }
            case 73: {
                    message.locale = $root.ProtoLocale.decode(reader, reader.uint32());
                    break;
                }
            case 74: {
                    message.tag = $root.ProtoTag.decode(reader, reader.uint32());
                    break;
                }
            case 75: {
                    message.paragraphSetDefault = $root.ProtoParagraphSetDefault.decode(reader, reader.uint32());
                    break;
                }
            case 76: {
                    message.inputFieldText = $root.ProtoInputFieldText.decode(reader, reader.uint32());
                    break;
                }
            case 77: {
                    message.inputFieldDate = $root.ProtoInputFieldDate.decode(reader, reader.uint32());
                    break;
                }
            case 78: {
                    message.inputFieldCheckbox = $root.ProtoInputFieldCheckbox.decode(reader, reader.uint32());
                    break;
                }
            case 79: {
                    message.inputFieldLabel = $root.ProtoInputFieldLabel.decode(reader, reader.uint32());
                    break;
                }
            case 80: {
                    message.inputFieldDropdown = $root.ProtoInputFieldDropdown.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a Node message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof Node
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {Node} Node
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    Node.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a Node message.
     * @function verify
     * @memberof Node
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    Node.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        var properties = {};
        if (message.children != null && message.hasOwnProperty("children")) {
            if (!Array.isArray(message.children))
                return "children: array expected";
            for (var i = 0; i < message.children.length; ++i) {
                var error = $root.Node.verify(message.children[i]);
                if (error)
                    return "children." + error;
            }
        }
        if (message.listSetting != null && message.hasOwnProperty("listSetting")) {
            properties.object = 1;
            {
                var error = $root.ProtoListSetting.verify(message.listSetting);
                if (error)
                    return "listSetting." + error;
            }
        }
        if (message.colorDef != null && message.hasOwnProperty("colorDef")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoColorDef.verify(message.colorDef);
                if (error)
                    return "colorDef." + error;
            }
        }
        if (message.brick != null && message.hasOwnProperty("brick")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoBrick.verify(message.brick);
                if (error)
                    return "brick." + error;
            }
        }
        if (message.template != null && message.hasOwnProperty("template")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTemplate.verify(message.template);
                if (error)
                    return "template." + error;
            }
        }
        if (message.formatted != null && message.hasOwnProperty("formatted")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoFormatted.verify(message.formatted);
                if (error)
                    return "formatted." + error;
            }
        }
        if (message.image != null && message.hasOwnProperty("image")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoImage.verify(message.image);
                if (error)
                    return "image." + error;
            }
        }
        if (message.paragraphFormat != null && message.hasOwnProperty("paragraphFormat")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoParagraphFormat.verify(message.paragraphFormat);
                if (error)
                    return "paragraphFormat." + error;
            }
        }
        if (message.textBrick != null && message.hasOwnProperty("textBrick")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTextBrick.verify(message.textBrick);
                if (error)
                    return "textBrick." + error;
            }
        }
        if (message.text != null && message.hasOwnProperty("text")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoText.verify(message.text);
                if (error)
                    return "text." + error;
            }
        }
        if (message.linebreak != null && message.hasOwnProperty("linebreak")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoLinebreak.verify(message.linebreak);
                if (error)
                    return "linebreak." + error;
            }
        }
        if (message.spaceVertically != null && message.hasOwnProperty("spaceVertically")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoSpaceVertically.verify(message.spaceVertically);
                if (error)
                    return "spaceVertically." + error;
            }
        }
        if (message.footer != null && message.hasOwnProperty("footer")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoFooter.verify(message.footer);
                if (error)
                    return "footer." + error;
            }
        }
        if (message.header != null && message.hasOwnProperty("header")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoHeader.verify(message.header);
                if (error)
                    return "header." + error;
            }
        }
        if (message.table != null && message.hasOwnProperty("table")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTable.verify(message.table);
                if (error)
                    return "table." + error;
            }
        }
        if (message.tableRow != null && message.hasOwnProperty("tableRow")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTableRow.verify(message.tableRow);
                if (error)
                    return "tableRow." + error;
            }
        }
        if (message.tableCell != null && message.hasOwnProperty("tableCell")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTableCell.verify(message.tableCell);
                if (error)
                    return "tableCell." + error;
            }
        }
        if (message.cDef != null && message.hasOwnProperty("cDef")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoCDef.verify(message.cDef);
                if (error)
                    return "cDef." + error;
            }
        }
        if (message.pDef != null && message.hasOwnProperty("pDef")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoPDef.verify(message.pDef);
                if (error)
                    return "pDef." + error;
            }
        }
        if (message.applyCDef != null && message.hasOwnProperty("applyCDef")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoApplyProtoCDef.verify(message.applyCDef);
                if (error)
                    return "applyCDef." + error;
            }
        }
        if (message.applyPDef != null && message.hasOwnProperty("applyPDef")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoApplyProtoPDef.verify(message.applyPDef);
                if (error)
                    return "applyPDef." + error;
            }
        }
        if (message.applyPtConfig != null && message.hasOwnProperty("applyPtConfig")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoApplyPtConfig.verify(message.applyPtConfig);
                if (error)
                    return "applyPtConfig." + error;
            }
        }
        if (message.applyUlConfig != null && message.hasOwnProperty("applyUlConfig")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoApplyUlConfig.verify(message.applyUlConfig);
                if (error)
                    return "applyUlConfig." + error;
            }
        }
        if (message.ptConfig != null && message.hasOwnProperty("ptConfig")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoPtConfig.verify(message.ptConfig);
                if (error)
                    return "ptConfig." + error;
            }
        }
        if (message.ulConfig != null && message.hasOwnProperty("ulConfig")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoUlConfig.verify(message.ulConfig);
                if (error)
                    return "ulConfig." + error;
            }
        }
        if (message.newPage != null && message.hasOwnProperty("newPage")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoNewPage.verify(message.newPage);
                if (error)
                    return "newPage." + error;
            }
        }
        if (message.variable != null && message.hasOwnProperty("variable")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoVariable.verify(message.variable);
                if (error)
                    return "variable." + error;
            }
        }
        if (message.namedString != null && message.hasOwnProperty("namedString")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoNamedString.verify(message.namedString);
                if (error)
                    return "namedString." + error;
            }
        }
        if (message.paragraph != null && message.hasOwnProperty("paragraph")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoParagraph.verify(message.paragraph);
                if (error)
                    return "paragraph." + error;
            }
        }
        if (message.section != null && message.hasOwnProperty("section")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoSection.verify(message.section);
                if (error)
                    return "section." + error;
            }
        }
        if (message.span != null && message.hasOwnProperty("span")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoSpan.verify(message.span);
                if (error)
                    return "span." + error;
            }
        }
        if (message.link != null && message.hasOwnProperty("link")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoLink.verify(message.link);
                if (error)
                    return "link." + error;
            }
        }
        if (message.directory != null && message.hasOwnProperty("directory")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoDirectory.verify(message.directory);
                if (error)
                    return "directory." + error;
            }
        }
        if (message.tableContentGroup != null && message.hasOwnProperty("tableContentGroup")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTableContentGroup.verify(message.tableContentGroup);
                if (error)
                    return "tableContentGroup." + error;
            }
        }
        if (message.tableConfig != null && message.hasOwnProperty("tableConfig")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTableConfig.verify(message.tableConfig);
                if (error)
                    return "tableConfig." + error;
            }
        }
        if (message.tableCellConfig != null && message.hasOwnProperty("tableCellConfig")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTableCellConfig.verify(message.tableCellConfig);
                if (error)
                    return "tableCellConfig." + error;
            }
        }
        if (message.tableRowConfig != null && message.hasOwnProperty("tableRowConfig")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTableRowConfig.verify(message.tableRowConfig);
                if (error)
                    return "tableRowConfig." + error;
            }
        }
        if (message.tableContentGroupConfig != null && message.hasOwnProperty("tableContentGroupConfig")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTableContentGroupConfig.verify(message.tableContentGroupConfig);
                if (error)
                    return "tableContentGroupConfig." + error;
            }
        }
        if (message.brickReference != null && message.hasOwnProperty("brickReference")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoBrickReference.verify(message.brickReference);
                if (error)
                    return "brickReference." + error;
            }
        }
        if (message.indentation != null && message.hasOwnProperty("indentation")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoIndentation.verify(message.indentation);
                if (error)
                    return "indentation." + error;
            }
        }
        if (message.barcode != null && message.hasOwnProperty("barcode")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoBarcode.verify(message.barcode);
                if (error)
                    return "barcode." + error;
            }
        }
        if (message.wsArea != null && message.hasOwnProperty("wsArea")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoWsArea.verify(message.wsArea);
                if (error)
                    return "wsArea." + error;
            }
        }
        if (message.carryOver != null && message.hasOwnProperty("carryOver")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoCarryOver.verify(message.carryOver);
                if (error)
                    return "carryOver." + error;
            }
        }
        if (message.subTotal != null && message.hasOwnProperty("subTotal")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoSubTotal.verify(message.subTotal);
                if (error)
                    return "subTotal." + error;
            }
        }
        if (message.loop != null && message.hasOwnProperty("loop")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoLoop.verify(message.loop);
                if (error)
                    return "loop." + error;
            }
        }
        if (message.loopEntry != null && message.hasOwnProperty("loopEntry")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoLoopEntry.verify(message.loopEntry);
                if (error)
                    return "loopEntry." + error;
            }
        }
        if (message.rule != null && message.hasOwnProperty("rule")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoRule.verify(message.rule);
                if (error)
                    return "rule." + error;
            }
        }
        if (message.layout != null && message.hasOwnProperty("layout")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoLayout.verify(message.layout);
                if (error)
                    return "layout." + error;
            }
        }
        if (message.advancedIllustrationArea != null && message.hasOwnProperty("advancedIllustrationArea")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoAdvancedIllustrationArea.verify(message.advancedIllustrationArea);
                if (error)
                    return "advancedIllustrationArea." + error;
            }
        }
        if (message.adjustHorizontally != null && message.hasOwnProperty("adjustHorizontally")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoAdjustHorizontally.verify(message.adjustHorizontally);
                if (error)
                    return "adjustHorizontally." + error;
            }
        }
        if (message.doctypeScript != null && message.hasOwnProperty("doctypeScript")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoDoctypeScript.verify(message.doctypeScript);
                if (error)
                    return "doctypeScript." + error;
            }
        }
        if (message.dmScript != null && message.hasOwnProperty("dmScript")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoDmScript.verify(message.dmScript);
                if (error)
                    return "dmScript." + error;
            }
        }
        if (message.dynamicTemplate != null && message.hasOwnProperty("dynamicTemplate")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoDynamicTemplate.verify(message.dynamicTemplate);
                if (error)
                    return "dynamicTemplate." + error;
            }
        }
        if (message.selection != null && message.hasOwnProperty("selection")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoSelection.verify(message.selection);
                if (error)
                    return "selection." + error;
            }
        }
        if (message.selectionEntry != null && message.hasOwnProperty("selectionEntry")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoSelectionEntry.verify(message.selectionEntry);
                if (error)
                    return "selectionEntry." + error;
            }
        }
        if (message.condition != null && message.hasOwnProperty("condition")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoCondition.verify(message.condition);
                if (error)
                    return "condition." + error;
            }
        }
        if (message.pageCondition != null && message.hasOwnProperty("pageCondition")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoPageCondition.verify(message.pageCondition);
                if (error)
                    return "pageCondition." + error;
            }
        }
        if (message.locale != null && message.hasOwnProperty("locale")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoLocale.verify(message.locale);
                if (error)
                    return "locale." + error;
            }
        }
        if (message.tag != null && message.hasOwnProperty("tag")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoTag.verify(message.tag);
                if (error)
                    return "tag." + error;
            }
        }
        if (message.paragraphSetDefault != null && message.hasOwnProperty("paragraphSetDefault")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoParagraphSetDefault.verify(message.paragraphSetDefault);
                if (error)
                    return "paragraphSetDefault." + error;
            }
        }
        if (message.inputFieldText != null && message.hasOwnProperty("inputFieldText")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoInputFieldText.verify(message.inputFieldText);
                if (error)
                    return "inputFieldText." + error;
            }
        }
        if (message.inputFieldDate != null && message.hasOwnProperty("inputFieldDate")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoInputFieldDate.verify(message.inputFieldDate);
                if (error)
                    return "inputFieldDate." + error;
            }
        }
        if (message.inputFieldCheckbox != null && message.hasOwnProperty("inputFieldCheckbox")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoInputFieldCheckbox.verify(message.inputFieldCheckbox);
                if (error)
                    return "inputFieldCheckbox." + error;
            }
        }
        if (message.inputFieldLabel != null && message.hasOwnProperty("inputFieldLabel")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoInputFieldLabel.verify(message.inputFieldLabel);
                if (error)
                    return "inputFieldLabel." + error;
            }
        }
        if (message.inputFieldDropdown != null && message.hasOwnProperty("inputFieldDropdown")) {
            if (properties.object === 1)
                return "object: multiple values";
            properties.object = 1;
            {
                var error = $root.ProtoInputFieldDropdown.verify(message.inputFieldDropdown);
                if (error)
                    return "inputFieldDropdown." + error;
            }
        }
        return null;
    };

    /**
     * Creates a Node message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof Node
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {Node} Node
     */
    Node.fromObject = function fromObject(object) {
        if (object instanceof $root.Node)
            return object;
        var message = new $root.Node();
        if (object.children) {
            if (!Array.isArray(object.children))
                throw TypeError(".Node.children: array expected");
            message.children = [];
            for (var i = 0; i < object.children.length; ++i) {
                if (typeof object.children[i] !== "object")
                    throw TypeError(".Node.children: object expected");
                message.children[i] = $root.Node.fromObject(object.children[i]);
            }
        }
        if (object.listSetting != null) {
            if (typeof object.listSetting !== "object")
                throw TypeError(".Node.listSetting: object expected");
            message.listSetting = $root.ProtoListSetting.fromObject(object.listSetting);
        }
        if (object.colorDef != null) {
            if (typeof object.colorDef !== "object")
                throw TypeError(".Node.colorDef: object expected");
            message.colorDef = $root.ProtoColorDef.fromObject(object.colorDef);
        }
        if (object.brick != null) {
            if (typeof object.brick !== "object")
                throw TypeError(".Node.brick: object expected");
            message.brick = $root.ProtoBrick.fromObject(object.brick);
        }
        if (object.template != null) {
            if (typeof object.template !== "object")
                throw TypeError(".Node.template: object expected");
            message.template = $root.ProtoTemplate.fromObject(object.template);
        }
        if (object.formatted != null) {
            if (typeof object.formatted !== "object")
                throw TypeError(".Node.formatted: object expected");
            message.formatted = $root.ProtoFormatted.fromObject(object.formatted);
        }
        if (object.image != null) {
            if (typeof object.image !== "object")
                throw TypeError(".Node.image: object expected");
            message.image = $root.ProtoImage.fromObject(object.image);
        }
        if (object.paragraphFormat != null) {
            if (typeof object.paragraphFormat !== "object")
                throw TypeError(".Node.paragraphFormat: object expected");
            message.paragraphFormat = $root.ProtoParagraphFormat.fromObject(object.paragraphFormat);
        }
        if (object.textBrick != null) {
            if (typeof object.textBrick !== "object")
                throw TypeError(".Node.textBrick: object expected");
            message.textBrick = $root.ProtoTextBrick.fromObject(object.textBrick);
        }
        if (object.text != null) {
            if (typeof object.text !== "object")
                throw TypeError(".Node.text: object expected");
            message.text = $root.ProtoText.fromObject(object.text);
        }
        if (object.linebreak != null) {
            if (typeof object.linebreak !== "object")
                throw TypeError(".Node.linebreak: object expected");
            message.linebreak = $root.ProtoLinebreak.fromObject(object.linebreak);
        }
        if (object.spaceVertically != null) {
            if (typeof object.spaceVertically !== "object")
                throw TypeError(".Node.spaceVertically: object expected");
            message.spaceVertically = $root.ProtoSpaceVertically.fromObject(object.spaceVertically);
        }
        if (object.footer != null) {
            if (typeof object.footer !== "object")
                throw TypeError(".Node.footer: object expected");
            message.footer = $root.ProtoFooter.fromObject(object.footer);
        }
        if (object.header != null) {
            if (typeof object.header !== "object")
                throw TypeError(".Node.header: object expected");
            message.header = $root.ProtoHeader.fromObject(object.header);
        }
        if (object.table != null) {
            if (typeof object.table !== "object")
                throw TypeError(".Node.table: object expected");
            message.table = $root.ProtoTable.fromObject(object.table);
        }
        if (object.tableRow != null) {
            if (typeof object.tableRow !== "object")
                throw TypeError(".Node.tableRow: object expected");
            message.tableRow = $root.ProtoTableRow.fromObject(object.tableRow);
        }
        if (object.tableCell != null) {
            if (typeof object.tableCell !== "object")
                throw TypeError(".Node.tableCell: object expected");
            message.tableCell = $root.ProtoTableCell.fromObject(object.tableCell);
        }
        if (object.cDef != null) {
            if (typeof object.cDef !== "object")
                throw TypeError(".Node.cDef: object expected");
            message.cDef = $root.ProtoCDef.fromObject(object.cDef);
        }
        if (object.pDef != null) {
            if (typeof object.pDef !== "object")
                throw TypeError(".Node.pDef: object expected");
            message.pDef = $root.ProtoPDef.fromObject(object.pDef);
        }
        if (object.applyCDef != null) {
            if (typeof object.applyCDef !== "object")
                throw TypeError(".Node.applyCDef: object expected");
            message.applyCDef = $root.ProtoApplyProtoCDef.fromObject(object.applyCDef);
        }
        if (object.applyPDef != null) {
            if (typeof object.applyPDef !== "object")
                throw TypeError(".Node.applyPDef: object expected");
            message.applyPDef = $root.ProtoApplyProtoPDef.fromObject(object.applyPDef);
        }
        if (object.applyPtConfig != null) {
            if (typeof object.applyPtConfig !== "object")
                throw TypeError(".Node.applyPtConfig: object expected");
            message.applyPtConfig = $root.ProtoApplyPtConfig.fromObject(object.applyPtConfig);
        }
        if (object.applyUlConfig != null) {
            if (typeof object.applyUlConfig !== "object")
                throw TypeError(".Node.applyUlConfig: object expected");
            message.applyUlConfig = $root.ProtoApplyUlConfig.fromObject(object.applyUlConfig);
        }
        if (object.ptConfig != null) {
            if (typeof object.ptConfig !== "object")
                throw TypeError(".Node.ptConfig: object expected");
            message.ptConfig = $root.ProtoPtConfig.fromObject(object.ptConfig);
        }
        if (object.ulConfig != null) {
            if (typeof object.ulConfig !== "object")
                throw TypeError(".Node.ulConfig: object expected");
            message.ulConfig = $root.ProtoUlConfig.fromObject(object.ulConfig);
        }
        if (object.newPage != null) {
            if (typeof object.newPage !== "object")
                throw TypeError(".Node.newPage: object expected");
            message.newPage = $root.ProtoNewPage.fromObject(object.newPage);
        }
        if (object.variable != null) {
            if (typeof object.variable !== "object")
                throw TypeError(".Node.variable: object expected");
            message.variable = $root.ProtoVariable.fromObject(object.variable);
        }
        if (object.namedString != null) {
            if (typeof object.namedString !== "object")
                throw TypeError(".Node.namedString: object expected");
            message.namedString = $root.ProtoNamedString.fromObject(object.namedString);
        }
        if (object.paragraph != null) {
            if (typeof object.paragraph !== "object")
                throw TypeError(".Node.paragraph: object expected");
            message.paragraph = $root.ProtoParagraph.fromObject(object.paragraph);
        }
        if (object.section != null) {
            if (typeof object.section !== "object")
                throw TypeError(".Node.section: object expected");
            message.section = $root.ProtoSection.fromObject(object.section);
        }
        if (object.span != null) {
            if (typeof object.span !== "object")
                throw TypeError(".Node.span: object expected");
            message.span = $root.ProtoSpan.fromObject(object.span);
        }
        if (object.link != null) {
            if (typeof object.link !== "object")
                throw TypeError(".Node.link: object expected");
            message.link = $root.ProtoLink.fromObject(object.link);
        }
        if (object.directory != null) {
            if (typeof object.directory !== "object")
                throw TypeError(".Node.directory: object expected");
            message.directory = $root.ProtoDirectory.fromObject(object.directory);
        }
        if (object.tableContentGroup != null) {
            if (typeof object.tableContentGroup !== "object")
                throw TypeError(".Node.tableContentGroup: object expected");
            message.tableContentGroup = $root.ProtoTableContentGroup.fromObject(object.tableContentGroup);
        }
        if (object.tableConfig != null) {
            if (typeof object.tableConfig !== "object")
                throw TypeError(".Node.tableConfig: object expected");
            message.tableConfig = $root.ProtoTableConfig.fromObject(object.tableConfig);
        }
        if (object.tableCellConfig != null) {
            if (typeof object.tableCellConfig !== "object")
                throw TypeError(".Node.tableCellConfig: object expected");
            message.tableCellConfig = $root.ProtoTableCellConfig.fromObject(object.tableCellConfig);
        }
        if (object.tableRowConfig != null) {
            if (typeof object.tableRowConfig !== "object")
                throw TypeError(".Node.tableRowConfig: object expected");
            message.tableRowConfig = $root.ProtoTableRowConfig.fromObject(object.tableRowConfig);
        }
        if (object.tableContentGroupConfig != null) {
            if (typeof object.tableContentGroupConfig !== "object")
                throw TypeError(".Node.tableContentGroupConfig: object expected");
            message.tableContentGroupConfig = $root.ProtoTableContentGroupConfig.fromObject(object.tableContentGroupConfig);
        }
        if (object.brickReference != null) {
            if (typeof object.brickReference !== "object")
                throw TypeError(".Node.brickReference: object expected");
            message.brickReference = $root.ProtoBrickReference.fromObject(object.brickReference);
        }
        if (object.indentation != null) {
            if (typeof object.indentation !== "object")
                throw TypeError(".Node.indentation: object expected");
            message.indentation = $root.ProtoIndentation.fromObject(object.indentation);
        }
        if (object.barcode != null) {
            if (typeof object.barcode !== "object")
                throw TypeError(".Node.barcode: object expected");
            message.barcode = $root.ProtoBarcode.fromObject(object.barcode);
        }
        if (object.wsArea != null) {
            if (typeof object.wsArea !== "object")
                throw TypeError(".Node.wsArea: object expected");
            message.wsArea = $root.ProtoWsArea.fromObject(object.wsArea);
        }
        if (object.carryOver != null) {
            if (typeof object.carryOver !== "object")
                throw TypeError(".Node.carryOver: object expected");
            message.carryOver = $root.ProtoCarryOver.fromObject(object.carryOver);
        }
        if (object.subTotal != null) {
            if (typeof object.subTotal !== "object")
                throw TypeError(".Node.subTotal: object expected");
            message.subTotal = $root.ProtoSubTotal.fromObject(object.subTotal);
        }
        if (object.loop != null) {
            if (typeof object.loop !== "object")
                throw TypeError(".Node.loop: object expected");
            message.loop = $root.ProtoLoop.fromObject(object.loop);
        }
        if (object.loopEntry != null) {
            if (typeof object.loopEntry !== "object")
                throw TypeError(".Node.loopEntry: object expected");
            message.loopEntry = $root.ProtoLoopEntry.fromObject(object.loopEntry);
        }
        if (object.rule != null) {
            if (typeof object.rule !== "object")
                throw TypeError(".Node.rule: object expected");
            message.rule = $root.ProtoRule.fromObject(object.rule);
        }
        if (object.layout != null) {
            if (typeof object.layout !== "object")
                throw TypeError(".Node.layout: object expected");
            message.layout = $root.ProtoLayout.fromObject(object.layout);
        }
        if (object.advancedIllustrationArea != null) {
            if (typeof object.advancedIllustrationArea !== "object")
                throw TypeError(".Node.advancedIllustrationArea: object expected");
            message.advancedIllustrationArea = $root.ProtoAdvancedIllustrationArea.fromObject(object.advancedIllustrationArea);
        }
        if (object.adjustHorizontally != null) {
            if (typeof object.adjustHorizontally !== "object")
                throw TypeError(".Node.adjustHorizontally: object expected");
            message.adjustHorizontally = $root.ProtoAdjustHorizontally.fromObject(object.adjustHorizontally);
        }
        if (object.doctypeScript != null) {
            if (typeof object.doctypeScript !== "object")
                throw TypeError(".Node.doctypeScript: object expected");
            message.doctypeScript = $root.ProtoDoctypeScript.fromObject(object.doctypeScript);
        }
        if (object.dmScript != null) {
            if (typeof object.dmScript !== "object")
                throw TypeError(".Node.dmScript: object expected");
            message.dmScript = $root.ProtoDmScript.fromObject(object.dmScript);
        }
        if (object.dynamicTemplate != null) {
            if (typeof object.dynamicTemplate !== "object")
                throw TypeError(".Node.dynamicTemplate: object expected");
            message.dynamicTemplate = $root.ProtoDynamicTemplate.fromObject(object.dynamicTemplate);
        }
        if (object.selection != null) {
            if (typeof object.selection !== "object")
                throw TypeError(".Node.selection: object expected");
            message.selection = $root.ProtoSelection.fromObject(object.selection);
        }
        if (object.selectionEntry != null) {
            if (typeof object.selectionEntry !== "object")
                throw TypeError(".Node.selectionEntry: object expected");
            message.selectionEntry = $root.ProtoSelectionEntry.fromObject(object.selectionEntry);
        }
        if (object.condition != null) {
            if (typeof object.condition !== "object")
                throw TypeError(".Node.condition: object expected");
            message.condition = $root.ProtoCondition.fromObject(object.condition);
        }
        if (object.pageCondition != null) {
            if (typeof object.pageCondition !== "object")
                throw TypeError(".Node.pageCondition: object expected");
            message.pageCondition = $root.ProtoPageCondition.fromObject(object.pageCondition);
        }
        if (object.locale != null) {
            if (typeof object.locale !== "object")
                throw TypeError(".Node.locale: object expected");
            message.locale = $root.ProtoLocale.fromObject(object.locale);
        }
        if (object.tag != null) {
            if (typeof object.tag !== "object")
                throw TypeError(".Node.tag: object expected");
            message.tag = $root.ProtoTag.fromObject(object.tag);
        }
        if (object.paragraphSetDefault != null) {
            if (typeof object.paragraphSetDefault !== "object")
                throw TypeError(".Node.paragraphSetDefault: object expected");
            message.paragraphSetDefault = $root.ProtoParagraphSetDefault.fromObject(object.paragraphSetDefault);
        }
        if (object.inputFieldText != null) {
            if (typeof object.inputFieldText !== "object")
                throw TypeError(".Node.inputFieldText: object expected");
            message.inputFieldText = $root.ProtoInputFieldText.fromObject(object.inputFieldText);
        }
        if (object.inputFieldDate != null) {
            if (typeof object.inputFieldDate !== "object")
                throw TypeError(".Node.inputFieldDate: object expected");
            message.inputFieldDate = $root.ProtoInputFieldDate.fromObject(object.inputFieldDate);
        }
        if (object.inputFieldCheckbox != null) {
            if (typeof object.inputFieldCheckbox !== "object")
                throw TypeError(".Node.inputFieldCheckbox: object expected");
            message.inputFieldCheckbox = $root.ProtoInputFieldCheckbox.fromObject(object.inputFieldCheckbox);
        }
        if (object.inputFieldLabel != null) {
            if (typeof object.inputFieldLabel !== "object")
                throw TypeError(".Node.inputFieldLabel: object expected");
            message.inputFieldLabel = $root.ProtoInputFieldLabel.fromObject(object.inputFieldLabel);
        }
        if (object.inputFieldDropdown != null) {
            if (typeof object.inputFieldDropdown !== "object")
                throw TypeError(".Node.inputFieldDropdown: object expected");
            message.inputFieldDropdown = $root.ProtoInputFieldDropdown.fromObject(object.inputFieldDropdown);
        }
        return message;
    };

    /**
     * Creates a plain object from a Node message. Also converts values to other types if specified.
     * @function toObject
     * @memberof Node
     * @static
     * @param {Node} message Node
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    Node.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.children = [];
        if (message.children && message.children.length) {
            object.children = [];
            for (var j = 0; j < message.children.length; ++j)
                object.children[j] = $root.Node.toObject(message.children[j], options);
        }
        if (message.listSetting != null && message.hasOwnProperty("listSetting")) {
            object.listSetting = $root.ProtoListSetting.toObject(message.listSetting, options);
            if (options.oneofs)
                object.object = "listSetting";
        }
        if (message.colorDef != null && message.hasOwnProperty("colorDef")) {
            object.colorDef = $root.ProtoColorDef.toObject(message.colorDef, options);
            if (options.oneofs)
                object.object = "colorDef";
        }
        if (message.brick != null && message.hasOwnProperty("brick")) {
            object.brick = $root.ProtoBrick.toObject(message.brick, options);
            if (options.oneofs)
                object.object = "brick";
        }
        if (message.template != null && message.hasOwnProperty("template")) {
            object.template = $root.ProtoTemplate.toObject(message.template, options);
            if (options.oneofs)
                object.object = "template";
        }
        if (message.formatted != null && message.hasOwnProperty("formatted")) {
            object.formatted = $root.ProtoFormatted.toObject(message.formatted, options);
            if (options.oneofs)
                object.object = "formatted";
        }
        if (message.image != null && message.hasOwnProperty("image")) {
            object.image = $root.ProtoImage.toObject(message.image, options);
            if (options.oneofs)
                object.object = "image";
        }
        if (message.paragraphFormat != null && message.hasOwnProperty("paragraphFormat")) {
            object.paragraphFormat = $root.ProtoParagraphFormat.toObject(message.paragraphFormat, options);
            if (options.oneofs)
                object.object = "paragraphFormat";
        }
        if (message.textBrick != null && message.hasOwnProperty("textBrick")) {
            object.textBrick = $root.ProtoTextBrick.toObject(message.textBrick, options);
            if (options.oneofs)
                object.object = "textBrick";
        }
        if (message.text != null && message.hasOwnProperty("text")) {
            object.text = $root.ProtoText.toObject(message.text, options);
            if (options.oneofs)
                object.object = "text";
        }
        if (message.linebreak != null && message.hasOwnProperty("linebreak")) {
            object.linebreak = $root.ProtoLinebreak.toObject(message.linebreak, options);
            if (options.oneofs)
                object.object = "linebreak";
        }
        if (message.spaceVertically != null && message.hasOwnProperty("spaceVertically")) {
            object.spaceVertically = $root.ProtoSpaceVertically.toObject(message.spaceVertically, options);
            if (options.oneofs)
                object.object = "spaceVertically";
        }
        if (message.footer != null && message.hasOwnProperty("footer")) {
            object.footer = $root.ProtoFooter.toObject(message.footer, options);
            if (options.oneofs)
                object.object = "footer";
        }
        if (message.header != null && message.hasOwnProperty("header")) {
            object.header = $root.ProtoHeader.toObject(message.header, options);
            if (options.oneofs)
                object.object = "header";
        }
        if (message.table != null && message.hasOwnProperty("table")) {
            object.table = $root.ProtoTable.toObject(message.table, options);
            if (options.oneofs)
                object.object = "table";
        }
        if (message.tableRow != null && message.hasOwnProperty("tableRow")) {
            object.tableRow = $root.ProtoTableRow.toObject(message.tableRow, options);
            if (options.oneofs)
                object.object = "tableRow";
        }
        if (message.tableCell != null && message.hasOwnProperty("tableCell")) {
            object.tableCell = $root.ProtoTableCell.toObject(message.tableCell, options);
            if (options.oneofs)
                object.object = "tableCell";
        }
        if (message.cDef != null && message.hasOwnProperty("cDef")) {
            object.cDef = $root.ProtoCDef.toObject(message.cDef, options);
            if (options.oneofs)
                object.object = "cDef";
        }
        if (message.pDef != null && message.hasOwnProperty("pDef")) {
            object.pDef = $root.ProtoPDef.toObject(message.pDef, options);
            if (options.oneofs)
                object.object = "pDef";
        }
        if (message.applyCDef != null && message.hasOwnProperty("applyCDef")) {
            object.applyCDef = $root.ProtoApplyProtoCDef.toObject(message.applyCDef, options);
            if (options.oneofs)
                object.object = "applyCDef";
        }
        if (message.applyPDef != null && message.hasOwnProperty("applyPDef")) {
            object.applyPDef = $root.ProtoApplyProtoPDef.toObject(message.applyPDef, options);
            if (options.oneofs)
                object.object = "applyPDef";
        }
        if (message.applyPtConfig != null && message.hasOwnProperty("applyPtConfig")) {
            object.applyPtConfig = $root.ProtoApplyPtConfig.toObject(message.applyPtConfig, options);
            if (options.oneofs)
                object.object = "applyPtConfig";
        }
        if (message.applyUlConfig != null && message.hasOwnProperty("applyUlConfig")) {
            object.applyUlConfig = $root.ProtoApplyUlConfig.toObject(message.applyUlConfig, options);
            if (options.oneofs)
                object.object = "applyUlConfig";
        }
        if (message.ptConfig != null && message.hasOwnProperty("ptConfig")) {
            object.ptConfig = $root.ProtoPtConfig.toObject(message.ptConfig, options);
            if (options.oneofs)
                object.object = "ptConfig";
        }
        if (message.ulConfig != null && message.hasOwnProperty("ulConfig")) {
            object.ulConfig = $root.ProtoUlConfig.toObject(message.ulConfig, options);
            if (options.oneofs)
                object.object = "ulConfig";
        }
        if (message.newPage != null && message.hasOwnProperty("newPage")) {
            object.newPage = $root.ProtoNewPage.toObject(message.newPage, options);
            if (options.oneofs)
                object.object = "newPage";
        }
        if (message.variable != null && message.hasOwnProperty("variable")) {
            object.variable = $root.ProtoVariable.toObject(message.variable, options);
            if (options.oneofs)
                object.object = "variable";
        }
        if (message.namedString != null && message.hasOwnProperty("namedString")) {
            object.namedString = $root.ProtoNamedString.toObject(message.namedString, options);
            if (options.oneofs)
                object.object = "namedString";
        }
        if (message.paragraph != null && message.hasOwnProperty("paragraph")) {
            object.paragraph = $root.ProtoParagraph.toObject(message.paragraph, options);
            if (options.oneofs)
                object.object = "paragraph";
        }
        if (message.section != null && message.hasOwnProperty("section")) {
            object.section = $root.ProtoSection.toObject(message.section, options);
            if (options.oneofs)
                object.object = "section";
        }
        if (message.span != null && message.hasOwnProperty("span")) {
            object.span = $root.ProtoSpan.toObject(message.span, options);
            if (options.oneofs)
                object.object = "span";
        }
        if (message.link != null && message.hasOwnProperty("link")) {
            object.link = $root.ProtoLink.toObject(message.link, options);
            if (options.oneofs)
                object.object = "link";
        }
        if (message.directory != null && message.hasOwnProperty("directory")) {
            object.directory = $root.ProtoDirectory.toObject(message.directory, options);
            if (options.oneofs)
                object.object = "directory";
        }
        if (message.tableContentGroup != null && message.hasOwnProperty("tableContentGroup")) {
            object.tableContentGroup = $root.ProtoTableContentGroup.toObject(message.tableContentGroup, options);
            if (options.oneofs)
                object.object = "tableContentGroup";
        }
        if (message.tableConfig != null && message.hasOwnProperty("tableConfig")) {
            object.tableConfig = $root.ProtoTableConfig.toObject(message.tableConfig, options);
            if (options.oneofs)
                object.object = "tableConfig";
        }
        if (message.tableCellConfig != null && message.hasOwnProperty("tableCellConfig")) {
            object.tableCellConfig = $root.ProtoTableCellConfig.toObject(message.tableCellConfig, options);
            if (options.oneofs)
                object.object = "tableCellConfig";
        }
        if (message.tableRowConfig != null && message.hasOwnProperty("tableRowConfig")) {
            object.tableRowConfig = $root.ProtoTableRowConfig.toObject(message.tableRowConfig, options);
            if (options.oneofs)
                object.object = "tableRowConfig";
        }
        if (message.tableContentGroupConfig != null && message.hasOwnProperty("tableContentGroupConfig")) {
            object.tableContentGroupConfig = $root.ProtoTableContentGroupConfig.toObject(message.tableContentGroupConfig, options);
            if (options.oneofs)
                object.object = "tableContentGroupConfig";
        }
        if (message.brickReference != null && message.hasOwnProperty("brickReference")) {
            object.brickReference = $root.ProtoBrickReference.toObject(message.brickReference, options);
            if (options.oneofs)
                object.object = "brickReference";
        }
        if (message.indentation != null && message.hasOwnProperty("indentation")) {
            object.indentation = $root.ProtoIndentation.toObject(message.indentation, options);
            if (options.oneofs)
                object.object = "indentation";
        }
        if (message.barcode != null && message.hasOwnProperty("barcode")) {
            object.barcode = $root.ProtoBarcode.toObject(message.barcode, options);
            if (options.oneofs)
                object.object = "barcode";
        }
        if (message.wsArea != null && message.hasOwnProperty("wsArea")) {
            object.wsArea = $root.ProtoWsArea.toObject(message.wsArea, options);
            if (options.oneofs)
                object.object = "wsArea";
        }
        if (message.carryOver != null && message.hasOwnProperty("carryOver")) {
            object.carryOver = $root.ProtoCarryOver.toObject(message.carryOver, options);
            if (options.oneofs)
                object.object = "carryOver";
        }
        if (message.subTotal != null && message.hasOwnProperty("subTotal")) {
            object.subTotal = $root.ProtoSubTotal.toObject(message.subTotal, options);
            if (options.oneofs)
                object.object = "subTotal";
        }
        if (message.loop != null && message.hasOwnProperty("loop")) {
            object.loop = $root.ProtoLoop.toObject(message.loop, options);
            if (options.oneofs)
                object.object = "loop";
        }
        if (message.loopEntry != null && message.hasOwnProperty("loopEntry")) {
            object.loopEntry = $root.ProtoLoopEntry.toObject(message.loopEntry, options);
            if (options.oneofs)
                object.object = "loopEntry";
        }
        if (message.rule != null && message.hasOwnProperty("rule")) {
            object.rule = $root.ProtoRule.toObject(message.rule, options);
            if (options.oneofs)
                object.object = "rule";
        }
        if (message.layout != null && message.hasOwnProperty("layout")) {
            object.layout = $root.ProtoLayout.toObject(message.layout, options);
            if (options.oneofs)
                object.object = "layout";
        }
        if (message.advancedIllustrationArea != null && message.hasOwnProperty("advancedIllustrationArea")) {
            object.advancedIllustrationArea = $root.ProtoAdvancedIllustrationArea.toObject(message.advancedIllustrationArea, options);
            if (options.oneofs)
                object.object = "advancedIllustrationArea";
        }
        if (message.adjustHorizontally != null && message.hasOwnProperty("adjustHorizontally")) {
            object.adjustHorizontally = $root.ProtoAdjustHorizontally.toObject(message.adjustHorizontally, options);
            if (options.oneofs)
                object.object = "adjustHorizontally";
        }
        if (message.doctypeScript != null && message.hasOwnProperty("doctypeScript")) {
            object.doctypeScript = $root.ProtoDoctypeScript.toObject(message.doctypeScript, options);
            if (options.oneofs)
                object.object = "doctypeScript";
        }
        if (message.dmScript != null && message.hasOwnProperty("dmScript")) {
            object.dmScript = $root.ProtoDmScript.toObject(message.dmScript, options);
            if (options.oneofs)
                object.object = "dmScript";
        }
        if (message.dynamicTemplate != null && message.hasOwnProperty("dynamicTemplate")) {
            object.dynamicTemplate = $root.ProtoDynamicTemplate.toObject(message.dynamicTemplate, options);
            if (options.oneofs)
                object.object = "dynamicTemplate";
        }
        if (message.selection != null && message.hasOwnProperty("selection")) {
            object.selection = $root.ProtoSelection.toObject(message.selection, options);
            if (options.oneofs)
                object.object = "selection";
        }
        if (message.selectionEntry != null && message.hasOwnProperty("selectionEntry")) {
            object.selectionEntry = $root.ProtoSelectionEntry.toObject(message.selectionEntry, options);
            if (options.oneofs)
                object.object = "selectionEntry";
        }
        if (message.condition != null && message.hasOwnProperty("condition")) {
            object.condition = $root.ProtoCondition.toObject(message.condition, options);
            if (options.oneofs)
                object.object = "condition";
        }
        if (message.pageCondition != null && message.hasOwnProperty("pageCondition")) {
            object.pageCondition = $root.ProtoPageCondition.toObject(message.pageCondition, options);
            if (options.oneofs)
                object.object = "pageCondition";
        }
        if (message.locale != null && message.hasOwnProperty("locale")) {
            object.locale = $root.ProtoLocale.toObject(message.locale, options);
            if (options.oneofs)
                object.object = "locale";
        }
        if (message.tag != null && message.hasOwnProperty("tag")) {
            object.tag = $root.ProtoTag.toObject(message.tag, options);
            if (options.oneofs)
                object.object = "tag";
        }
        if (message.paragraphSetDefault != null && message.hasOwnProperty("paragraphSetDefault")) {
            object.paragraphSetDefault = $root.ProtoParagraphSetDefault.toObject(message.paragraphSetDefault, options);
            if (options.oneofs)
                object.object = "paragraphSetDefault";
        }
        if (message.inputFieldText != null && message.hasOwnProperty("inputFieldText")) {
            object.inputFieldText = $root.ProtoInputFieldText.toObject(message.inputFieldText, options);
            if (options.oneofs)
                object.object = "inputFieldText";
        }
        if (message.inputFieldDate != null && message.hasOwnProperty("inputFieldDate")) {
            object.inputFieldDate = $root.ProtoInputFieldDate.toObject(message.inputFieldDate, options);
            if (options.oneofs)
                object.object = "inputFieldDate";
        }
        if (message.inputFieldCheckbox != null && message.hasOwnProperty("inputFieldCheckbox")) {
            object.inputFieldCheckbox = $root.ProtoInputFieldCheckbox.toObject(message.inputFieldCheckbox, options);
            if (options.oneofs)
                object.object = "inputFieldCheckbox";
        }
        if (message.inputFieldLabel != null && message.hasOwnProperty("inputFieldLabel")) {
            object.inputFieldLabel = $root.ProtoInputFieldLabel.toObject(message.inputFieldLabel, options);
            if (options.oneofs)
                object.object = "inputFieldLabel";
        }
        if (message.inputFieldDropdown != null && message.hasOwnProperty("inputFieldDropdown")) {
            object.inputFieldDropdown = $root.ProtoInputFieldDropdown.toObject(message.inputFieldDropdown, options);
            if (options.oneofs)
                object.object = "inputFieldDropdown";
        }
        return object;
    };

    /**
     * Converts this Node to JSON.
     * @function toJSON
     * @memberof Node
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    Node.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for Node
     * @function getTypeUrl
     * @memberof Node
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    Node.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/Node";
    };

    return Node;
})();

/**
 * NodeType enum.
 * @name NodeType
 * @enum {number}
 * @property {number} DOCUMENT_ELEMENT_BRANCH_DOCUMENT_ELEMENT=0 DOCUMENT_ELEMENT_BRANCH_DOCUMENT_ELEMENT value
 * @property {number} DOCUMENT_ELEMENT_BRICK_REFERENCE=1 DOCUMENT_ELEMENT_BRICK_REFERENCE value
 * @property {number} DOCUMENT_ELEMENT_BRICK=2 DOCUMENT_ELEMENT_BRICK value
 * @property {number} DOCUMENT_ELEMENT_DOCUMENT_ELEMENT=3 DOCUMENT_ELEMENT_DOCUMENT_ELEMENT value
 * @property {number} DOCUMENT_ELEMENT_LINEBREAK=4 DOCUMENT_ELEMENT_LINEBREAK value
 * @property {number} DOCUMENT_ELEMENT_LIST_SETTING=6 DOCUMENT_ELEMENT_LIST_SETTING value
 * @property {number} DOCUMENT_ELEMENT_PARAGRAPH_FORMAT=7 DOCUMENT_ELEMENT_PARAGRAPH_FORMAT value
 * @property {number} DOCUMENT_ELEMENT_PARAGRAPH=8 DOCUMENT_ELEMENT_PARAGRAPH value
 * @property {number} DOCUMENT_ELEMENT_SECTION=9 DOCUMENT_ELEMENT_SECTION value
 * @property {number} DOCUMENT_ELEMENT_SPAN=10 DOCUMENT_ELEMENT_SPAN value
 * @property {number} DOCUMENT_ELEMENT_TABLE=11 DOCUMENT_ELEMENT_TABLE value
 * @property {number} DOCUMENT_ELEMENT_TABLE_CELL=12 DOCUMENT_ELEMENT_TABLE_CELL value
 * @property {number} DOCUMENT_ELEMENT_TABLE_ROW=13 DOCUMENT_ELEMENT_TABLE_ROW value
 * @property {number} DOCUMENT_ELEMENT_TEMPLATE=15 DOCUMENT_ELEMENT_TEMPLATE value
 * @property {number} DOCUMENT_ELEMENT_TEXT=16 DOCUMENT_ELEMENT_TEXT value
 * @property {number} DOCUMENT_ELEMENT_COLOR_DEF=19 DOCUMENT_ELEMENT_COLOR_DEF value
 * @property {number} DOCUMENT_ELEMENT_IMAGE=30 DOCUMENT_ELEMENT_IMAGE value
 * @property {number} DOCUMENT_ELEMENT_NAMED_STRING=34 DOCUMENT_ELEMENT_NAMED_STRING value
 * @property {number} DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP=35 DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP value
 * @property {number} DOCUMENT_ELEMENT_TABLE_CONFIG=36 DOCUMENT_ELEMENT_TABLE_CONFIG value
 * @property {number} DOCUMENT_ELEMENT_TABLE_CELL_CONFIG=37 DOCUMENT_ELEMENT_TABLE_CELL_CONFIG value
 * @property {number} DOCUMENT_ELEMENT_TABLE_ROW_CONFIG=38 DOCUMENT_ELEMENT_TABLE_ROW_CONFIG value
 * @property {number} DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP_CONFIG=39 DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP_CONFIG value
 * @property {number} DOCUMENT_ELEMENT_LINK=40 DOCUMENT_ELEMENT_LINK value
 * @property {number} DOCUMENT_ELEMENT_DIRECTORY=41 DOCUMENT_ELEMENT_DIRECTORY value
 * @property {number} DOCUMENT_ELEMENT_TEXT_BRICK=42 DOCUMENT_ELEMENT_TEXT_BRICK value
 * @property {number} DOCUMENT_ELEMENT_VARIABLE=44 DOCUMENT_ELEMENT_VARIABLE value
 * @property {number} DOCUMENT_ELEMENT_SPACE_VERTICALLY=45 DOCUMENT_ELEMENT_SPACE_VERTICALLY value
 * @property {number} DOCUMENT_ELEMENT_FORMATTED=46 DOCUMENT_ELEMENT_FORMATTED value
 * @property {number} DOCUMENT_ELEMENT_APPLY_C_DEF=47 DOCUMENT_ELEMENT_APPLY_C_DEF value
 * @property {number} DOCUMENT_ELEMENT_APPLY_P_DEF=48 DOCUMENT_ELEMENT_APPLY_P_DEF value
 * @property {number} DOCUMENT_ELEMENT_APPLY_PT_CONFIG=49 DOCUMENT_ELEMENT_APPLY_PT_CONFIG value
 * @property {number} DOCUMENT_ELEMENT_APPLY_UL_CONFIG=50 DOCUMENT_ELEMENT_APPLY_UL_CONFIG value
 * @property {number} DOCUMENT_ELEMENT_C_DEF=51 DOCUMENT_ELEMENT_C_DEF value
 * @property {number} DOCUMENT_ELEMENT_P_DEF=52 DOCUMENT_ELEMENT_P_DEF value
 * @property {number} DOCUMENT_ELEMENT_PT_CONFIG=53 DOCUMENT_ELEMENT_PT_CONFIG value
 * @property {number} DOCUMENT_ELEMENT_UL_CONFIG=54 DOCUMENT_ELEMENT_UL_CONFIG value
 * @property {number} DOCUMENT_ELEMENT_NEW_PAGE=55 DOCUMENT_ELEMENT_NEW_PAGE value
 * @property {number} DOCUMENT_ELEMENT_HEADER=56 DOCUMENT_ELEMENT_HEADER value
 * @property {number} DOCUMENT_ELEMENT_FOOTER=57 DOCUMENT_ELEMENT_FOOTER value
 * @property {number} DOCUMENT_ELEMENT_INDENTATION=60 DOCUMENT_ELEMENT_INDENTATION value
 * @property {number} DOCUMENT_ELEMENT_BARCODE=61 DOCUMENT_ELEMENT_BARCODE value
 * @property {number} DOCUMENT_ELEMENT_WS_AREA=62 DOCUMENT_ELEMENT_WS_AREA value
 * @property {number} DOCUMENT_ELEMENT_CARRY_OVER=63 DOCUMENT_ELEMENT_CARRY_OVER value
 * @property {number} DOCUMENT_ELEMENT_SUB_TOTAL=64 DOCUMENT_ELEMENT_SUB_TOTAL value
 * @property {number} DOCUMENT_ELEMENT_LOOP=65 DOCUMENT_ELEMENT_LOOP value
 * @property {number} DOCUMENT_ELEMENT_LOOP_ENTRY=66 DOCUMENT_ELEMENT_LOOP_ENTRY value
 * @property {number} DOCUMENT_ELEMENT_RULE=67 DOCUMENT_ELEMENT_RULE value
 * @property {number} DOCUMENT_ELEMENT_LIST_LEVEL_SETTING=68 DOCUMENT_ELEMENT_LIST_LEVEL_SETTING value
 * @property {number} DOCUMENT_ELEMENT_LAYOUT=69 DOCUMENT_ELEMENT_LAYOUT value
 * @property {number} DOCUMENT_ELEMENT_ADVANCED_ILLUSTRATION_AREA=70 DOCUMENT_ELEMENT_ADVANCED_ILLUSTRATION_AREA value
 * @property {number} DOCUMENT_ELEMENT_ADJUST_HORIZONTALLY=71 DOCUMENT_ELEMENT_ADJUST_HORIZONTALLY value
 * @property {number} DOCUMENT_ELEMENT_DOCTYPE_SCRIPT=72 DOCUMENT_ELEMENT_DOCTYPE_SCRIPT value
 * @property {number} DOCUMENT_ELEMENT_DM_SCRIPT=73 DOCUMENT_ELEMENT_DM_SCRIPT value
 * @property {number} DOCUMENT_ELEMENT_DYNAMIC_TEMPLATE=74 DOCUMENT_ELEMENT_DYNAMIC_TEMPLATE value
 * @property {number} DOCUMENT_ELEMENT_SELECTION=75 DOCUMENT_ELEMENT_SELECTION value
 * @property {number} DOCUMENT_ELEMENT_SELECTION_ENTRY=76 DOCUMENT_ELEMENT_SELECTION_ENTRY value
 * @property {number} DOCUMENT_ELEMENT_CONDITION=77 DOCUMENT_ELEMENT_CONDITION value
 * @property {number} DOCUMENT_ELEMENT_PAGE_CONDITION=78 DOCUMENT_ELEMENT_PAGE_CONDITION value
 * @property {number} DOCUMENT_ELEMENT_LOCALE=79 DOCUMENT_ELEMENT_LOCALE value
 * @property {number} DOCUMENT_ELEMENT_TAG=80 DOCUMENT_ELEMENT_TAG value
 * @property {number} DOCUMENT_ELEMENT_PARAGRAPH_SET_DEFAULT=81 DOCUMENT_ELEMENT_PARAGRAPH_SET_DEFAULT value
 * @property {number} DOCUMENT_ELEMENT_INPUT_FIELD_TEXT=82 DOCUMENT_ELEMENT_INPUT_FIELD_TEXT value
 * @property {number} DOCUMENT_ELEMENT_INPUT_FIELD_DATE=83 DOCUMENT_ELEMENT_INPUT_FIELD_DATE value
 * @property {number} DOCUMENT_ELEMENT_INPUT_FIELD_CHECKBOX=84 DOCUMENT_ELEMENT_INPUT_FIELD_CHECKBOX value
 * @property {number} DOCUMENT_ELEMENT_INPUT_FIELD_LABEL=85 DOCUMENT_ELEMENT_INPUT_FIELD_LABEL value
 * @property {number} DOCUMENT_ELEMENT_INPUT_FIELD_DROPDOWN=86 DOCUMENT_ELEMENT_INPUT_FIELD_DROPDOWN value
 */
$root.NodeType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "DOCUMENT_ELEMENT_BRANCH_DOCUMENT_ELEMENT"] = 0;
    values[valuesById[1] = "DOCUMENT_ELEMENT_BRICK_REFERENCE"] = 1;
    values[valuesById[2] = "DOCUMENT_ELEMENT_BRICK"] = 2;
    values[valuesById[3] = "DOCUMENT_ELEMENT_DOCUMENT_ELEMENT"] = 3;
    values[valuesById[4] = "DOCUMENT_ELEMENT_LINEBREAK"] = 4;
    values[valuesById[6] = "DOCUMENT_ELEMENT_LIST_SETTING"] = 6;
    values[valuesById[7] = "DOCUMENT_ELEMENT_PARAGRAPH_FORMAT"] = 7;
    values[valuesById[8] = "DOCUMENT_ELEMENT_PARAGRAPH"] = 8;
    values[valuesById[9] = "DOCUMENT_ELEMENT_SECTION"] = 9;
    values[valuesById[10] = "DOCUMENT_ELEMENT_SPAN"] = 10;
    values[valuesById[11] = "DOCUMENT_ELEMENT_TABLE"] = 11;
    values[valuesById[12] = "DOCUMENT_ELEMENT_TABLE_CELL"] = 12;
    values[valuesById[13] = "DOCUMENT_ELEMENT_TABLE_ROW"] = 13;
    values[valuesById[15] = "DOCUMENT_ELEMENT_TEMPLATE"] = 15;
    values[valuesById[16] = "DOCUMENT_ELEMENT_TEXT"] = 16;
    values[valuesById[19] = "DOCUMENT_ELEMENT_COLOR_DEF"] = 19;
    values[valuesById[30] = "DOCUMENT_ELEMENT_IMAGE"] = 30;
    values[valuesById[34] = "DOCUMENT_ELEMENT_NAMED_STRING"] = 34;
    values[valuesById[35] = "DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP"] = 35;
    values[valuesById[36] = "DOCUMENT_ELEMENT_TABLE_CONFIG"] = 36;
    values[valuesById[37] = "DOCUMENT_ELEMENT_TABLE_CELL_CONFIG"] = 37;
    values[valuesById[38] = "DOCUMENT_ELEMENT_TABLE_ROW_CONFIG"] = 38;
    values[valuesById[39] = "DOCUMENT_ELEMENT_TABLE_CONTENT_GROUP_CONFIG"] = 39;
    values[valuesById[40] = "DOCUMENT_ELEMENT_LINK"] = 40;
    values[valuesById[41] = "DOCUMENT_ELEMENT_DIRECTORY"] = 41;
    values[valuesById[42] = "DOCUMENT_ELEMENT_TEXT_BRICK"] = 42;
    values[valuesById[44] = "DOCUMENT_ELEMENT_VARIABLE"] = 44;
    values[valuesById[45] = "DOCUMENT_ELEMENT_SPACE_VERTICALLY"] = 45;
    values[valuesById[46] = "DOCUMENT_ELEMENT_FORMATTED"] = 46;
    values[valuesById[47] = "DOCUMENT_ELEMENT_APPLY_C_DEF"] = 47;
    values[valuesById[48] = "DOCUMENT_ELEMENT_APPLY_P_DEF"] = 48;
    values[valuesById[49] = "DOCUMENT_ELEMENT_APPLY_PT_CONFIG"] = 49;
    values[valuesById[50] = "DOCUMENT_ELEMENT_APPLY_UL_CONFIG"] = 50;
    values[valuesById[51] = "DOCUMENT_ELEMENT_C_DEF"] = 51;
    values[valuesById[52] = "DOCUMENT_ELEMENT_P_DEF"] = 52;
    values[valuesById[53] = "DOCUMENT_ELEMENT_PT_CONFIG"] = 53;
    values[valuesById[54] = "DOCUMENT_ELEMENT_UL_CONFIG"] = 54;
    values[valuesById[55] = "DOCUMENT_ELEMENT_NEW_PAGE"] = 55;
    values[valuesById[56] = "DOCUMENT_ELEMENT_HEADER"] = 56;
    values[valuesById[57] = "DOCUMENT_ELEMENT_FOOTER"] = 57;
    values[valuesById[60] = "DOCUMENT_ELEMENT_INDENTATION"] = 60;
    values[valuesById[61] = "DOCUMENT_ELEMENT_BARCODE"] = 61;
    values[valuesById[62] = "DOCUMENT_ELEMENT_WS_AREA"] = 62;
    values[valuesById[63] = "DOCUMENT_ELEMENT_CARRY_OVER"] = 63;
    values[valuesById[64] = "DOCUMENT_ELEMENT_SUB_TOTAL"] = 64;
    values[valuesById[65] = "DOCUMENT_ELEMENT_LOOP"] = 65;
    values[valuesById[66] = "DOCUMENT_ELEMENT_LOOP_ENTRY"] = 66;
    values[valuesById[67] = "DOCUMENT_ELEMENT_RULE"] = 67;
    values[valuesById[68] = "DOCUMENT_ELEMENT_LIST_LEVEL_SETTING"] = 68;
    values[valuesById[69] = "DOCUMENT_ELEMENT_LAYOUT"] = 69;
    values[valuesById[70] = "DOCUMENT_ELEMENT_ADVANCED_ILLUSTRATION_AREA"] = 70;
    values[valuesById[71] = "DOCUMENT_ELEMENT_ADJUST_HORIZONTALLY"] = 71;
    values[valuesById[72] = "DOCUMENT_ELEMENT_DOCTYPE_SCRIPT"] = 72;
    values[valuesById[73] = "DOCUMENT_ELEMENT_DM_SCRIPT"] = 73;
    values[valuesById[74] = "DOCUMENT_ELEMENT_DYNAMIC_TEMPLATE"] = 74;
    values[valuesById[75] = "DOCUMENT_ELEMENT_SELECTION"] = 75;
    values[valuesById[76] = "DOCUMENT_ELEMENT_SELECTION_ENTRY"] = 76;
    values[valuesById[77] = "DOCUMENT_ELEMENT_CONDITION"] = 77;
    values[valuesById[78] = "DOCUMENT_ELEMENT_PAGE_CONDITION"] = 78;
    values[valuesById[79] = "DOCUMENT_ELEMENT_LOCALE"] = 79;
    values[valuesById[80] = "DOCUMENT_ELEMENT_TAG"] = 80;
    values[valuesById[81] = "DOCUMENT_ELEMENT_PARAGRAPH_SET_DEFAULT"] = 81;
    values[valuesById[82] = "DOCUMENT_ELEMENT_INPUT_FIELD_TEXT"] = 82;
    values[valuesById[83] = "DOCUMENT_ELEMENT_INPUT_FIELD_DATE"] = 83;
    values[valuesById[84] = "DOCUMENT_ELEMENT_INPUT_FIELD_CHECKBOX"] = 84;
    values[valuesById[85] = "DOCUMENT_ELEMENT_INPUT_FIELD_LABEL"] = 85;
    values[valuesById[86] = "DOCUMENT_ELEMENT_INPUT_FIELD_DROPDOWN"] = 86;
    return values;
})();

/**
 * ProtoImageScaleType enum.
 * @name ProtoImageScaleType
 * @enum {number}
 * @property {number} IMAGE_SCALE_TYPE_DO_NOT_USE_AT_ALL=0 IMAGE_SCALE_TYPE_DO_NOT_USE_AT_ALL value
 * @property {number} IMAGE_SCALE_TYPE_RELATIVE=1 IMAGE_SCALE_TYPE_RELATIVE value
 * @property {number} IMAGE_SCALE_TYPE_ABSOLUTE=2 IMAGE_SCALE_TYPE_ABSOLUTE value
 * @property {number} IMAGE_SCALE_TYPE_RELATIVE_TO_COLUMN=3 IMAGE_SCALE_TYPE_RELATIVE_TO_COLUMN value
 */
$root.ProtoImageScaleType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "IMAGE_SCALE_TYPE_DO_NOT_USE_AT_ALL"] = 0;
    values[valuesById[1] = "IMAGE_SCALE_TYPE_RELATIVE"] = 1;
    values[valuesById[2] = "IMAGE_SCALE_TYPE_ABSOLUTE"] = 2;
    values[valuesById[3] = "IMAGE_SCALE_TYPE_RELATIVE_TO_COLUMN"] = 3;
    return values;
})();

/**
 * ProtoImageUAMode enum.
 * @name ProtoImageUAMode
 * @enum {number}
 * @property {number} IMAGE_UA_MODE_DO_NOT_USE_AT_ALL=0 IMAGE_UA_MODE_DO_NOT_USE_AT_ALL value
 * @property {number} IMAGE_UA_MODE_INHERITED=1 IMAGE_UA_MODE_INHERITED value
 * @property {number} IMAGE_UA_MODE_SIMPLE=2 IMAGE_UA_MODE_SIMPLE value
 * @property {number} IMAGE_UA_MODE_ADVANCED=3 IMAGE_UA_MODE_ADVANCED value
 */
$root.ProtoImageUAMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "IMAGE_UA_MODE_DO_NOT_USE_AT_ALL"] = 0;
    values[valuesById[1] = "IMAGE_UA_MODE_INHERITED"] = 1;
    values[valuesById[2] = "IMAGE_UA_MODE_SIMPLE"] = 2;
    values[valuesById[3] = "IMAGE_UA_MODE_ADVANCED"] = 3;
    return values;
})();

/**
 * ProtoImageContentType enum.
 * @name ProtoImageContentType
 * @enum {number}
 * @property {number} IMAGE_CONTENT_UUID_REFERENCE_INLINE=0 IMAGE_CONTENT_UUID_REFERENCE_INLINE value
 * @property {number} IMAGE_CONTENT_UUID_REFERENCE_LOCAL=1 IMAGE_CONTENT_UUID_REFERENCE_LOCAL value
 * @property {number} IMAGE_CONTENT_UUID_REFERENCE_GLOBAL=2 IMAGE_CONTENT_UUID_REFERENCE_GLOBAL value
 * @property {number} IMAGE_CONTENT_DMSCRIPT=3 IMAGE_CONTENT_DMSCRIPT value
 * @property {number} IMAGE_CONTENT_IMAGE_DATA=4 IMAGE_CONTENT_IMAGE_DATA value
 */
$root.ProtoImageContentType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "IMAGE_CONTENT_UUID_REFERENCE_INLINE"] = 0;
    values[valuesById[1] = "IMAGE_CONTENT_UUID_REFERENCE_LOCAL"] = 1;
    values[valuesById[2] = "IMAGE_CONTENT_UUID_REFERENCE_GLOBAL"] = 2;
    values[valuesById[3] = "IMAGE_CONTENT_DMSCRIPT"] = 3;
    values[valuesById[4] = "IMAGE_CONTENT_IMAGE_DATA"] = 4;
    return values;
})();

$root.ProtoImage = (function() {

    /**
     * Properties of a ProtoImage.
     * @name IProtoImage
     * @interface IProtoImage
     * @property {IProtoDocumentElement|null} [parent] ProtoImage parent
     * @property {string|null} [alt] ProtoImage alt
     * @property {string|null} [name] ProtoImage name
     * @property {string|null} [src] ProtoImage src
     * @property {string|null} [filename] ProtoImage filename
     * @property {IProtoBoxedDouble|null} [scale] ProtoImage scale
     * @property {IProtoBoxedDouble|null} [columnScale] ProtoImage columnScale
     * @property {IProtoBoxedMeasure|null} [width] ProtoImage width
     * @property {IProtoBoxedMeasure|null} [height] ProtoImage height
     * @property {IProtoBoxedMeasure|null} [x] ProtoImage x
     * @property {IProtoBoxedMeasure|null} [y] ProtoImage y
     * @property {IProtoBoxedBool|null} [positionAbsolute] ProtoImage positionAbsolute
     * @property {number|null} [rotation] ProtoImage rotation
     * @property {IProtoFlipSettings|null} [flipSettings] ProtoImage flipSettings
     * @property {IProtoCropSettings|null} [cropSettings] ProtoImage cropSettings
     * @property {IProtoAdvancedIllustrationAreaImageSettings|null} [aia] ProtoImage aia
     * @property {string|null} [uuid] ProtoImage uuid
     * @property {ProtoImageReferencePoint|null} [referencePoint] ProtoImage referencePoint
     * @property {string|null} [hyperlink] ProtoImage hyperlink
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoImage comChannelUUIDs
     * @property {ProtoImageContentType|null} [imageContentType] ProtoImage imageContentType
     * @property {string|null} [imageContent] ProtoImage imageContent
     * @property {ProtoImageScaleType|null} [scaleType] ProtoImage scaleType
     * @property {ProtoImageUAMode|null} [uaMode] ProtoImage uaMode
     * @property {string|null} [uaDescription] ProtoImage uaDescription
     * @property {IProtoBoxedBool|null} [leftBorderIsLeftMeasure] ProtoImage leftBorderIsLeftMeasure
     */

    /**
     * Constructs a new ProtoImage.
     * @name ProtoImage
     * @classdesc Represents a ProtoImage.
     * @implements IProtoImage
     * @constructor
     * @param {IProtoImage=} [properties] Properties to set
     */
    function ProtoImage(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoImage parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.parent = null;

    /**
     * ProtoImage alt.
     * @member {string} alt
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.alt = "";

    /**
     * ProtoImage name.
     * @member {string} name
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.name = "";

    /**
     * ProtoImage src.
     * @member {string} src
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.src = "";

    /**
     * ProtoImage filename.
     * @member {string} filename
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.filename = "";

    /**
     * ProtoImage scale.
     * @member {IProtoBoxedDouble|null|undefined} scale
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.scale = null;

    /**
     * ProtoImage columnScale.
     * @member {IProtoBoxedDouble|null|undefined} columnScale
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.columnScale = null;

    /**
     * ProtoImage width.
     * @member {IProtoBoxedMeasure|null|undefined} width
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.width = null;

    /**
     * ProtoImage height.
     * @member {IProtoBoxedMeasure|null|undefined} height
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.height = null;

    /**
     * ProtoImage x.
     * @member {IProtoBoxedMeasure|null|undefined} x
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.x = null;

    /**
     * ProtoImage y.
     * @member {IProtoBoxedMeasure|null|undefined} y
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.y = null;

    /**
     * ProtoImage positionAbsolute.
     * @member {IProtoBoxedBool|null|undefined} positionAbsolute
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.positionAbsolute = null;

    /**
     * ProtoImage rotation.
     * @member {number} rotation
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.rotation = 0;

    /**
     * ProtoImage flipSettings.
     * @member {IProtoFlipSettings|null|undefined} flipSettings
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.flipSettings = null;

    /**
     * ProtoImage cropSettings.
     * @member {IProtoCropSettings|null|undefined} cropSettings
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.cropSettings = null;

    /**
     * ProtoImage aia.
     * @member {IProtoAdvancedIllustrationAreaImageSettings|null|undefined} aia
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.aia = null;

    /**
     * ProtoImage uuid.
     * @member {string} uuid
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.uuid = "";

    /**
     * ProtoImage referencePoint.
     * @member {ProtoImageReferencePoint} referencePoint
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.referencePoint = 0;

    /**
     * ProtoImage hyperlink.
     * @member {string} hyperlink
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.hyperlink = "";

    /**
     * ProtoImage comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoImage imageContentType.
     * @member {ProtoImageContentType} imageContentType
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.imageContentType = 0;

    /**
     * ProtoImage imageContent.
     * @member {string} imageContent
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.imageContent = "";

    /**
     * ProtoImage scaleType.
     * @member {ProtoImageScaleType} scaleType
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.scaleType = 0;

    /**
     * ProtoImage uaMode.
     * @member {ProtoImageUAMode} uaMode
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.uaMode = 0;

    /**
     * ProtoImage uaDescription.
     * @member {string} uaDescription
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.uaDescription = "";

    /**
     * ProtoImage leftBorderIsLeftMeasure.
     * @member {IProtoBoxedBool|null|undefined} leftBorderIsLeftMeasure
     * @memberof ProtoImage
     * @instance
     */
    ProtoImage.prototype.leftBorderIsLeftMeasure = null;

    /**
     * Creates a new ProtoImage instance using the specified properties.
     * @function create
     * @memberof ProtoImage
     * @static
     * @param {IProtoImage=} [properties] Properties to set
     * @returns {ProtoImage} ProtoImage instance
     */
    ProtoImage.create = function create(properties) {
        return new ProtoImage(properties);
    };

    /**
     * Encodes the specified ProtoImage message. Does not implicitly {@link ProtoImage.verify|verify} messages.
     * @function encode
     * @memberof ProtoImage
     * @static
     * @param {IProtoImage} message ProtoImage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoImage.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.alt != null && Object.hasOwnProperty.call(message, "alt"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.alt);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.src != null && Object.hasOwnProperty.call(message, "src"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.src);
        if (message.filename != null && Object.hasOwnProperty.call(message, "filename"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.filename);
        if (message.scale != null && Object.hasOwnProperty.call(message, "scale"))
            $root.ProtoBoxedDouble.encode(message.scale, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.columnScale != null && Object.hasOwnProperty.call(message, "columnScale"))
            $root.ProtoBoxedDouble.encode(message.columnScale, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoBoxedMeasure.encode(message.width, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
            $root.ProtoBoxedMeasure.encode(message.height, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.x != null && Object.hasOwnProperty.call(message, "x"))
            $root.ProtoBoxedMeasure.encode(message.x, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
        if (message.y != null && Object.hasOwnProperty.call(message, "y"))
            $root.ProtoBoxedMeasure.encode(message.y, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
        if (message.positionAbsolute != null && Object.hasOwnProperty.call(message, "positionAbsolute"))
            $root.ProtoBoxedBool.encode(message.positionAbsolute, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
        if (message.rotation != null && Object.hasOwnProperty.call(message, "rotation"))
            writer.uint32(/* id 13, wireType 1 =*/105).double(message.rotation);
        if (message.flipSettings != null && Object.hasOwnProperty.call(message, "flipSettings"))
            $root.ProtoFlipSettings.encode(message.flipSettings, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.cropSettings != null && Object.hasOwnProperty.call(message, "cropSettings"))
            $root.ProtoCropSettings.encode(message.cropSettings, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
        if (message.aia != null && Object.hasOwnProperty.call(message, "aia"))
            $root.ProtoAdvancedIllustrationAreaImageSettings.encode(message.aia, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 17, wireType 2 =*/138).string(message.uuid);
        if (message.referencePoint != null && Object.hasOwnProperty.call(message, "referencePoint"))
            writer.uint32(/* id 18, wireType 0 =*/144).int32(message.referencePoint);
        if (message.hyperlink != null && Object.hasOwnProperty.call(message, "hyperlink"))
            writer.uint32(/* id 19, wireType 2 =*/154).string(message.hyperlink);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 20, wireType 2 =*/162).string(message.comChannelUUIDs[i]);
        if (message.imageContentType != null && Object.hasOwnProperty.call(message, "imageContentType"))
            writer.uint32(/* id 21, wireType 0 =*/168).int32(message.imageContentType);
        if (message.imageContent != null && Object.hasOwnProperty.call(message, "imageContent"))
            writer.uint32(/* id 22, wireType 2 =*/178).string(message.imageContent);
        if (message.scaleType != null && Object.hasOwnProperty.call(message, "scaleType"))
            writer.uint32(/* id 23, wireType 0 =*/184).int32(message.scaleType);
        if (message.uaMode != null && Object.hasOwnProperty.call(message, "uaMode"))
            writer.uint32(/* id 24, wireType 0 =*/192).int32(message.uaMode);
        if (message.uaDescription != null && Object.hasOwnProperty.call(message, "uaDescription"))
            writer.uint32(/* id 25, wireType 2 =*/202).string(message.uaDescription);
        if (message.leftBorderIsLeftMeasure != null && Object.hasOwnProperty.call(message, "leftBorderIsLeftMeasure"))
            $root.ProtoBoxedBool.encode(message.leftBorderIsLeftMeasure, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoImage message, length delimited. Does not implicitly {@link ProtoImage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoImage
     * @static
     * @param {IProtoImage} message ProtoImage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoImage.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoImage message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoImage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoImage} ProtoImage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoImage.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoImage();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.alt = reader.string();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 4: {
                    message.src = reader.string();
                    break;
                }
            case 5: {
                    message.filename = reader.string();
                    break;
                }
            case 6: {
                    message.scale = $root.ProtoBoxedDouble.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.columnScale = $root.ProtoBoxedDouble.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.width = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.height = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 10: {
                    message.x = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 11: {
                    message.y = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 12: {
                    message.positionAbsolute = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 13: {
                    message.rotation = reader.double();
                    break;
                }
            case 14: {
                    message.flipSettings = $root.ProtoFlipSettings.decode(reader, reader.uint32());
                    break;
                }
            case 15: {
                    message.cropSettings = $root.ProtoCropSettings.decode(reader, reader.uint32());
                    break;
                }
            case 16: {
                    message.aia = $root.ProtoAdvancedIllustrationAreaImageSettings.decode(reader, reader.uint32());
                    break;
                }
            case 17: {
                    message.uuid = reader.string();
                    break;
                }
            case 18: {
                    message.referencePoint = reader.int32();
                    break;
                }
            case 19: {
                    message.hyperlink = reader.string();
                    break;
                }
            case 20: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 21: {
                    message.imageContentType = reader.int32();
                    break;
                }
            case 22: {
                    message.imageContent = reader.string();
                    break;
                }
            case 23: {
                    message.scaleType = reader.int32();
                    break;
                }
            case 24: {
                    message.uaMode = reader.int32();
                    break;
                }
            case 25: {
                    message.uaDescription = reader.string();
                    break;
                }
            case 26: {
                    message.leftBorderIsLeftMeasure = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoImage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoImage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoImage} ProtoImage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoImage.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoImage message.
     * @function verify
     * @memberof ProtoImage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoImage.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.alt != null && message.hasOwnProperty("alt"))
            if (!$util.isString(message.alt))
                return "alt: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.src != null && message.hasOwnProperty("src"))
            if (!$util.isString(message.src))
                return "src: string expected";
        if (message.filename != null && message.hasOwnProperty("filename"))
            if (!$util.isString(message.filename))
                return "filename: string expected";
        if (message.scale != null && message.hasOwnProperty("scale")) {
            var error = $root.ProtoBoxedDouble.verify(message.scale);
            if (error)
                return "scale." + error;
        }
        if (message.columnScale != null && message.hasOwnProperty("columnScale")) {
            var error = $root.ProtoBoxedDouble.verify(message.columnScale);
            if (error)
                return "columnScale." + error;
        }
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoBoxedMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.height != null && message.hasOwnProperty("height")) {
            var error = $root.ProtoBoxedMeasure.verify(message.height);
            if (error)
                return "height." + error;
        }
        if (message.x != null && message.hasOwnProperty("x")) {
            var error = $root.ProtoBoxedMeasure.verify(message.x);
            if (error)
                return "x." + error;
        }
        if (message.y != null && message.hasOwnProperty("y")) {
            var error = $root.ProtoBoxedMeasure.verify(message.y);
            if (error)
                return "y." + error;
        }
        if (message.positionAbsolute != null && message.hasOwnProperty("positionAbsolute")) {
            var error = $root.ProtoBoxedBool.verify(message.positionAbsolute);
            if (error)
                return "positionAbsolute." + error;
        }
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            if (typeof message.rotation !== "number")
                return "rotation: number expected";
        if (message.flipSettings != null && message.hasOwnProperty("flipSettings")) {
            var error = $root.ProtoFlipSettings.verify(message.flipSettings);
            if (error)
                return "flipSettings." + error;
        }
        if (message.cropSettings != null && message.hasOwnProperty("cropSettings")) {
            var error = $root.ProtoCropSettings.verify(message.cropSettings);
            if (error)
                return "cropSettings." + error;
        }
        if (message.aia != null && message.hasOwnProperty("aia")) {
            var error = $root.ProtoAdvancedIllustrationAreaImageSettings.verify(message.aia);
            if (error)
                return "aia." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.referencePoint != null && message.hasOwnProperty("referencePoint"))
            switch (message.referencePoint) {
            default:
                return "referencePoint: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.hyperlink != null && message.hasOwnProperty("hyperlink"))
            if (!$util.isString(message.hyperlink))
                return "hyperlink: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.imageContentType != null && message.hasOwnProperty("imageContentType"))
            switch (message.imageContentType) {
            default:
                return "imageContentType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.imageContent != null && message.hasOwnProperty("imageContent"))
            if (!$util.isString(message.imageContent))
                return "imageContent: string expected";
        if (message.scaleType != null && message.hasOwnProperty("scaleType"))
            switch (message.scaleType) {
            default:
                return "scaleType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.uaMode != null && message.hasOwnProperty("uaMode"))
            switch (message.uaMode) {
            default:
                return "uaMode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.uaDescription != null && message.hasOwnProperty("uaDescription"))
            if (!$util.isString(message.uaDescription))
                return "uaDescription: string expected";
        if (message.leftBorderIsLeftMeasure != null && message.hasOwnProperty("leftBorderIsLeftMeasure")) {
            var error = $root.ProtoBoxedBool.verify(message.leftBorderIsLeftMeasure);
            if (error)
                return "leftBorderIsLeftMeasure." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoImage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoImage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoImage} ProtoImage
     */
    ProtoImage.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoImage)
            return object;
        var message = new $root.ProtoImage();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoImage.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.alt != null)
            message.alt = String(object.alt);
        if (object.name != null)
            message.name = String(object.name);
        if (object.src != null)
            message.src = String(object.src);
        if (object.filename != null)
            message.filename = String(object.filename);
        if (object.scale != null) {
            if (typeof object.scale !== "object")
                throw TypeError(".ProtoImage.scale: object expected");
            message.scale = $root.ProtoBoxedDouble.fromObject(object.scale);
        }
        if (object.columnScale != null) {
            if (typeof object.columnScale !== "object")
                throw TypeError(".ProtoImage.columnScale: object expected");
            message.columnScale = $root.ProtoBoxedDouble.fromObject(object.columnScale);
        }
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoImage.width: object expected");
            message.width = $root.ProtoBoxedMeasure.fromObject(object.width);
        }
        if (object.height != null) {
            if (typeof object.height !== "object")
                throw TypeError(".ProtoImage.height: object expected");
            message.height = $root.ProtoBoxedMeasure.fromObject(object.height);
        }
        if (object.x != null) {
            if (typeof object.x !== "object")
                throw TypeError(".ProtoImage.x: object expected");
            message.x = $root.ProtoBoxedMeasure.fromObject(object.x);
        }
        if (object.y != null) {
            if (typeof object.y !== "object")
                throw TypeError(".ProtoImage.y: object expected");
            message.y = $root.ProtoBoxedMeasure.fromObject(object.y);
        }
        if (object.positionAbsolute != null) {
            if (typeof object.positionAbsolute !== "object")
                throw TypeError(".ProtoImage.positionAbsolute: object expected");
            message.positionAbsolute = $root.ProtoBoxedBool.fromObject(object.positionAbsolute);
        }
        if (object.rotation != null)
            message.rotation = Number(object.rotation);
        if (object.flipSettings != null) {
            if (typeof object.flipSettings !== "object")
                throw TypeError(".ProtoImage.flipSettings: object expected");
            message.flipSettings = $root.ProtoFlipSettings.fromObject(object.flipSettings);
        }
        if (object.cropSettings != null) {
            if (typeof object.cropSettings !== "object")
                throw TypeError(".ProtoImage.cropSettings: object expected");
            message.cropSettings = $root.ProtoCropSettings.fromObject(object.cropSettings);
        }
        if (object.aia != null) {
            if (typeof object.aia !== "object")
                throw TypeError(".ProtoImage.aia: object expected");
            message.aia = $root.ProtoAdvancedIllustrationAreaImageSettings.fromObject(object.aia);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        switch (object.referencePoint) {
        default:
            if (typeof object.referencePoint === "number") {
                message.referencePoint = object.referencePoint;
                break;
            }
            break;
        case "REF_POINT_DO_NOT_USE_AT_ALL":
        case 0:
            message.referencePoint = 0;
            break;
        case "REF_POINT_BOTTOM_LEFT":
        case 1:
            message.referencePoint = 1;
            break;
        case "REF_POINT_TOP_LEFT":
        case 2:
            message.referencePoint = 2;
            break;
        case "REF_POINT_CENTER":
        case 3:
            message.referencePoint = 3;
            break;
        case "REF_POINT_BOTTOM_RIGHT":
        case 4:
            message.referencePoint = 4;
            break;
        case "REF_POINT_TOP_RIGHT":
        case 5:
            message.referencePoint = 5;
            break;
        }
        if (object.hyperlink != null)
            message.hyperlink = String(object.hyperlink);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoImage.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        switch (object.imageContentType) {
        default:
            if (typeof object.imageContentType === "number") {
                message.imageContentType = object.imageContentType;
                break;
            }
            break;
        case "IMAGE_CONTENT_UUID_REFERENCE_INLINE":
        case 0:
            message.imageContentType = 0;
            break;
        case "IMAGE_CONTENT_UUID_REFERENCE_LOCAL":
        case 1:
            message.imageContentType = 1;
            break;
        case "IMAGE_CONTENT_UUID_REFERENCE_GLOBAL":
        case 2:
            message.imageContentType = 2;
            break;
        case "IMAGE_CONTENT_DMSCRIPT":
        case 3:
            message.imageContentType = 3;
            break;
        case "IMAGE_CONTENT_IMAGE_DATA":
        case 4:
            message.imageContentType = 4;
            break;
        }
        if (object.imageContent != null)
            message.imageContent = String(object.imageContent);
        switch (object.scaleType) {
        default:
            if (typeof object.scaleType === "number") {
                message.scaleType = object.scaleType;
                break;
            }
            break;
        case "IMAGE_SCALE_TYPE_DO_NOT_USE_AT_ALL":
        case 0:
            message.scaleType = 0;
            break;
        case "IMAGE_SCALE_TYPE_RELATIVE":
        case 1:
            message.scaleType = 1;
            break;
        case "IMAGE_SCALE_TYPE_ABSOLUTE":
        case 2:
            message.scaleType = 2;
            break;
        case "IMAGE_SCALE_TYPE_RELATIVE_TO_COLUMN":
        case 3:
            message.scaleType = 3;
            break;
        }
        switch (object.uaMode) {
        default:
            if (typeof object.uaMode === "number") {
                message.uaMode = object.uaMode;
                break;
            }
            break;
        case "IMAGE_UA_MODE_DO_NOT_USE_AT_ALL":
        case 0:
            message.uaMode = 0;
            break;
        case "IMAGE_UA_MODE_INHERITED":
        case 1:
            message.uaMode = 1;
            break;
        case "IMAGE_UA_MODE_SIMPLE":
        case 2:
            message.uaMode = 2;
            break;
        case "IMAGE_UA_MODE_ADVANCED":
        case 3:
            message.uaMode = 3;
            break;
        }
        if (object.uaDescription != null)
            message.uaDescription = String(object.uaDescription);
        if (object.leftBorderIsLeftMeasure != null) {
            if (typeof object.leftBorderIsLeftMeasure !== "object")
                throw TypeError(".ProtoImage.leftBorderIsLeftMeasure: object expected");
            message.leftBorderIsLeftMeasure = $root.ProtoBoxedBool.fromObject(object.leftBorderIsLeftMeasure);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoImage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoImage
     * @static
     * @param {ProtoImage} message ProtoImage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoImage.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.alt = "";
            object.name = "";
            object.src = "";
            object.filename = "";
            object.scale = null;
            object.columnScale = null;
            object.width = null;
            object.height = null;
            object.x = null;
            object.y = null;
            object.positionAbsolute = null;
            object.rotation = 0;
            object.flipSettings = null;
            object.cropSettings = null;
            object.aia = null;
            object.uuid = "";
            object.referencePoint = options.enums === String ? "REF_POINT_DO_NOT_USE_AT_ALL" : 0;
            object.hyperlink = "";
            object.imageContentType = options.enums === String ? "IMAGE_CONTENT_UUID_REFERENCE_INLINE" : 0;
            object.imageContent = "";
            object.scaleType = options.enums === String ? "IMAGE_SCALE_TYPE_DO_NOT_USE_AT_ALL" : 0;
            object.uaMode = options.enums === String ? "IMAGE_UA_MODE_DO_NOT_USE_AT_ALL" : 0;
            object.uaDescription = "";
            object.leftBorderIsLeftMeasure = null;
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.alt != null && message.hasOwnProperty("alt"))
            object.alt = message.alt;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.src != null && message.hasOwnProperty("src"))
            object.src = message.src;
        if (message.filename != null && message.hasOwnProperty("filename"))
            object.filename = message.filename;
        if (message.scale != null && message.hasOwnProperty("scale"))
            object.scale = $root.ProtoBoxedDouble.toObject(message.scale, options);
        if (message.columnScale != null && message.hasOwnProperty("columnScale"))
            object.columnScale = $root.ProtoBoxedDouble.toObject(message.columnScale, options);
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoBoxedMeasure.toObject(message.width, options);
        if (message.height != null && message.hasOwnProperty("height"))
            object.height = $root.ProtoBoxedMeasure.toObject(message.height, options);
        if (message.x != null && message.hasOwnProperty("x"))
            object.x = $root.ProtoBoxedMeasure.toObject(message.x, options);
        if (message.y != null && message.hasOwnProperty("y"))
            object.y = $root.ProtoBoxedMeasure.toObject(message.y, options);
        if (message.positionAbsolute != null && message.hasOwnProperty("positionAbsolute"))
            object.positionAbsolute = $root.ProtoBoxedBool.toObject(message.positionAbsolute, options);
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            object.rotation = options.json && !isFinite(message.rotation) ? String(message.rotation) : message.rotation;
        if (message.flipSettings != null && message.hasOwnProperty("flipSettings"))
            object.flipSettings = $root.ProtoFlipSettings.toObject(message.flipSettings, options);
        if (message.cropSettings != null && message.hasOwnProperty("cropSettings"))
            object.cropSettings = $root.ProtoCropSettings.toObject(message.cropSettings, options);
        if (message.aia != null && message.hasOwnProperty("aia"))
            object.aia = $root.ProtoAdvancedIllustrationAreaImageSettings.toObject(message.aia, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.referencePoint != null && message.hasOwnProperty("referencePoint"))
            object.referencePoint = options.enums === String ? $root.ProtoImageReferencePoint[message.referencePoint] === undefined ? message.referencePoint : $root.ProtoImageReferencePoint[message.referencePoint] : message.referencePoint;
        if (message.hyperlink != null && message.hasOwnProperty("hyperlink"))
            object.hyperlink = message.hyperlink;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.imageContentType != null && message.hasOwnProperty("imageContentType"))
            object.imageContentType = options.enums === String ? $root.ProtoImageContentType[message.imageContentType] === undefined ? message.imageContentType : $root.ProtoImageContentType[message.imageContentType] : message.imageContentType;
        if (message.imageContent != null && message.hasOwnProperty("imageContent"))
            object.imageContent = message.imageContent;
        if (message.scaleType != null && message.hasOwnProperty("scaleType"))
            object.scaleType = options.enums === String ? $root.ProtoImageScaleType[message.scaleType] === undefined ? message.scaleType : $root.ProtoImageScaleType[message.scaleType] : message.scaleType;
        if (message.uaMode != null && message.hasOwnProperty("uaMode"))
            object.uaMode = options.enums === String ? $root.ProtoImageUAMode[message.uaMode] === undefined ? message.uaMode : $root.ProtoImageUAMode[message.uaMode] : message.uaMode;
        if (message.uaDescription != null && message.hasOwnProperty("uaDescription"))
            object.uaDescription = message.uaDescription;
        if (message.leftBorderIsLeftMeasure != null && message.hasOwnProperty("leftBorderIsLeftMeasure"))
            object.leftBorderIsLeftMeasure = $root.ProtoBoxedBool.toObject(message.leftBorderIsLeftMeasure, options);
        return object;
    };

    /**
     * Converts this ProtoImage to JSON.
     * @function toJSON
     * @memberof ProtoImage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoImage.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoImage
     * @function getTypeUrl
     * @memberof ProtoImage
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoImage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoImage";
    };

    return ProtoImage;
})();

$root.ProtoDirectory = (function() {

    /**
     * Properties of a ProtoDirectory.
     * @name IProtoDirectory
     * @interface IProtoDirectory
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoDirectory _children
     * @property {IProtoDocumentElement|null} [parent] ProtoDirectory parent
     * @property {string|null} [uuid] ProtoDirectory uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoDirectory comChannelUUIDs
     * @property {ProtoSemanticType|null} [semanticType] ProtoDirectory semanticType
     * @property {boolean|null} [editable] ProtoDirectory editable
     * @property {string|null} [name] ProtoDirectory name
     */

    /**
     * Constructs a new ProtoDirectory.
     * @name ProtoDirectory
     * @classdesc Represents a ProtoDirectory.
     * @implements IProtoDirectory
     * @constructor
     * @param {IProtoDirectory=} [properties] Properties to set
     */
    function ProtoDirectory(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoDirectory _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoDirectory
     * @instance
     */
    ProtoDirectory.prototype._children = $util.emptyArray;

    /**
     * ProtoDirectory parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoDirectory
     * @instance
     */
    ProtoDirectory.prototype.parent = null;

    /**
     * ProtoDirectory uuid.
     * @member {string} uuid
     * @memberof ProtoDirectory
     * @instance
     */
    ProtoDirectory.prototype.uuid = "";

    /**
     * ProtoDirectory comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoDirectory
     * @instance
     */
    ProtoDirectory.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoDirectory semanticType.
     * @member {ProtoSemanticType} semanticType
     * @memberof ProtoDirectory
     * @instance
     */
    ProtoDirectory.prototype.semanticType = 0;

    /**
     * ProtoDirectory editable.
     * @member {boolean} editable
     * @memberof ProtoDirectory
     * @instance
     */
    ProtoDirectory.prototype.editable = false;

    /**
     * ProtoDirectory name.
     * @member {string} name
     * @memberof ProtoDirectory
     * @instance
     */
    ProtoDirectory.prototype.name = "";

    /**
     * Creates a new ProtoDirectory instance using the specified properties.
     * @function create
     * @memberof ProtoDirectory
     * @static
     * @param {IProtoDirectory=} [properties] Properties to set
     * @returns {ProtoDirectory} ProtoDirectory instance
     */
    ProtoDirectory.create = function create(properties) {
        return new ProtoDirectory(properties);
    };

    /**
     * Encodes the specified ProtoDirectory message. Does not implicitly {@link ProtoDirectory.verify|verify} messages.
     * @function encode
     * @memberof ProtoDirectory
     * @static
     * @param {IProtoDirectory} message ProtoDirectory message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDirectory.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.semanticType != null && Object.hasOwnProperty.call(message, "semanticType"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semanticType);
        if (message.editable != null && Object.hasOwnProperty.call(message, "editable"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.editable);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);
        return writer;
    };

    /**
     * Encodes the specified ProtoDirectory message, length delimited. Does not implicitly {@link ProtoDirectory.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoDirectory
     * @static
     * @param {IProtoDirectory} message ProtoDirectory message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDirectory.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoDirectory message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoDirectory
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoDirectory} ProtoDirectory
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDirectory.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoDirectory();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.semanticType = reader.int32();
                    break;
                }
            case 6: {
                    message.editable = reader.bool();
                    break;
                }
            case 7: {
                    message.name = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoDirectory message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoDirectory
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoDirectory} ProtoDirectory
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDirectory.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoDirectory message.
     * @function verify
     * @memberof ProtoDirectory
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoDirectory.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.semanticType != null && message.hasOwnProperty("semanticType"))
            switch (message.semanticType) {
            default:
                return "semanticType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.editable != null && message.hasOwnProperty("editable"))
            if (typeof message.editable !== "boolean")
                return "editable: boolean expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };

    /**
     * Creates a ProtoDirectory message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoDirectory
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoDirectory} ProtoDirectory
     */
    ProtoDirectory.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoDirectory)
            return object;
        var message = new $root.ProtoDirectory();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoDirectory._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoDirectory._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoDirectory.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoDirectory.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        switch (object.semanticType) {
        default:
            if (typeof object.semanticType === "number") {
                message.semanticType = object.semanticType;
                break;
            }
            break;
        case "SEMANTIC_TYPE_NONE":
        case 0:
            message.semanticType = 0;
            break;
        case "SEMANTIC_TYPE_PART":
        case 1:
            message.semanticType = 1;
            break;
        case "SEMANTIC_TYPE_ART":
        case 2:
            message.semanticType = 2;
            break;
        case "SEMANTIC_TYPE_SECT":
        case 3:
            message.semanticType = 3;
            break;
        case "SEMANTIC_TYPE_DIV":
        case 4:
            message.semanticType = 4;
            break;
        }
        if (object.editable != null)
            message.editable = Boolean(object.editable);
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };

    /**
     * Creates a plain object from a ProtoDirectory message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoDirectory
     * @static
     * @param {ProtoDirectory} message ProtoDirectory
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoDirectory.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.semanticType = options.enums === String ? "SEMANTIC_TYPE_NONE" : 0;
            object.editable = false;
            object.name = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.semanticType != null && message.hasOwnProperty("semanticType"))
            object.semanticType = options.enums === String ? $root.ProtoSemanticType[message.semanticType] === undefined ? message.semanticType : $root.ProtoSemanticType[message.semanticType] : message.semanticType;
        if (message.editable != null && message.hasOwnProperty("editable"))
            object.editable = message.editable;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };

    /**
     * Converts this ProtoDirectory to JSON.
     * @function toJSON
     * @memberof ProtoDirectory
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoDirectory.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoDirectory
     * @function getTypeUrl
     * @memberof ProtoDirectory
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoDirectory.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoDirectory";
    };

    return ProtoDirectory;
})();

$root.ProtoTextBrick = (function() {

    /**
     * Properties of a ProtoTextBrick.
     * @name IProtoTextBrick
     * @interface IProtoTextBrick
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoTextBrick _children
     * @property {IProtoDocumentElement|null} [parent] ProtoTextBrick parent
     * @property {string|null} [uuid] ProtoTextBrick uuid
     * @property {number|Long|null} [id] ProtoTextBrick id
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTextBrick comChannelUUIDs
     * @property {boolean|null} [editable] ProtoTextBrick editable
     * @property {string|null} [name] ProtoTextBrick name
     */

    /**
     * Constructs a new ProtoTextBrick.
     * @name ProtoTextBrick
     * @classdesc Represents a ProtoTextBrick.
     * @implements IProtoTextBrick
     * @constructor
     * @param {IProtoTextBrick=} [properties] Properties to set
     */
    function ProtoTextBrick(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTextBrick _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoTextBrick
     * @instance
     */
    ProtoTextBrick.prototype._children = $util.emptyArray;

    /**
     * ProtoTextBrick parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTextBrick
     * @instance
     */
    ProtoTextBrick.prototype.parent = null;

    /**
     * ProtoTextBrick uuid.
     * @member {string} uuid
     * @memberof ProtoTextBrick
     * @instance
     */
    ProtoTextBrick.prototype.uuid = "";

    /**
     * ProtoTextBrick id.
     * @member {number|Long} id
     * @memberof ProtoTextBrick
     * @instance
     */
    ProtoTextBrick.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * ProtoTextBrick comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTextBrick
     * @instance
     */
    ProtoTextBrick.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoTextBrick editable.
     * @member {boolean} editable
     * @memberof ProtoTextBrick
     * @instance
     */
    ProtoTextBrick.prototype.editable = false;

    /**
     * ProtoTextBrick name.
     * @member {string} name
     * @memberof ProtoTextBrick
     * @instance
     */
    ProtoTextBrick.prototype.name = "";

    /**
     * Creates a new ProtoTextBrick instance using the specified properties.
     * @function create
     * @memberof ProtoTextBrick
     * @static
     * @param {IProtoTextBrick=} [properties] Properties to set
     * @returns {ProtoTextBrick} ProtoTextBrick instance
     */
    ProtoTextBrick.create = function create(properties) {
        return new ProtoTextBrick(properties);
    };

    /**
     * Encodes the specified ProtoTextBrick message. Does not implicitly {@link ProtoTextBrick.verify|verify} messages.
     * @function encode
     * @memberof ProtoTextBrick
     * @static
     * @param {IProtoTextBrick} message ProtoTextBrick message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTextBrick.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.id);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        if (message.editable != null && Object.hasOwnProperty.call(message, "editable"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.editable);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);
        return writer;
    };

    /**
     * Encodes the specified ProtoTextBrick message, length delimited. Does not implicitly {@link ProtoTextBrick.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTextBrick
     * @static
     * @param {IProtoTextBrick} message ProtoTextBrick message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTextBrick.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTextBrick message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTextBrick
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTextBrick} ProtoTextBrick
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTextBrick.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTextBrick();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    message.id = reader.uint64();
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 6: {
                    message.editable = reader.bool();
                    break;
                }
            case 7: {
                    message.name = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTextBrick message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTextBrick
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTextBrick} ProtoTextBrick
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTextBrick.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTextBrick message.
     * @function verify
     * @memberof ProtoTextBrick
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTextBrick.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                return "id: integer|Long expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.editable != null && message.hasOwnProperty("editable"))
            if (typeof message.editable !== "boolean")
                return "editable: boolean expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };

    /**
     * Creates a ProtoTextBrick message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTextBrick
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTextBrick} ProtoTextBrick
     */
    ProtoTextBrick.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTextBrick)
            return object;
        var message = new $root.ProtoTextBrick();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoTextBrick._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoTextBrick._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTextBrick.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.id != null)
            if ($util.Long)
                (message.id = $util.Long.fromValue(object.id)).unsigned = true;
            else if (typeof object.id === "string")
                message.id = parseInt(object.id, 10);
            else if (typeof object.id === "number")
                message.id = object.id;
            else if (typeof object.id === "object")
                message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTextBrick.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.editable != null)
            message.editable = Boolean(object.editable);
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };

    /**
     * Creates a plain object from a ProtoTextBrick message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTextBrick
     * @static
     * @param {ProtoTextBrick} message ProtoTextBrick
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTextBrick.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.id = options.longs === String ? "0" : 0;
            object.editable = false;
            object.name = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.id != null && message.hasOwnProperty("id"))
            if (typeof message.id === "number")
                object.id = options.longs === String ? String(message.id) : message.id;
            else
                object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.editable != null && message.hasOwnProperty("editable"))
            object.editable = message.editable;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };

    /**
     * Converts this ProtoTextBrick to JSON.
     * @function toJSON
     * @memberof ProtoTextBrick
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTextBrick.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTextBrick
     * @function getTypeUrl
     * @memberof ProtoTextBrick
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTextBrick.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTextBrick";
    };

    return ProtoTextBrick;
})();

$root.ProtoVariable = (function() {

    /**
     * Properties of a ProtoVariable.
     * @name IProtoVariable
     * @interface IProtoVariable
     * @property {IProtoDocumentElement|null} [parent] ProtoVariable parent
     * @property {string|null} [path] ProtoVariable path
     * @property {string|null} [content] ProtoVariable content
     * @property {string|null} [formatUuid] ProtoVariable formatUuid
     * @property {ProtoVariableSpecialType|null} [specialType] ProtoVariable specialType
     * @property {string|null} [uuid] ProtoVariable uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoVariable comChannelUUIDs
     */

    /**
     * Constructs a new ProtoVariable.
     * @name ProtoVariable
     * @classdesc Represents a ProtoVariable.
     * @implements IProtoVariable
     * @constructor
     * @param {IProtoVariable=} [properties] Properties to set
     */
    function ProtoVariable(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoVariable parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoVariable
     * @instance
     */
    ProtoVariable.prototype.parent = null;

    /**
     * ProtoVariable path.
     * @member {string} path
     * @memberof ProtoVariable
     * @instance
     */
    ProtoVariable.prototype.path = "";

    /**
     * ProtoVariable content.
     * @member {string} content
     * @memberof ProtoVariable
     * @instance
     */
    ProtoVariable.prototype.content = "";

    /**
     * ProtoVariable formatUuid.
     * @member {string} formatUuid
     * @memberof ProtoVariable
     * @instance
     */
    ProtoVariable.prototype.formatUuid = "";

    /**
     * ProtoVariable specialType.
     * @member {ProtoVariableSpecialType} specialType
     * @memberof ProtoVariable
     * @instance
     */
    ProtoVariable.prototype.specialType = 0;

    /**
     * ProtoVariable uuid.
     * @member {string} uuid
     * @memberof ProtoVariable
     * @instance
     */
    ProtoVariable.prototype.uuid = "";

    /**
     * ProtoVariable comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoVariable
     * @instance
     */
    ProtoVariable.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoVariable instance using the specified properties.
     * @function create
     * @memberof ProtoVariable
     * @static
     * @param {IProtoVariable=} [properties] Properties to set
     * @returns {ProtoVariable} ProtoVariable instance
     */
    ProtoVariable.create = function create(properties) {
        return new ProtoVariable(properties);
    };

    /**
     * Encodes the specified ProtoVariable message. Does not implicitly {@link ProtoVariable.verify|verify} messages.
     * @function encode
     * @memberof ProtoVariable
     * @static
     * @param {IProtoVariable} message ProtoVariable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoVariable.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.content);
        if (message.formatUuid != null && Object.hasOwnProperty.call(message, "formatUuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.formatUuid);
        if (message.specialType != null && Object.hasOwnProperty.call(message, "specialType"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.specialType);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoVariable message, length delimited. Does not implicitly {@link ProtoVariable.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoVariable
     * @static
     * @param {IProtoVariable} message ProtoVariable message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoVariable.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoVariable message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoVariable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoVariable} ProtoVariable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoVariable.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoVariable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.path = reader.string();
                    break;
                }
            case 3: {
                    message.content = reader.string();
                    break;
                }
            case 4: {
                    message.formatUuid = reader.string();
                    break;
                }
            case 5: {
                    message.specialType = reader.int32();
                    break;
                }
            case 6: {
                    message.uuid = reader.string();
                    break;
                }
            case 7: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoVariable message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoVariable
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoVariable} ProtoVariable
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoVariable.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoVariable message.
     * @function verify
     * @memberof ProtoVariable
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoVariable.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.path != null && message.hasOwnProperty("path"))
            if (!$util.isString(message.path))
                return "path: string expected";
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        if (message.formatUuid != null && message.hasOwnProperty("formatUuid"))
            if (!$util.isString(message.formatUuid))
                return "formatUuid: string expected";
        if (message.specialType != null && message.hasOwnProperty("specialType"))
            switch (message.specialType) {
            default:
                return "specialType: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                break;
            }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoVariable message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoVariable
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoVariable} ProtoVariable
     */
    ProtoVariable.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoVariable)
            return object;
        var message = new $root.ProtoVariable();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoVariable.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.path != null)
            message.path = String(object.path);
        if (object.content != null)
            message.content = String(object.content);
        if (object.formatUuid != null)
            message.formatUuid = String(object.formatUuid);
        switch (object.specialType) {
        default:
            if (typeof object.specialType === "number") {
                message.specialType = object.specialType;
                break;
            }
            break;
        case "NOT_SPECIAL":
        case 0:
            message.specialType = 0;
            break;
        case "TABLE_NUMBER":
        case 1:
            message.specialType = 1;
            break;
        case "DOC_PAGE_COUNT":
        case 2:
            message.specialType = 2;
            break;
        case "DOC_CUR_PAGE":
        case 3:
            message.specialType = 3;
            break;
        case "CUR_PAGE":
        case 4:
            message.specialType = 4;
            break;
        case "PAGE_COUNT":
        case 5:
            message.specialType = 5;
            break;
        case "PREV_PAGE":
        case 6:
            message.specialType = 6;
            break;
        case "SECTION_PAGE":
        case 7:
            message.specialType = 7;
            break;
        case "UPDATED_AT":
        case 8:
            message.specialType = 8;
            break;
        case "GENERATED_AT":
        case 9:
            message.specialType = 9;
            break;
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoVariable.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoVariable message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoVariable
     * @static
     * @param {ProtoVariable} message ProtoVariable
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoVariable.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.path = "";
            object.content = "";
            object.formatUuid = "";
            object.specialType = options.enums === String ? "NOT_SPECIAL" : 0;
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.path != null && message.hasOwnProperty("path"))
            object.path = message.path;
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        if (message.formatUuid != null && message.hasOwnProperty("formatUuid"))
            object.formatUuid = message.formatUuid;
        if (message.specialType != null && message.hasOwnProperty("specialType"))
            object.specialType = options.enums === String ? $root.ProtoVariableSpecialType[message.specialType] === undefined ? message.specialType : $root.ProtoVariableSpecialType[message.specialType] : message.specialType;
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoVariable to JSON.
     * @function toJSON
     * @memberof ProtoVariable
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoVariable.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoVariable
     * @function getTypeUrl
     * @memberof ProtoVariable
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoVariable.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoVariable";
    };

    return ProtoVariable;
})();

/**
 * ProtoVariableSpecialType enum.
 * @name ProtoVariableSpecialType
 * @enum {number}
 * @property {number} NOT_SPECIAL=0 NOT_SPECIAL value
 * @property {number} TABLE_NUMBER=1 TABLE_NUMBER value
 * @property {number} DOC_PAGE_COUNT=2 DOC_PAGE_COUNT value
 * @property {number} DOC_CUR_PAGE=3 DOC_CUR_PAGE value
 * @property {number} CUR_PAGE=4 CUR_PAGE value
 * @property {number} PAGE_COUNT=5 PAGE_COUNT value
 * @property {number} PREV_PAGE=6 PREV_PAGE value
 * @property {number} SECTION_PAGE=7 SECTION_PAGE value
 * @property {number} UPDATED_AT=8 UPDATED_AT value
 * @property {number} GENERATED_AT=9 GENERATED_AT value
 */
$root.ProtoVariableSpecialType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NOT_SPECIAL"] = 0;
    values[valuesById[1] = "TABLE_NUMBER"] = 1;
    values[valuesById[2] = "DOC_PAGE_COUNT"] = 2;
    values[valuesById[3] = "DOC_CUR_PAGE"] = 3;
    values[valuesById[4] = "CUR_PAGE"] = 4;
    values[valuesById[5] = "PAGE_COUNT"] = 5;
    values[valuesById[6] = "PREV_PAGE"] = 6;
    values[valuesById[7] = "SECTION_PAGE"] = 7;
    values[valuesById[8] = "UPDATED_AT"] = 8;
    values[valuesById[9] = "GENERATED_AT"] = 9;
    return values;
})();

$root.ProtoFormatted = (function() {

    /**
     * Properties of a ProtoFormatted.
     * @name IProtoFormatted
     * @interface IProtoFormatted
     * @property {IProtoDocumentElement|null} [parent] ProtoFormatted parent
     * @property {boolean|null} [dteditorSyntax] ProtoFormatted dteditorSyntax
     * @property {string|null} [doctypeContent] ProtoFormatted doctypeContent
     * @property {string|null} [doctypeCode] ProtoFormatted doctypeCode
     * @property {string|null} [htmlContent] ProtoFormatted htmlContent
     * @property {string|null} [htmlCode] ProtoFormatted htmlCode
     * @property {string|null} [textContent] ProtoFormatted textContent
     * @property {string|null} [textCode] ProtoFormatted textCode
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoFormatted comChannelUUIDs
     */

    /**
     * Constructs a new ProtoFormatted.
     * @name ProtoFormatted
     * @classdesc Represents a ProtoFormatted.
     * @implements IProtoFormatted
     * @constructor
     * @param {IProtoFormatted=} [properties] Properties to set
     */
    function ProtoFormatted(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoFormatted parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.parent = null;

    /**
     * ProtoFormatted dteditorSyntax.
     * @member {boolean} dteditorSyntax
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.dteditorSyntax = false;

    /**
     * ProtoFormatted doctypeContent.
     * @member {string} doctypeContent
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.doctypeContent = "";

    /**
     * ProtoFormatted doctypeCode.
     * @member {string} doctypeCode
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.doctypeCode = "";

    /**
     * ProtoFormatted htmlContent.
     * @member {string} htmlContent
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.htmlContent = "";

    /**
     * ProtoFormatted htmlCode.
     * @member {string} htmlCode
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.htmlCode = "";

    /**
     * ProtoFormatted textContent.
     * @member {string} textContent
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.textContent = "";

    /**
     * ProtoFormatted textCode.
     * @member {string} textCode
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.textCode = "";

    /**
     * ProtoFormatted comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoFormatted
     * @instance
     */
    ProtoFormatted.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoFormatted instance using the specified properties.
     * @function create
     * @memberof ProtoFormatted
     * @static
     * @param {IProtoFormatted=} [properties] Properties to set
     * @returns {ProtoFormatted} ProtoFormatted instance
     */
    ProtoFormatted.create = function create(properties) {
        return new ProtoFormatted(properties);
    };

    /**
     * Encodes the specified ProtoFormatted message. Does not implicitly {@link ProtoFormatted.verify|verify} messages.
     * @function encode
     * @memberof ProtoFormatted
     * @static
     * @param {IProtoFormatted} message ProtoFormatted message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoFormatted.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.dteditorSyntax != null && Object.hasOwnProperty.call(message, "dteditorSyntax"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.dteditorSyntax);
        if (message.doctypeContent != null && Object.hasOwnProperty.call(message, "doctypeContent"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.doctypeContent);
        if (message.doctypeCode != null && Object.hasOwnProperty.call(message, "doctypeCode"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.doctypeCode);
        if (message.htmlContent != null && Object.hasOwnProperty.call(message, "htmlContent"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.htmlContent);
        if (message.htmlCode != null && Object.hasOwnProperty.call(message, "htmlCode"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.htmlCode);
        if (message.textContent != null && Object.hasOwnProperty.call(message, "textContent"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.textContent);
        if (message.textCode != null && Object.hasOwnProperty.call(message, "textCode"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.textCode);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoFormatted message, length delimited. Does not implicitly {@link ProtoFormatted.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoFormatted
     * @static
     * @param {IProtoFormatted} message ProtoFormatted message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoFormatted.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoFormatted message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoFormatted
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoFormatted} ProtoFormatted
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoFormatted.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoFormatted();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.dteditorSyntax = reader.bool();
                    break;
                }
            case 3: {
                    message.doctypeContent = reader.string();
                    break;
                }
            case 4: {
                    message.doctypeCode = reader.string();
                    break;
                }
            case 5: {
                    message.htmlContent = reader.string();
                    break;
                }
            case 6: {
                    message.htmlCode = reader.string();
                    break;
                }
            case 7: {
                    message.textContent = reader.string();
                    break;
                }
            case 8: {
                    message.textCode = reader.string();
                    break;
                }
            case 9: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoFormatted message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoFormatted
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoFormatted} ProtoFormatted
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoFormatted.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoFormatted message.
     * @function verify
     * @memberof ProtoFormatted
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoFormatted.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.dteditorSyntax != null && message.hasOwnProperty("dteditorSyntax"))
            if (typeof message.dteditorSyntax !== "boolean")
                return "dteditorSyntax: boolean expected";
        if (message.doctypeContent != null && message.hasOwnProperty("doctypeContent"))
            if (!$util.isString(message.doctypeContent))
                return "doctypeContent: string expected";
        if (message.doctypeCode != null && message.hasOwnProperty("doctypeCode"))
            if (!$util.isString(message.doctypeCode))
                return "doctypeCode: string expected";
        if (message.htmlContent != null && message.hasOwnProperty("htmlContent"))
            if (!$util.isString(message.htmlContent))
                return "htmlContent: string expected";
        if (message.htmlCode != null && message.hasOwnProperty("htmlCode"))
            if (!$util.isString(message.htmlCode))
                return "htmlCode: string expected";
        if (message.textContent != null && message.hasOwnProperty("textContent"))
            if (!$util.isString(message.textContent))
                return "textContent: string expected";
        if (message.textCode != null && message.hasOwnProperty("textCode"))
            if (!$util.isString(message.textCode))
                return "textCode: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoFormatted message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoFormatted
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoFormatted} ProtoFormatted
     */
    ProtoFormatted.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoFormatted)
            return object;
        var message = new $root.ProtoFormatted();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoFormatted.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.dteditorSyntax != null)
            message.dteditorSyntax = Boolean(object.dteditorSyntax);
        if (object.doctypeContent != null)
            message.doctypeContent = String(object.doctypeContent);
        if (object.doctypeCode != null)
            message.doctypeCode = String(object.doctypeCode);
        if (object.htmlContent != null)
            message.htmlContent = String(object.htmlContent);
        if (object.htmlCode != null)
            message.htmlCode = String(object.htmlCode);
        if (object.textContent != null)
            message.textContent = String(object.textContent);
        if (object.textCode != null)
            message.textCode = String(object.textCode);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoFormatted.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoFormatted message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoFormatted
     * @static
     * @param {ProtoFormatted} message ProtoFormatted
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoFormatted.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.dteditorSyntax = false;
            object.doctypeContent = "";
            object.doctypeCode = "";
            object.htmlContent = "";
            object.htmlCode = "";
            object.textContent = "";
            object.textCode = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.dteditorSyntax != null && message.hasOwnProperty("dteditorSyntax"))
            object.dteditorSyntax = message.dteditorSyntax;
        if (message.doctypeContent != null && message.hasOwnProperty("doctypeContent"))
            object.doctypeContent = message.doctypeContent;
        if (message.doctypeCode != null && message.hasOwnProperty("doctypeCode"))
            object.doctypeCode = message.doctypeCode;
        if (message.htmlContent != null && message.hasOwnProperty("htmlContent"))
            object.htmlContent = message.htmlContent;
        if (message.htmlCode != null && message.hasOwnProperty("htmlCode"))
            object.htmlCode = message.htmlCode;
        if (message.textContent != null && message.hasOwnProperty("textContent"))
            object.textContent = message.textContent;
        if (message.textCode != null && message.hasOwnProperty("textCode"))
            object.textCode = message.textCode;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoFormatted to JSON.
     * @function toJSON
     * @memberof ProtoFormatted
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoFormatted.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoFormatted
     * @function getTypeUrl
     * @memberof ProtoFormatted
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoFormatted.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoFormatted";
    };

    return ProtoFormatted;
})();

$root.ProtoApplyProtoCDef = (function() {

    /**
     * Properties of a ProtoApplyProtoCDef.
     * @name IProtoApplyProtoCDef
     * @interface IProtoApplyProtoCDef
     * @property {string|null} [cDefUuid] ProtoApplyProtoCDef cDefUuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoApplyProtoCDef comChannelUUIDs
     */

    /**
     * Constructs a new ProtoApplyProtoCDef.
     * @name ProtoApplyProtoCDef
     * @classdesc Represents a ProtoApplyProtoCDef.
     * @implements IProtoApplyProtoCDef
     * @constructor
     * @param {IProtoApplyProtoCDef=} [properties] Properties to set
     */
    function ProtoApplyProtoCDef(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoApplyProtoCDef cDefUuid.
     * @member {string} cDefUuid
     * @memberof ProtoApplyProtoCDef
     * @instance
     */
    ProtoApplyProtoCDef.prototype.cDefUuid = "";

    /**
     * ProtoApplyProtoCDef comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoApplyProtoCDef
     * @instance
     */
    ProtoApplyProtoCDef.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoApplyProtoCDef instance using the specified properties.
     * @function create
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {IProtoApplyProtoCDef=} [properties] Properties to set
     * @returns {ProtoApplyProtoCDef} ProtoApplyProtoCDef instance
     */
    ProtoApplyProtoCDef.create = function create(properties) {
        return new ProtoApplyProtoCDef(properties);
    };

    /**
     * Encodes the specified ProtoApplyProtoCDef message. Does not implicitly {@link ProtoApplyProtoCDef.verify|verify} messages.
     * @function encode
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {IProtoApplyProtoCDef} message ProtoApplyProtoCDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoApplyProtoCDef.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.cDefUuid != null && Object.hasOwnProperty.call(message, "cDefUuid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cDefUuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoApplyProtoCDef message, length delimited. Does not implicitly {@link ProtoApplyProtoCDef.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {IProtoApplyProtoCDef} message ProtoApplyProtoCDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoApplyProtoCDef.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoApplyProtoCDef message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoApplyProtoCDef} ProtoApplyProtoCDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoApplyProtoCDef.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoApplyProtoCDef();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.cDefUuid = reader.string();
                    break;
                }
            case 2: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoApplyProtoCDef message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoApplyProtoCDef} ProtoApplyProtoCDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoApplyProtoCDef.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoApplyProtoCDef message.
     * @function verify
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoApplyProtoCDef.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.cDefUuid != null && message.hasOwnProperty("cDefUuid"))
            if (!$util.isString(message.cDefUuid))
                return "cDefUuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoApplyProtoCDef message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoApplyProtoCDef} ProtoApplyProtoCDef
     */
    ProtoApplyProtoCDef.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoApplyProtoCDef)
            return object;
        var message = new $root.ProtoApplyProtoCDef();
        if (object.cDefUuid != null)
            message.cDefUuid = String(object.cDefUuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoApplyProtoCDef.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoApplyProtoCDef message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {ProtoApplyProtoCDef} message ProtoApplyProtoCDef
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoApplyProtoCDef.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults)
            object.cDefUuid = "";
        if (message.cDefUuid != null && message.hasOwnProperty("cDefUuid"))
            object.cDefUuid = message.cDefUuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoApplyProtoCDef to JSON.
     * @function toJSON
     * @memberof ProtoApplyProtoCDef
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoApplyProtoCDef.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoApplyProtoCDef
     * @function getTypeUrl
     * @memberof ProtoApplyProtoCDef
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoApplyProtoCDef.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoApplyProtoCDef";
    };

    return ProtoApplyProtoCDef;
})();

$root.ProtoApplyProtoPDef = (function() {

    /**
     * Properties of a ProtoApplyProtoPDef.
     * @name IProtoApplyProtoPDef
     * @interface IProtoApplyProtoPDef
     * @property {string|null} [pDefUuid] ProtoApplyProtoPDef pDefUuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoApplyProtoPDef comChannelUUIDs
     */

    /**
     * Constructs a new ProtoApplyProtoPDef.
     * @name ProtoApplyProtoPDef
     * @classdesc Represents a ProtoApplyProtoPDef.
     * @implements IProtoApplyProtoPDef
     * @constructor
     * @param {IProtoApplyProtoPDef=} [properties] Properties to set
     */
    function ProtoApplyProtoPDef(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoApplyProtoPDef pDefUuid.
     * @member {string} pDefUuid
     * @memberof ProtoApplyProtoPDef
     * @instance
     */
    ProtoApplyProtoPDef.prototype.pDefUuid = "";

    /**
     * ProtoApplyProtoPDef comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoApplyProtoPDef
     * @instance
     */
    ProtoApplyProtoPDef.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoApplyProtoPDef instance using the specified properties.
     * @function create
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {IProtoApplyProtoPDef=} [properties] Properties to set
     * @returns {ProtoApplyProtoPDef} ProtoApplyProtoPDef instance
     */
    ProtoApplyProtoPDef.create = function create(properties) {
        return new ProtoApplyProtoPDef(properties);
    };

    /**
     * Encodes the specified ProtoApplyProtoPDef message. Does not implicitly {@link ProtoApplyProtoPDef.verify|verify} messages.
     * @function encode
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {IProtoApplyProtoPDef} message ProtoApplyProtoPDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoApplyProtoPDef.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.pDefUuid != null && Object.hasOwnProperty.call(message, "pDefUuid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.pDefUuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoApplyProtoPDef message, length delimited. Does not implicitly {@link ProtoApplyProtoPDef.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {IProtoApplyProtoPDef} message ProtoApplyProtoPDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoApplyProtoPDef.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoApplyProtoPDef message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoApplyProtoPDef} ProtoApplyProtoPDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoApplyProtoPDef.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoApplyProtoPDef();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.pDefUuid = reader.string();
                    break;
                }
            case 2: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoApplyProtoPDef message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoApplyProtoPDef} ProtoApplyProtoPDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoApplyProtoPDef.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoApplyProtoPDef message.
     * @function verify
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoApplyProtoPDef.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.pDefUuid != null && message.hasOwnProperty("pDefUuid"))
            if (!$util.isString(message.pDefUuid))
                return "pDefUuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoApplyProtoPDef message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoApplyProtoPDef} ProtoApplyProtoPDef
     */
    ProtoApplyProtoPDef.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoApplyProtoPDef)
            return object;
        var message = new $root.ProtoApplyProtoPDef();
        if (object.pDefUuid != null)
            message.pDefUuid = String(object.pDefUuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoApplyProtoPDef.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoApplyProtoPDef message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {ProtoApplyProtoPDef} message ProtoApplyProtoPDef
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoApplyProtoPDef.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults)
            object.pDefUuid = "";
        if (message.pDefUuid != null && message.hasOwnProperty("pDefUuid"))
            object.pDefUuid = message.pDefUuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoApplyProtoPDef to JSON.
     * @function toJSON
     * @memberof ProtoApplyProtoPDef
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoApplyProtoPDef.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoApplyProtoPDef
     * @function getTypeUrl
     * @memberof ProtoApplyProtoPDef
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoApplyProtoPDef.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoApplyProtoPDef";
    };

    return ProtoApplyProtoPDef;
})();

$root.ProtoApplyPtConfig = (function() {

    /**
     * Properties of a ProtoApplyPtConfig.
     * @name IProtoApplyPtConfig
     * @interface IProtoApplyPtConfig
     * @property {string|null} [ptConfigUuid] ProtoApplyPtConfig ptConfigUuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoApplyPtConfig comChannelUUIDs
     */

    /**
     * Constructs a new ProtoApplyPtConfig.
     * @name ProtoApplyPtConfig
     * @classdesc Represents a ProtoApplyPtConfig.
     * @implements IProtoApplyPtConfig
     * @constructor
     * @param {IProtoApplyPtConfig=} [properties] Properties to set
     */
    function ProtoApplyPtConfig(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoApplyPtConfig ptConfigUuid.
     * @member {string} ptConfigUuid
     * @memberof ProtoApplyPtConfig
     * @instance
     */
    ProtoApplyPtConfig.prototype.ptConfigUuid = "";

    /**
     * ProtoApplyPtConfig comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoApplyPtConfig
     * @instance
     */
    ProtoApplyPtConfig.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoApplyPtConfig instance using the specified properties.
     * @function create
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {IProtoApplyPtConfig=} [properties] Properties to set
     * @returns {ProtoApplyPtConfig} ProtoApplyPtConfig instance
     */
    ProtoApplyPtConfig.create = function create(properties) {
        return new ProtoApplyPtConfig(properties);
    };

    /**
     * Encodes the specified ProtoApplyPtConfig message. Does not implicitly {@link ProtoApplyPtConfig.verify|verify} messages.
     * @function encode
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {IProtoApplyPtConfig} message ProtoApplyPtConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoApplyPtConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ptConfigUuid != null && Object.hasOwnProperty.call(message, "ptConfigUuid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ptConfigUuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoApplyPtConfig message, length delimited. Does not implicitly {@link ProtoApplyPtConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {IProtoApplyPtConfig} message ProtoApplyPtConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoApplyPtConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoApplyPtConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoApplyPtConfig} ProtoApplyPtConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoApplyPtConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoApplyPtConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.ptConfigUuid = reader.string();
                    break;
                }
            case 2: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoApplyPtConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoApplyPtConfig} ProtoApplyPtConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoApplyPtConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoApplyPtConfig message.
     * @function verify
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoApplyPtConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ptConfigUuid != null && message.hasOwnProperty("ptConfigUuid"))
            if (!$util.isString(message.ptConfigUuid))
                return "ptConfigUuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoApplyPtConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoApplyPtConfig} ProtoApplyPtConfig
     */
    ProtoApplyPtConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoApplyPtConfig)
            return object;
        var message = new $root.ProtoApplyPtConfig();
        if (object.ptConfigUuid != null)
            message.ptConfigUuid = String(object.ptConfigUuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoApplyPtConfig.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoApplyPtConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {ProtoApplyPtConfig} message ProtoApplyPtConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoApplyPtConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults)
            object.ptConfigUuid = "";
        if (message.ptConfigUuid != null && message.hasOwnProperty("ptConfigUuid"))
            object.ptConfigUuid = message.ptConfigUuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoApplyPtConfig to JSON.
     * @function toJSON
     * @memberof ProtoApplyPtConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoApplyPtConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoApplyPtConfig
     * @function getTypeUrl
     * @memberof ProtoApplyPtConfig
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoApplyPtConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoApplyPtConfig";
    };

    return ProtoApplyPtConfig;
})();

$root.ProtoApplyUlConfig = (function() {

    /**
     * Properties of a ProtoApplyUlConfig.
     * @name IProtoApplyUlConfig
     * @interface IProtoApplyUlConfig
     * @property {string|null} [ulConfigUuid] ProtoApplyUlConfig ulConfigUuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoApplyUlConfig comChannelUUIDs
     */

    /**
     * Constructs a new ProtoApplyUlConfig.
     * @name ProtoApplyUlConfig
     * @classdesc Represents a ProtoApplyUlConfig.
     * @implements IProtoApplyUlConfig
     * @constructor
     * @param {IProtoApplyUlConfig=} [properties] Properties to set
     */
    function ProtoApplyUlConfig(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoApplyUlConfig ulConfigUuid.
     * @member {string} ulConfigUuid
     * @memberof ProtoApplyUlConfig
     * @instance
     */
    ProtoApplyUlConfig.prototype.ulConfigUuid = "";

    /**
     * ProtoApplyUlConfig comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoApplyUlConfig
     * @instance
     */
    ProtoApplyUlConfig.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoApplyUlConfig instance using the specified properties.
     * @function create
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {IProtoApplyUlConfig=} [properties] Properties to set
     * @returns {ProtoApplyUlConfig} ProtoApplyUlConfig instance
     */
    ProtoApplyUlConfig.create = function create(properties) {
        return new ProtoApplyUlConfig(properties);
    };

    /**
     * Encodes the specified ProtoApplyUlConfig message. Does not implicitly {@link ProtoApplyUlConfig.verify|verify} messages.
     * @function encode
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {IProtoApplyUlConfig} message ProtoApplyUlConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoApplyUlConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.ulConfigUuid != null && Object.hasOwnProperty.call(message, "ulConfigUuid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.ulConfigUuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoApplyUlConfig message, length delimited. Does not implicitly {@link ProtoApplyUlConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {IProtoApplyUlConfig} message ProtoApplyUlConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoApplyUlConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoApplyUlConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoApplyUlConfig} ProtoApplyUlConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoApplyUlConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoApplyUlConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.ulConfigUuid = reader.string();
                    break;
                }
            case 2: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoApplyUlConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoApplyUlConfig} ProtoApplyUlConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoApplyUlConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoApplyUlConfig message.
     * @function verify
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoApplyUlConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.ulConfigUuid != null && message.hasOwnProperty("ulConfigUuid"))
            if (!$util.isString(message.ulConfigUuid))
                return "ulConfigUuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoApplyUlConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoApplyUlConfig} ProtoApplyUlConfig
     */
    ProtoApplyUlConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoApplyUlConfig)
            return object;
        var message = new $root.ProtoApplyUlConfig();
        if (object.ulConfigUuid != null)
            message.ulConfigUuid = String(object.ulConfigUuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoApplyUlConfig.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoApplyUlConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {ProtoApplyUlConfig} message ProtoApplyUlConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoApplyUlConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults)
            object.ulConfigUuid = "";
        if (message.ulConfigUuid != null && message.hasOwnProperty("ulConfigUuid"))
            object.ulConfigUuid = message.ulConfigUuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoApplyUlConfig to JSON.
     * @function toJSON
     * @memberof ProtoApplyUlConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoApplyUlConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoApplyUlConfig
     * @function getTypeUrl
     * @memberof ProtoApplyUlConfig
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoApplyUlConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoApplyUlConfig";
    };

    return ProtoApplyUlConfig;
})();

$root.ProtoCDef = (function() {

    /**
     * Properties of a ProtoCDef.
     * @name IProtoCDef
     * @interface IProtoCDef
     * @property {IProtoColumnSettings|null} [columSettings] ProtoCDef columSettings
     * @property {IProtoBoxedBool|null} [applyToHeaderFooter] ProtoCDef applyToHeaderFooter
     * @property {IProtoBoxedBool|null} [applyImmediate] ProtoCDef applyImmediate
     * @property {string|null} [Uuid] ProtoCDef Uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoCDef comChannelUUIDs
     */

    /**
     * Constructs a new ProtoCDef.
     * @name ProtoCDef
     * @classdesc Represents a ProtoCDef.
     * @implements IProtoCDef
     * @constructor
     * @param {IProtoCDef=} [properties] Properties to set
     */
    function ProtoCDef(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoCDef columSettings.
     * @member {IProtoColumnSettings|null|undefined} columSettings
     * @memberof ProtoCDef
     * @instance
     */
    ProtoCDef.prototype.columSettings = null;

    /**
     * ProtoCDef applyToHeaderFooter.
     * @member {IProtoBoxedBool|null|undefined} applyToHeaderFooter
     * @memberof ProtoCDef
     * @instance
     */
    ProtoCDef.prototype.applyToHeaderFooter = null;

    /**
     * ProtoCDef applyImmediate.
     * @member {IProtoBoxedBool|null|undefined} applyImmediate
     * @memberof ProtoCDef
     * @instance
     */
    ProtoCDef.prototype.applyImmediate = null;

    /**
     * ProtoCDef Uuid.
     * @member {string} Uuid
     * @memberof ProtoCDef
     * @instance
     */
    ProtoCDef.prototype.Uuid = "";

    /**
     * ProtoCDef comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoCDef
     * @instance
     */
    ProtoCDef.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoCDef instance using the specified properties.
     * @function create
     * @memberof ProtoCDef
     * @static
     * @param {IProtoCDef=} [properties] Properties to set
     * @returns {ProtoCDef} ProtoCDef instance
     */
    ProtoCDef.create = function create(properties) {
        return new ProtoCDef(properties);
    };

    /**
     * Encodes the specified ProtoCDef message. Does not implicitly {@link ProtoCDef.verify|verify} messages.
     * @function encode
     * @memberof ProtoCDef
     * @static
     * @param {IProtoCDef} message ProtoCDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCDef.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.columSettings != null && Object.hasOwnProperty.call(message, "columSettings"))
            $root.ProtoColumnSettings.encode(message.columSettings, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.applyToHeaderFooter != null && Object.hasOwnProperty.call(message, "applyToHeaderFooter"))
            $root.ProtoBoxedBool.encode(message.applyToHeaderFooter, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.applyImmediate != null && Object.hasOwnProperty.call(message, "applyImmediate"))
            $root.ProtoBoxedBool.encode(message.applyImmediate, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.Uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoCDef message, length delimited. Does not implicitly {@link ProtoCDef.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoCDef
     * @static
     * @param {IProtoCDef} message ProtoCDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCDef.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoCDef message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoCDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoCDef} ProtoCDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCDef.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoCDef();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.columSettings = $root.ProtoColumnSettings.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.applyToHeaderFooter = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.applyImmediate = $root.ProtoBoxedBool.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.Uuid = reader.string();
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoCDef message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoCDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoCDef} ProtoCDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCDef.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoCDef message.
     * @function verify
     * @memberof ProtoCDef
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoCDef.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.columSettings != null && message.hasOwnProperty("columSettings")) {
            var error = $root.ProtoColumnSettings.verify(message.columSettings);
            if (error)
                return "columSettings." + error;
        }
        if (message.applyToHeaderFooter != null && message.hasOwnProperty("applyToHeaderFooter")) {
            var error = $root.ProtoBoxedBool.verify(message.applyToHeaderFooter);
            if (error)
                return "applyToHeaderFooter." + error;
        }
        if (message.applyImmediate != null && message.hasOwnProperty("applyImmediate")) {
            var error = $root.ProtoBoxedBool.verify(message.applyImmediate);
            if (error)
                return "applyImmediate." + error;
        }
        if (message.Uuid != null && message.hasOwnProperty("Uuid"))
            if (!$util.isString(message.Uuid))
                return "Uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoCDef message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoCDef
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoCDef} ProtoCDef
     */
    ProtoCDef.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoCDef)
            return object;
        var message = new $root.ProtoCDef();
        if (object.columSettings != null) {
            if (typeof object.columSettings !== "object")
                throw TypeError(".ProtoCDef.columSettings: object expected");
            message.columSettings = $root.ProtoColumnSettings.fromObject(object.columSettings);
        }
        if (object.applyToHeaderFooter != null) {
            if (typeof object.applyToHeaderFooter !== "object")
                throw TypeError(".ProtoCDef.applyToHeaderFooter: object expected");
            message.applyToHeaderFooter = $root.ProtoBoxedBool.fromObject(object.applyToHeaderFooter);
        }
        if (object.applyImmediate != null) {
            if (typeof object.applyImmediate !== "object")
                throw TypeError(".ProtoCDef.applyImmediate: object expected");
            message.applyImmediate = $root.ProtoBoxedBool.fromObject(object.applyImmediate);
        }
        if (object.Uuid != null)
            message.Uuid = String(object.Uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoCDef.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoCDef message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoCDef
     * @static
     * @param {ProtoCDef} message ProtoCDef
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoCDef.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.columSettings = null;
            object.applyToHeaderFooter = null;
            object.applyImmediate = null;
            object.Uuid = "";
        }
        if (message.columSettings != null && message.hasOwnProperty("columSettings"))
            object.columSettings = $root.ProtoColumnSettings.toObject(message.columSettings, options);
        if (message.applyToHeaderFooter != null && message.hasOwnProperty("applyToHeaderFooter"))
            object.applyToHeaderFooter = $root.ProtoBoxedBool.toObject(message.applyToHeaderFooter, options);
        if (message.applyImmediate != null && message.hasOwnProperty("applyImmediate"))
            object.applyImmediate = $root.ProtoBoxedBool.toObject(message.applyImmediate, options);
        if (message.Uuid != null && message.hasOwnProperty("Uuid"))
            object.Uuid = message.Uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoCDef to JSON.
     * @function toJSON
     * @memberof ProtoCDef
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoCDef.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoCDef
     * @function getTypeUrl
     * @memberof ProtoCDef
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoCDef.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoCDef";
    };

    return ProtoCDef;
})();

$root.ProtoPDef = (function() {

    /**
     * Properties of a ProtoPDef.
     * @name IProtoPDef
     * @interface IProtoPDef
     * @property {IProtoBoxedMeasure|null} [pageWidth] ProtoPDef pageWidth
     * @property {IProtoBoxedMeasure|null} [pageDepth] ProtoPDef pageDepth
     * @property {string|null} [Uuid] ProtoPDef Uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoPDef comChannelUUIDs
     */

    /**
     * Constructs a new ProtoPDef.
     * @name ProtoPDef
     * @classdesc Represents a ProtoPDef.
     * @implements IProtoPDef
     * @constructor
     * @param {IProtoPDef=} [properties] Properties to set
     */
    function ProtoPDef(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoPDef pageWidth.
     * @member {IProtoBoxedMeasure|null|undefined} pageWidth
     * @memberof ProtoPDef
     * @instance
     */
    ProtoPDef.prototype.pageWidth = null;

    /**
     * ProtoPDef pageDepth.
     * @member {IProtoBoxedMeasure|null|undefined} pageDepth
     * @memberof ProtoPDef
     * @instance
     */
    ProtoPDef.prototype.pageDepth = null;

    /**
     * ProtoPDef Uuid.
     * @member {string} Uuid
     * @memberof ProtoPDef
     * @instance
     */
    ProtoPDef.prototype.Uuid = "";

    /**
     * ProtoPDef comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoPDef
     * @instance
     */
    ProtoPDef.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoPDef instance using the specified properties.
     * @function create
     * @memberof ProtoPDef
     * @static
     * @param {IProtoPDef=} [properties] Properties to set
     * @returns {ProtoPDef} ProtoPDef instance
     */
    ProtoPDef.create = function create(properties) {
        return new ProtoPDef(properties);
    };

    /**
     * Encodes the specified ProtoPDef message. Does not implicitly {@link ProtoPDef.verify|verify} messages.
     * @function encode
     * @memberof ProtoPDef
     * @static
     * @param {IProtoPDef} message ProtoPDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoPDef.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.pageWidth != null && Object.hasOwnProperty.call(message, "pageWidth"))
            $root.ProtoBoxedMeasure.encode(message.pageWidth, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.pageDepth != null && Object.hasOwnProperty.call(message, "pageDepth"))
            $root.ProtoBoxedMeasure.encode(message.pageDepth, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.Uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoPDef message, length delimited. Does not implicitly {@link ProtoPDef.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoPDef
     * @static
     * @param {IProtoPDef} message ProtoPDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoPDef.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoPDef message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoPDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoPDef} ProtoPDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoPDef.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoPDef();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.pageWidth = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.pageDepth = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.Uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoPDef message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoPDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoPDef} ProtoPDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoPDef.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoPDef message.
     * @function verify
     * @memberof ProtoPDef
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoPDef.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.pageWidth != null && message.hasOwnProperty("pageWidth")) {
            var error = $root.ProtoBoxedMeasure.verify(message.pageWidth);
            if (error)
                return "pageWidth." + error;
        }
        if (message.pageDepth != null && message.hasOwnProperty("pageDepth")) {
            var error = $root.ProtoBoxedMeasure.verify(message.pageDepth);
            if (error)
                return "pageDepth." + error;
        }
        if (message.Uuid != null && message.hasOwnProperty("Uuid"))
            if (!$util.isString(message.Uuid))
                return "Uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoPDef message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoPDef
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoPDef} ProtoPDef
     */
    ProtoPDef.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoPDef)
            return object;
        var message = new $root.ProtoPDef();
        if (object.pageWidth != null) {
            if (typeof object.pageWidth !== "object")
                throw TypeError(".ProtoPDef.pageWidth: object expected");
            message.pageWidth = $root.ProtoBoxedMeasure.fromObject(object.pageWidth);
        }
        if (object.pageDepth != null) {
            if (typeof object.pageDepth !== "object")
                throw TypeError(".ProtoPDef.pageDepth: object expected");
            message.pageDepth = $root.ProtoBoxedMeasure.fromObject(object.pageDepth);
        }
        if (object.Uuid != null)
            message.Uuid = String(object.Uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoPDef.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoPDef message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoPDef
     * @static
     * @param {ProtoPDef} message ProtoPDef
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoPDef.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.pageWidth = null;
            object.pageDepth = null;
            object.Uuid = "";
        }
        if (message.pageWidth != null && message.hasOwnProperty("pageWidth"))
            object.pageWidth = $root.ProtoBoxedMeasure.toObject(message.pageWidth, options);
        if (message.pageDepth != null && message.hasOwnProperty("pageDepth"))
            object.pageDepth = $root.ProtoBoxedMeasure.toObject(message.pageDepth, options);
        if (message.Uuid != null && message.hasOwnProperty("Uuid"))
            object.Uuid = message.Uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoPDef to JSON.
     * @function toJSON
     * @memberof ProtoPDef
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoPDef.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoPDef
     * @function getTypeUrl
     * @memberof ProtoPDef
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoPDef.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoPDef";
    };

    return ProtoPDef;
})();

$root.ProtoPtConfig = (function() {

    /**
     * Properties of a ProtoPtConfig.
     * @name IProtoPtConfig
     * @interface IProtoPtConfig
     * @property {IProtoBoxedMeasure|null} [height] ProtoPtConfig height
     * @property {IProtoBoxedMeasure|null} [lineFeed] ProtoPtConfig lineFeed
     * @property {IProtoBoxedMeasure|null} [characterWidth] ProtoPtConfig characterWidth
     * @property {IProtoBoxedMeasure|null} [spaceWidth] ProtoPtConfig spaceWidth
     * @property {string|null} [Uuid] ProtoPtConfig Uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoPtConfig comChannelUUIDs
     */

    /**
     * Constructs a new ProtoPtConfig.
     * @name ProtoPtConfig
     * @classdesc Represents a ProtoPtConfig.
     * @implements IProtoPtConfig
     * @constructor
     * @param {IProtoPtConfig=} [properties] Properties to set
     */
    function ProtoPtConfig(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoPtConfig height.
     * @member {IProtoBoxedMeasure|null|undefined} height
     * @memberof ProtoPtConfig
     * @instance
     */
    ProtoPtConfig.prototype.height = null;

    /**
     * ProtoPtConfig lineFeed.
     * @member {IProtoBoxedMeasure|null|undefined} lineFeed
     * @memberof ProtoPtConfig
     * @instance
     */
    ProtoPtConfig.prototype.lineFeed = null;

    /**
     * ProtoPtConfig characterWidth.
     * @member {IProtoBoxedMeasure|null|undefined} characterWidth
     * @memberof ProtoPtConfig
     * @instance
     */
    ProtoPtConfig.prototype.characterWidth = null;

    /**
     * ProtoPtConfig spaceWidth.
     * @member {IProtoBoxedMeasure|null|undefined} spaceWidth
     * @memberof ProtoPtConfig
     * @instance
     */
    ProtoPtConfig.prototype.spaceWidth = null;

    /**
     * ProtoPtConfig Uuid.
     * @member {string} Uuid
     * @memberof ProtoPtConfig
     * @instance
     */
    ProtoPtConfig.prototype.Uuid = "";

    /**
     * ProtoPtConfig comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoPtConfig
     * @instance
     */
    ProtoPtConfig.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoPtConfig instance using the specified properties.
     * @function create
     * @memberof ProtoPtConfig
     * @static
     * @param {IProtoPtConfig=} [properties] Properties to set
     * @returns {ProtoPtConfig} ProtoPtConfig instance
     */
    ProtoPtConfig.create = function create(properties) {
        return new ProtoPtConfig(properties);
    };

    /**
     * Encodes the specified ProtoPtConfig message. Does not implicitly {@link ProtoPtConfig.verify|verify} messages.
     * @function encode
     * @memberof ProtoPtConfig
     * @static
     * @param {IProtoPtConfig} message ProtoPtConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoPtConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
            $root.ProtoBoxedMeasure.encode(message.height, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.lineFeed != null && Object.hasOwnProperty.call(message, "lineFeed"))
            $root.ProtoBoxedMeasure.encode(message.lineFeed, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.characterWidth != null && Object.hasOwnProperty.call(message, "characterWidth"))
            $root.ProtoBoxedMeasure.encode(message.characterWidth, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.spaceWidth != null && Object.hasOwnProperty.call(message, "spaceWidth"))
            $root.ProtoBoxedMeasure.encode(message.spaceWidth, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.Uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoPtConfig message, length delimited. Does not implicitly {@link ProtoPtConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoPtConfig
     * @static
     * @param {IProtoPtConfig} message ProtoPtConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoPtConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoPtConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoPtConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoPtConfig} ProtoPtConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoPtConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoPtConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.height = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.lineFeed = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.characterWidth = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.spaceWidth = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.Uuid = reader.string();
                    break;
                }
            case 6: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoPtConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoPtConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoPtConfig} ProtoPtConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoPtConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoPtConfig message.
     * @function verify
     * @memberof ProtoPtConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoPtConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.height != null && message.hasOwnProperty("height")) {
            var error = $root.ProtoBoxedMeasure.verify(message.height);
            if (error)
                return "height." + error;
        }
        if (message.lineFeed != null && message.hasOwnProperty("lineFeed")) {
            var error = $root.ProtoBoxedMeasure.verify(message.lineFeed);
            if (error)
                return "lineFeed." + error;
        }
        if (message.characterWidth != null && message.hasOwnProperty("characterWidth")) {
            var error = $root.ProtoBoxedMeasure.verify(message.characterWidth);
            if (error)
                return "characterWidth." + error;
        }
        if (message.spaceWidth != null && message.hasOwnProperty("spaceWidth")) {
            var error = $root.ProtoBoxedMeasure.verify(message.spaceWidth);
            if (error)
                return "spaceWidth." + error;
        }
        if (message.Uuid != null && message.hasOwnProperty("Uuid"))
            if (!$util.isString(message.Uuid))
                return "Uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoPtConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoPtConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoPtConfig} ProtoPtConfig
     */
    ProtoPtConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoPtConfig)
            return object;
        var message = new $root.ProtoPtConfig();
        if (object.height != null) {
            if (typeof object.height !== "object")
                throw TypeError(".ProtoPtConfig.height: object expected");
            message.height = $root.ProtoBoxedMeasure.fromObject(object.height);
        }
        if (object.lineFeed != null) {
            if (typeof object.lineFeed !== "object")
                throw TypeError(".ProtoPtConfig.lineFeed: object expected");
            message.lineFeed = $root.ProtoBoxedMeasure.fromObject(object.lineFeed);
        }
        if (object.characterWidth != null) {
            if (typeof object.characterWidth !== "object")
                throw TypeError(".ProtoPtConfig.characterWidth: object expected");
            message.characterWidth = $root.ProtoBoxedMeasure.fromObject(object.characterWidth);
        }
        if (object.spaceWidth != null) {
            if (typeof object.spaceWidth !== "object")
                throw TypeError(".ProtoPtConfig.spaceWidth: object expected");
            message.spaceWidth = $root.ProtoBoxedMeasure.fromObject(object.spaceWidth);
        }
        if (object.Uuid != null)
            message.Uuid = String(object.Uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoPtConfig.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoPtConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoPtConfig
     * @static
     * @param {ProtoPtConfig} message ProtoPtConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoPtConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.height = null;
            object.lineFeed = null;
            object.characterWidth = null;
            object.spaceWidth = null;
            object.Uuid = "";
        }
        if (message.height != null && message.hasOwnProperty("height"))
            object.height = $root.ProtoBoxedMeasure.toObject(message.height, options);
        if (message.lineFeed != null && message.hasOwnProperty("lineFeed"))
            object.lineFeed = $root.ProtoBoxedMeasure.toObject(message.lineFeed, options);
        if (message.characterWidth != null && message.hasOwnProperty("characterWidth"))
            object.characterWidth = $root.ProtoBoxedMeasure.toObject(message.characterWidth, options);
        if (message.spaceWidth != null && message.hasOwnProperty("spaceWidth"))
            object.spaceWidth = $root.ProtoBoxedMeasure.toObject(message.spaceWidth, options);
        if (message.Uuid != null && message.hasOwnProperty("Uuid"))
            object.Uuid = message.Uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoPtConfig to JSON.
     * @function toJSON
     * @memberof ProtoPtConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoPtConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoPtConfig
     * @function getTypeUrl
     * @memberof ProtoPtConfig
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoPtConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoPtConfig";
    };

    return ProtoPtConfig;
})();

$root.ProtoUlConfig = (function() {

    /**
     * Properties of a ProtoUlConfig.
     * @name IProtoUlConfig
     * @interface IProtoUlConfig
     * @property {ProtoUnderlineMode|null} [mode] ProtoUlConfig mode
     * @property {string|null} [Uuid] ProtoUlConfig Uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoUlConfig comChannelUUIDs
     */

    /**
     * Constructs a new ProtoUlConfig.
     * @name ProtoUlConfig
     * @classdesc Represents a ProtoUlConfig.
     * @implements IProtoUlConfig
     * @constructor
     * @param {IProtoUlConfig=} [properties] Properties to set
     */
    function ProtoUlConfig(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoUlConfig mode.
     * @member {ProtoUnderlineMode} mode
     * @memberof ProtoUlConfig
     * @instance
     */
    ProtoUlConfig.prototype.mode = 0;

    /**
     * ProtoUlConfig Uuid.
     * @member {string} Uuid
     * @memberof ProtoUlConfig
     * @instance
     */
    ProtoUlConfig.prototype.Uuid = "";

    /**
     * ProtoUlConfig comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoUlConfig
     * @instance
     */
    ProtoUlConfig.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoUlConfig instance using the specified properties.
     * @function create
     * @memberof ProtoUlConfig
     * @static
     * @param {IProtoUlConfig=} [properties] Properties to set
     * @returns {ProtoUlConfig} ProtoUlConfig instance
     */
    ProtoUlConfig.create = function create(properties) {
        return new ProtoUlConfig(properties);
    };

    /**
     * Encodes the specified ProtoUlConfig message. Does not implicitly {@link ProtoUlConfig.verify|verify} messages.
     * @function encode
     * @memberof ProtoUlConfig
     * @static
     * @param {IProtoUlConfig} message ProtoUlConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoUlConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mode);
        if (message.Uuid != null && Object.hasOwnProperty.call(message, "Uuid"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.Uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoUlConfig message, length delimited. Does not implicitly {@link ProtoUlConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoUlConfig
     * @static
     * @param {IProtoUlConfig} message ProtoUlConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoUlConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoUlConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoUlConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoUlConfig} ProtoUlConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoUlConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoUlConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.mode = reader.int32();
                    break;
                }
            case 2: {
                    message.Uuid = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoUlConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoUlConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoUlConfig} ProtoUlConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoUlConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoUlConfig message.
     * @function verify
     * @memberof ProtoUlConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoUlConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.Uuid != null && message.hasOwnProperty("Uuid"))
            if (!$util.isString(message.Uuid))
                return "Uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoUlConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoUlConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoUlConfig} ProtoUlConfig
     */
    ProtoUlConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoUlConfig)
            return object;
        var message = new $root.ProtoUlConfig();
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "DUMMY_UNDERLINE_MODE":
        case 0:
            message.mode = 0;
            break;
        case "WORDS_NO_BLANKS":
        case 1:
            message.mode = 1;
            break;
        case "WORDS_AND_BLANKS":
        case 2:
            message.mode = 2;
            break;
        case "CHARACTERS_NO_BLANKS":
        case 3:
            message.mode = 3;
            break;
        case "CHARACTERS_AND_BLANKS":
        case 4:
            message.mode = 4;
            break;
        }
        if (object.Uuid != null)
            message.Uuid = String(object.Uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoUlConfig.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoUlConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoUlConfig
     * @static
     * @param {ProtoUlConfig} message ProtoUlConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoUlConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.mode = options.enums === String ? "DUMMY_UNDERLINE_MODE" : 0;
            object.Uuid = "";
        }
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.ProtoUnderlineMode[message.mode] === undefined ? message.mode : $root.ProtoUnderlineMode[message.mode] : message.mode;
        if (message.Uuid != null && message.hasOwnProperty("Uuid"))
            object.Uuid = message.Uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoUlConfig to JSON.
     * @function toJSON
     * @memberof ProtoUlConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoUlConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoUlConfig
     * @function getTypeUrl
     * @memberof ProtoUlConfig
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoUlConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoUlConfig";
    };

    return ProtoUlConfig;
})();

/**
 * ProtoPageMode enum.
 * @name ProtoPageMode
 * @enum {number}
 * @property {number} NEXT_PAGE=0 NEXT_PAGE value
 * @property {number} NEXT_RECTO_PAGE=1 NEXT_RECTO_PAGE value
 * @property {number} NEXT_VERSO_PAGE=2 NEXT_VERSO_PAGE value
 */
$root.ProtoPageMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NEXT_PAGE"] = 0;
    values[valuesById[1] = "NEXT_RECTO_PAGE"] = 1;
    values[valuesById[2] = "NEXT_VERSO_PAGE"] = 2;
    return values;
})();

/**
 * ProtoPageOrientation enum.
 * @name ProtoPageOrientation
 * @enum {number}
 * @property {number} UNSET=0 UNSET value
 * @property {number} PORTRAIT=1 PORTRAIT value
 * @property {number} LANDSCAPE=2 LANDSCAPE value
 * @property {number} INVERSE_PORTRAIT=3 INVERSE_PORTRAIT value
 * @property {number} INVERSE_LANDSCAPE=4 INVERSE_LANDSCAPE value
 */
$root.ProtoPageOrientation = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "UNSET"] = 0;
    values[valuesById[1] = "PORTRAIT"] = 1;
    values[valuesById[2] = "LANDSCAPE"] = 2;
    values[valuesById[3] = "INVERSE_PORTRAIT"] = 3;
    values[valuesById[4] = "INVERSE_LANDSCAPE"] = 4;
    return values;
})();

$root.ProtoNewPage = (function() {

    /**
     * Properties of a ProtoNewPage.
     * @name IProtoNewPage
     * @interface IProtoNewPage
     * @property {number|null} [paperTray] ProtoNewPage paperTray
     * @property {number|null} [paperCount] ProtoNewPage paperCount
     * @property {ProtoPageMode|null} [pageMode] ProtoNewPage pageMode
     * @property {ProtoPageOrientation|null} [pageOrientation] ProtoNewPage pageOrientation
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoNewPage comChannelUUIDs
     */

    /**
     * Constructs a new ProtoNewPage.
     * @name ProtoNewPage
     * @classdesc Represents a ProtoNewPage.
     * @implements IProtoNewPage
     * @constructor
     * @param {IProtoNewPage=} [properties] Properties to set
     */
    function ProtoNewPage(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoNewPage paperTray.
     * @member {number} paperTray
     * @memberof ProtoNewPage
     * @instance
     */
    ProtoNewPage.prototype.paperTray = 0;

    /**
     * ProtoNewPage paperCount.
     * @member {number} paperCount
     * @memberof ProtoNewPage
     * @instance
     */
    ProtoNewPage.prototype.paperCount = 0;

    /**
     * ProtoNewPage pageMode.
     * @member {ProtoPageMode} pageMode
     * @memberof ProtoNewPage
     * @instance
     */
    ProtoNewPage.prototype.pageMode = 0;

    /**
     * ProtoNewPage pageOrientation.
     * @member {ProtoPageOrientation} pageOrientation
     * @memberof ProtoNewPage
     * @instance
     */
    ProtoNewPage.prototype.pageOrientation = 0;

    /**
     * ProtoNewPage comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoNewPage
     * @instance
     */
    ProtoNewPage.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoNewPage instance using the specified properties.
     * @function create
     * @memberof ProtoNewPage
     * @static
     * @param {IProtoNewPage=} [properties] Properties to set
     * @returns {ProtoNewPage} ProtoNewPage instance
     */
    ProtoNewPage.create = function create(properties) {
        return new ProtoNewPage(properties);
    };

    /**
     * Encodes the specified ProtoNewPage message. Does not implicitly {@link ProtoNewPage.verify|verify} messages.
     * @function encode
     * @memberof ProtoNewPage
     * @static
     * @param {IProtoNewPage} message ProtoNewPage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoNewPage.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.paperTray != null && Object.hasOwnProperty.call(message, "paperTray"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.paperTray);
        if (message.paperCount != null && Object.hasOwnProperty.call(message, "paperCount"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.paperCount);
        if (message.pageMode != null && Object.hasOwnProperty.call(message, "pageMode"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageMode);
        if (message.pageOrientation != null && Object.hasOwnProperty.call(message, "pageOrientation"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pageOrientation);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoNewPage message, length delimited. Does not implicitly {@link ProtoNewPage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoNewPage
     * @static
     * @param {IProtoNewPage} message ProtoNewPage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoNewPage.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoNewPage message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoNewPage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoNewPage} ProtoNewPage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoNewPage.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoNewPage();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.paperTray = reader.uint32();
                    break;
                }
            case 2: {
                    message.paperCount = reader.uint32();
                    break;
                }
            case 3: {
                    message.pageMode = reader.int32();
                    break;
                }
            case 4: {
                    message.pageOrientation = reader.int32();
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoNewPage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoNewPage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoNewPage} ProtoNewPage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoNewPage.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoNewPage message.
     * @function verify
     * @memberof ProtoNewPage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoNewPage.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.paperTray != null && message.hasOwnProperty("paperTray"))
            if (!$util.isInteger(message.paperTray))
                return "paperTray: integer expected";
        if (message.paperCount != null && message.hasOwnProperty("paperCount"))
            if (!$util.isInteger(message.paperCount))
                return "paperCount: integer expected";
        if (message.pageMode != null && message.hasOwnProperty("pageMode"))
            switch (message.pageMode) {
            default:
                return "pageMode: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.pageOrientation != null && message.hasOwnProperty("pageOrientation"))
            switch (message.pageOrientation) {
            default:
                return "pageOrientation: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoNewPage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoNewPage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoNewPage} ProtoNewPage
     */
    ProtoNewPage.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoNewPage)
            return object;
        var message = new $root.ProtoNewPage();
        if (object.paperTray != null)
            message.paperTray = object.paperTray >>> 0;
        if (object.paperCount != null)
            message.paperCount = object.paperCount >>> 0;
        switch (object.pageMode) {
        default:
            if (typeof object.pageMode === "number") {
                message.pageMode = object.pageMode;
                break;
            }
            break;
        case "NEXT_PAGE":
        case 0:
            message.pageMode = 0;
            break;
        case "NEXT_RECTO_PAGE":
        case 1:
            message.pageMode = 1;
            break;
        case "NEXT_VERSO_PAGE":
        case 2:
            message.pageMode = 2;
            break;
        }
        switch (object.pageOrientation) {
        default:
            if (typeof object.pageOrientation === "number") {
                message.pageOrientation = object.pageOrientation;
                break;
            }
            break;
        case "UNSET":
        case 0:
            message.pageOrientation = 0;
            break;
        case "PORTRAIT":
        case 1:
            message.pageOrientation = 1;
            break;
        case "LANDSCAPE":
        case 2:
            message.pageOrientation = 2;
            break;
        case "INVERSE_PORTRAIT":
        case 3:
            message.pageOrientation = 3;
            break;
        case "INVERSE_LANDSCAPE":
        case 4:
            message.pageOrientation = 4;
            break;
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoNewPage.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoNewPage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoNewPage
     * @static
     * @param {ProtoNewPage} message ProtoNewPage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoNewPage.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.paperTray = 0;
            object.paperCount = 0;
            object.pageMode = options.enums === String ? "NEXT_PAGE" : 0;
            object.pageOrientation = options.enums === String ? "UNSET" : 0;
        }
        if (message.paperTray != null && message.hasOwnProperty("paperTray"))
            object.paperTray = message.paperTray;
        if (message.paperCount != null && message.hasOwnProperty("paperCount"))
            object.paperCount = message.paperCount;
        if (message.pageMode != null && message.hasOwnProperty("pageMode"))
            object.pageMode = options.enums === String ? $root.ProtoPageMode[message.pageMode] === undefined ? message.pageMode : $root.ProtoPageMode[message.pageMode] : message.pageMode;
        if (message.pageOrientation != null && message.hasOwnProperty("pageOrientation"))
            object.pageOrientation = options.enums === String ? $root.ProtoPageOrientation[message.pageOrientation] === undefined ? message.pageOrientation : $root.ProtoPageOrientation[message.pageOrientation] : message.pageOrientation;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoNewPage to JSON.
     * @function toJSON
     * @memberof ProtoNewPage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoNewPage.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoNewPage
     * @function getTypeUrl
     * @memberof ProtoNewPage
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoNewPage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoNewPage";
    };

    return ProtoNewPage;
})();

$root.ProtoIndentation = (function() {

    /**
     * Properties of a ProtoIndentation.
     * @name IProtoIndentation
     * @interface IProtoIndentation
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoIndentation _children
     * @property {IProtoDocumentElement|null} [parent] ProtoIndentation parent
     * @property {IProtoBoxedMeasure|null} [left] ProtoIndentation left
     * @property {IProtoBoxedMeasure|null} [right] ProtoIndentation right
     * @property {string|null} [uuid] ProtoIndentation uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoIndentation comChannelUUIDs
     */

    /**
     * Constructs a new ProtoIndentation.
     * @name ProtoIndentation
     * @classdesc Represents a ProtoIndentation.
     * @implements IProtoIndentation
     * @constructor
     * @param {IProtoIndentation=} [properties] Properties to set
     */
    function ProtoIndentation(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoIndentation _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoIndentation
     * @instance
     */
    ProtoIndentation.prototype._children = $util.emptyArray;

    /**
     * ProtoIndentation parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoIndentation
     * @instance
     */
    ProtoIndentation.prototype.parent = null;

    /**
     * ProtoIndentation left.
     * @member {IProtoBoxedMeasure|null|undefined} left
     * @memberof ProtoIndentation
     * @instance
     */
    ProtoIndentation.prototype.left = null;

    /**
     * ProtoIndentation right.
     * @member {IProtoBoxedMeasure|null|undefined} right
     * @memberof ProtoIndentation
     * @instance
     */
    ProtoIndentation.prototype.right = null;

    /**
     * ProtoIndentation uuid.
     * @member {string} uuid
     * @memberof ProtoIndentation
     * @instance
     */
    ProtoIndentation.prototype.uuid = "";

    /**
     * ProtoIndentation comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoIndentation
     * @instance
     */
    ProtoIndentation.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoIndentation instance using the specified properties.
     * @function create
     * @memberof ProtoIndentation
     * @static
     * @param {IProtoIndentation=} [properties] Properties to set
     * @returns {ProtoIndentation} ProtoIndentation instance
     */
    ProtoIndentation.create = function create(properties) {
        return new ProtoIndentation(properties);
    };

    /**
     * Encodes the specified ProtoIndentation message. Does not implicitly {@link ProtoIndentation.verify|verify} messages.
     * @function encode
     * @memberof ProtoIndentation
     * @static
     * @param {IProtoIndentation} message ProtoIndentation message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoIndentation.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.left != null && Object.hasOwnProperty.call(message, "left"))
            $root.ProtoBoxedMeasure.encode(message.left, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.right != null && Object.hasOwnProperty.call(message, "right"))
            $root.ProtoBoxedMeasure.encode(message.right, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoIndentation message, length delimited. Does not implicitly {@link ProtoIndentation.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoIndentation
     * @static
     * @param {IProtoIndentation} message ProtoIndentation message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoIndentation.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoIndentation message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoIndentation
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoIndentation} ProtoIndentation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoIndentation.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoIndentation();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.left = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.right = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.uuid = reader.string();
                    break;
                }
            case 6: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoIndentation message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoIndentation
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoIndentation} ProtoIndentation
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoIndentation.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoIndentation message.
     * @function verify
     * @memberof ProtoIndentation
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoIndentation.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.left != null && message.hasOwnProperty("left")) {
            var error = $root.ProtoBoxedMeasure.verify(message.left);
            if (error)
                return "left." + error;
        }
        if (message.right != null && message.hasOwnProperty("right")) {
            var error = $root.ProtoBoxedMeasure.verify(message.right);
            if (error)
                return "right." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoIndentation message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoIndentation
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoIndentation} ProtoIndentation
     */
    ProtoIndentation.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoIndentation)
            return object;
        var message = new $root.ProtoIndentation();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoIndentation._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoIndentation._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoIndentation.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.left != null) {
            if (typeof object.left !== "object")
                throw TypeError(".ProtoIndentation.left: object expected");
            message.left = $root.ProtoBoxedMeasure.fromObject(object.left);
        }
        if (object.right != null) {
            if (typeof object.right !== "object")
                throw TypeError(".ProtoIndentation.right: object expected");
            message.right = $root.ProtoBoxedMeasure.fromObject(object.right);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoIndentation.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoIndentation message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoIndentation
     * @static
     * @param {ProtoIndentation} message ProtoIndentation
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoIndentation.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.left = null;
            object.right = null;
            object.uuid = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.left != null && message.hasOwnProperty("left"))
            object.left = $root.ProtoBoxedMeasure.toObject(message.left, options);
        if (message.right != null && message.hasOwnProperty("right"))
            object.right = $root.ProtoBoxedMeasure.toObject(message.right, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoIndentation to JSON.
     * @function toJSON
     * @memberof ProtoIndentation
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoIndentation.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoIndentation
     * @function getTypeUrl
     * @memberof ProtoIndentation
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoIndentation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoIndentation";
    };

    return ProtoIndentation;
})();

$root.ProtoCarryOver = (function() {

    /**
     * Properties of a ProtoCarryOver.
     * @name IProtoCarryOver
     * @interface IProtoCarryOver
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoCarryOver _children
     * @property {IProtoDocumentElement|null} [parent] ProtoCarryOver parent
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoCarryOver comChannelUUIDs
     */

    /**
     * Constructs a new ProtoCarryOver.
     * @name ProtoCarryOver
     * @classdesc Represents a ProtoCarryOver.
     * @implements IProtoCarryOver
     * @constructor
     * @param {IProtoCarryOver=} [properties] Properties to set
     */
    function ProtoCarryOver(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoCarryOver _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoCarryOver
     * @instance
     */
    ProtoCarryOver.prototype._children = $util.emptyArray;

    /**
     * ProtoCarryOver parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoCarryOver
     * @instance
     */
    ProtoCarryOver.prototype.parent = null;

    /**
     * ProtoCarryOver comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoCarryOver
     * @instance
     */
    ProtoCarryOver.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoCarryOver instance using the specified properties.
     * @function create
     * @memberof ProtoCarryOver
     * @static
     * @param {IProtoCarryOver=} [properties] Properties to set
     * @returns {ProtoCarryOver} ProtoCarryOver instance
     */
    ProtoCarryOver.create = function create(properties) {
        return new ProtoCarryOver(properties);
    };

    /**
     * Encodes the specified ProtoCarryOver message. Does not implicitly {@link ProtoCarryOver.verify|verify} messages.
     * @function encode
     * @memberof ProtoCarryOver
     * @static
     * @param {IProtoCarryOver} message ProtoCarryOver message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCarryOver.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoCarryOver message, length delimited. Does not implicitly {@link ProtoCarryOver.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoCarryOver
     * @static
     * @param {IProtoCarryOver} message ProtoCarryOver message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCarryOver.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoCarryOver message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoCarryOver
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoCarryOver} ProtoCarryOver
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCarryOver.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoCarryOver();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoCarryOver message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoCarryOver
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoCarryOver} ProtoCarryOver
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCarryOver.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoCarryOver message.
     * @function verify
     * @memberof ProtoCarryOver
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoCarryOver.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoCarryOver message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoCarryOver
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoCarryOver} ProtoCarryOver
     */
    ProtoCarryOver.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoCarryOver)
            return object;
        var message = new $root.ProtoCarryOver();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoCarryOver._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoCarryOver._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoCarryOver.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoCarryOver.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoCarryOver message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoCarryOver
     * @static
     * @param {ProtoCarryOver} message ProtoCarryOver
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoCarryOver.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults)
            object.parent = null;
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoCarryOver to JSON.
     * @function toJSON
     * @memberof ProtoCarryOver
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoCarryOver.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoCarryOver
     * @function getTypeUrl
     * @memberof ProtoCarryOver
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoCarryOver.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoCarryOver";
    };

    return ProtoCarryOver;
})();

$root.ProtoLoopEntry = (function() {

    /**
     * Properties of a ProtoLoopEntry.
     * @name IProtoLoopEntry
     * @interface IProtoLoopEntry
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoLoopEntry _children
     * @property {IProtoDocumentElement|null} [parent] ProtoLoopEntry parent
     * @property {string|null} [path] ProtoLoopEntry path
     * @property {number|Long|null} [index] ProtoLoopEntry index
     * @property {string|null} [uuid] ProtoLoopEntry uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoLoopEntry comChannelUUIDs
     */

    /**
     * Constructs a new ProtoLoopEntry.
     * @name ProtoLoopEntry
     * @classdesc Represents a ProtoLoopEntry.
     * @implements IProtoLoopEntry
     * @constructor
     * @param {IProtoLoopEntry=} [properties] Properties to set
     */
    function ProtoLoopEntry(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoLoopEntry _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoLoopEntry
     * @instance
     */
    ProtoLoopEntry.prototype._children = $util.emptyArray;

    /**
     * ProtoLoopEntry parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoLoopEntry
     * @instance
     */
    ProtoLoopEntry.prototype.parent = null;

    /**
     * ProtoLoopEntry path.
     * @member {string} path
     * @memberof ProtoLoopEntry
     * @instance
     */
    ProtoLoopEntry.prototype.path = "";

    /**
     * ProtoLoopEntry index.
     * @member {number|Long} index
     * @memberof ProtoLoopEntry
     * @instance
     */
    ProtoLoopEntry.prototype.index = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * ProtoLoopEntry uuid.
     * @member {string} uuid
     * @memberof ProtoLoopEntry
     * @instance
     */
    ProtoLoopEntry.prototype.uuid = "";

    /**
     * ProtoLoopEntry comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoLoopEntry
     * @instance
     */
    ProtoLoopEntry.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoLoopEntry instance using the specified properties.
     * @function create
     * @memberof ProtoLoopEntry
     * @static
     * @param {IProtoLoopEntry=} [properties] Properties to set
     * @returns {ProtoLoopEntry} ProtoLoopEntry instance
     */
    ProtoLoopEntry.create = function create(properties) {
        return new ProtoLoopEntry(properties);
    };

    /**
     * Encodes the specified ProtoLoopEntry message. Does not implicitly {@link ProtoLoopEntry.verify|verify} messages.
     * @function encode
     * @memberof ProtoLoopEntry
     * @static
     * @param {IProtoLoopEntry} message ProtoLoopEntry message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLoopEntry.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);
        if (message.index != null && Object.hasOwnProperty.call(message, "index"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.index);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoLoopEntry message, length delimited. Does not implicitly {@link ProtoLoopEntry.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoLoopEntry
     * @static
     * @param {IProtoLoopEntry} message ProtoLoopEntry message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLoopEntry.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoLoopEntry message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoLoopEntry
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoLoopEntry} ProtoLoopEntry
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLoopEntry.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoLoopEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.path = reader.string();
                    break;
                }
            case 4: {
                    message.index = reader.uint64();
                    break;
                }
            case 5: {
                    message.uuid = reader.string();
                    break;
                }
            case 6: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoLoopEntry message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoLoopEntry
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoLoopEntry} ProtoLoopEntry
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLoopEntry.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoLoopEntry message.
     * @function verify
     * @memberof ProtoLoopEntry
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoLoopEntry.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.path != null && message.hasOwnProperty("path"))
            if (!$util.isString(message.path))
                return "path: string expected";
        if (message.index != null && message.hasOwnProperty("index"))
            if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                return "index: integer|Long expected";
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoLoopEntry message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoLoopEntry
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoLoopEntry} ProtoLoopEntry
     */
    ProtoLoopEntry.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoLoopEntry)
            return object;
        var message = new $root.ProtoLoopEntry();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoLoopEntry._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoLoopEntry._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoLoopEntry.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.path != null)
            message.path = String(object.path);
        if (object.index != null)
            if ($util.Long)
                (message.index = $util.Long.fromValue(object.index)).unsigned = true;
            else if (typeof object.index === "string")
                message.index = parseInt(object.index, 10);
            else if (typeof object.index === "number")
                message.index = object.index;
            else if (typeof object.index === "object")
                message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber(true);
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoLoopEntry.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoLoopEntry message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoLoopEntry
     * @static
     * @param {ProtoLoopEntry} message ProtoLoopEntry
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoLoopEntry.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.path = "";
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.index = options.longs === String ? "0" : 0;
            object.uuid = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.path != null && message.hasOwnProperty("path"))
            object.path = message.path;
        if (message.index != null && message.hasOwnProperty("index"))
            if (typeof message.index === "number")
                object.index = options.longs === String ? String(message.index) : message.index;
            else
                object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber(true) : message.index;
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoLoopEntry to JSON.
     * @function toJSON
     * @memberof ProtoLoopEntry
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoLoopEntry.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoLoopEntry
     * @function getTypeUrl
     * @memberof ProtoLoopEntry
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoLoopEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoLoopEntry";
    };

    return ProtoLoopEntry;
})();

$root.ProtoLoop = (function() {

    /**
     * Properties of a ProtoLoop.
     * @name IProtoLoop
     * @interface IProtoLoop
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoLoop _children
     * @property {IProtoDocumentElement|null} [parent] ProtoLoop parent
     * @property {string|null} [path] ProtoLoop path
     * @property {string|null} [uuid] ProtoLoop uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoLoop comChannelUUIDs
     */

    /**
     * Constructs a new ProtoLoop.
     * @name ProtoLoop
     * @classdesc Represents a ProtoLoop.
     * @implements IProtoLoop
     * @constructor
     * @param {IProtoLoop=} [properties] Properties to set
     */
    function ProtoLoop(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoLoop _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoLoop
     * @instance
     */
    ProtoLoop.prototype._children = $util.emptyArray;

    /**
     * ProtoLoop parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoLoop
     * @instance
     */
    ProtoLoop.prototype.parent = null;

    /**
     * ProtoLoop path.
     * @member {string} path
     * @memberof ProtoLoop
     * @instance
     */
    ProtoLoop.prototype.path = "";

    /**
     * ProtoLoop uuid.
     * @member {string} uuid
     * @memberof ProtoLoop
     * @instance
     */
    ProtoLoop.prototype.uuid = "";

    /**
     * ProtoLoop comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoLoop
     * @instance
     */
    ProtoLoop.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoLoop instance using the specified properties.
     * @function create
     * @memberof ProtoLoop
     * @static
     * @param {IProtoLoop=} [properties] Properties to set
     * @returns {ProtoLoop} ProtoLoop instance
     */
    ProtoLoop.create = function create(properties) {
        return new ProtoLoop(properties);
    };

    /**
     * Encodes the specified ProtoLoop message. Does not implicitly {@link ProtoLoop.verify|verify} messages.
     * @function encode
     * @memberof ProtoLoop
     * @static
     * @param {IProtoLoop} message ProtoLoop message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLoop.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoLoop message, length delimited. Does not implicitly {@link ProtoLoop.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoLoop
     * @static
     * @param {IProtoLoop} message ProtoLoop message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLoop.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoLoop message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoLoop
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoLoop} ProtoLoop
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLoop.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoLoop();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.path = reader.string();
                    break;
                }
            case 4: {
                    message.uuid = reader.string();
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoLoop message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoLoop
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoLoop} ProtoLoop
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLoop.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoLoop message.
     * @function verify
     * @memberof ProtoLoop
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoLoop.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.path != null && message.hasOwnProperty("path"))
            if (!$util.isString(message.path))
                return "path: string expected";
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoLoop message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoLoop
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoLoop} ProtoLoop
     */
    ProtoLoop.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoLoop)
            return object;
        var message = new $root.ProtoLoop();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoLoop._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoLoop._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoLoop.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.path != null)
            message.path = String(object.path);
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoLoop.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoLoop message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoLoop
     * @static
     * @param {ProtoLoop} message ProtoLoop
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoLoop.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.path = "";
            object.uuid = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.path != null && message.hasOwnProperty("path"))
            object.path = message.path;
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoLoop to JSON.
     * @function toJSON
     * @memberof ProtoLoop
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoLoop.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoLoop
     * @function getTypeUrl
     * @memberof ProtoLoop
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoLoop.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoLoop";
    };

    return ProtoLoop;
})();

/**
 * ProtoSubTotalPosition enum.
 * @name ProtoSubTotalPosition
 * @enum {number}
 * @property {number} POSITION_ABOVE_FOOTER=0 POSITION_ABOVE_FOOTER value
 * @property {number} POSITION_BELOW_CONTENT=1 POSITION_BELOW_CONTENT value
 */
$root.ProtoSubTotalPosition = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "POSITION_ABOVE_FOOTER"] = 0;
    values[valuesById[1] = "POSITION_BELOW_CONTENT"] = 1;
    return values;
})();

$root.ProtoSubTotal = (function() {

    /**
     * Properties of a ProtoSubTotal.
     * @name IProtoSubTotal
     * @interface IProtoSubTotal
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoSubTotal _children
     * @property {IProtoDocumentElement|null} [parent] ProtoSubTotal parent
     * @property {boolean|null} [applyImmediate] ProtoSubTotal applyImmediate
     * @property {ProtoSubTotalPosition|null} [position] ProtoSubTotal position
     * @property {IProtoMeasure|null} [height] ProtoSubTotal height
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoSubTotal comChannelUUIDs
     */

    /**
     * Constructs a new ProtoSubTotal.
     * @name ProtoSubTotal
     * @classdesc Represents a ProtoSubTotal.
     * @implements IProtoSubTotal
     * @constructor
     * @param {IProtoSubTotal=} [properties] Properties to set
     */
    function ProtoSubTotal(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSubTotal _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoSubTotal
     * @instance
     */
    ProtoSubTotal.prototype._children = $util.emptyArray;

    /**
     * ProtoSubTotal parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoSubTotal
     * @instance
     */
    ProtoSubTotal.prototype.parent = null;

    /**
     * ProtoSubTotal applyImmediate.
     * @member {boolean} applyImmediate
     * @memberof ProtoSubTotal
     * @instance
     */
    ProtoSubTotal.prototype.applyImmediate = false;

    /**
     * ProtoSubTotal position.
     * @member {ProtoSubTotalPosition} position
     * @memberof ProtoSubTotal
     * @instance
     */
    ProtoSubTotal.prototype.position = 0;

    /**
     * ProtoSubTotal height.
     * @member {IProtoMeasure|null|undefined} height
     * @memberof ProtoSubTotal
     * @instance
     */
    ProtoSubTotal.prototype.height = null;

    /**
     * ProtoSubTotal comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoSubTotal
     * @instance
     */
    ProtoSubTotal.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoSubTotal instance using the specified properties.
     * @function create
     * @memberof ProtoSubTotal
     * @static
     * @param {IProtoSubTotal=} [properties] Properties to set
     * @returns {ProtoSubTotal} ProtoSubTotal instance
     */
    ProtoSubTotal.create = function create(properties) {
        return new ProtoSubTotal(properties);
    };

    /**
     * Encodes the specified ProtoSubTotal message. Does not implicitly {@link ProtoSubTotal.verify|verify} messages.
     * @function encode
     * @memberof ProtoSubTotal
     * @static
     * @param {IProtoSubTotal} message ProtoSubTotal message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSubTotal.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.applyImmediate != null && Object.hasOwnProperty.call(message, "applyImmediate"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.applyImmediate);
        if (message.position != null && Object.hasOwnProperty.call(message, "position"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.position);
        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
            $root.ProtoMeasure.encode(message.height, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoSubTotal message, length delimited. Does not implicitly {@link ProtoSubTotal.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSubTotal
     * @static
     * @param {IProtoSubTotal} message ProtoSubTotal message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSubTotal.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSubTotal message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSubTotal
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSubTotal} ProtoSubTotal
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSubTotal.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSubTotal();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.applyImmediate = reader.bool();
                    break;
                }
            case 4: {
                    message.position = reader.int32();
                    break;
                }
            case 5: {
                    message.height = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSubTotal message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSubTotal
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSubTotal} ProtoSubTotal
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSubTotal.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSubTotal message.
     * @function verify
     * @memberof ProtoSubTotal
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSubTotal.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.applyImmediate != null && message.hasOwnProperty("applyImmediate"))
            if (typeof message.applyImmediate !== "boolean")
                return "applyImmediate: boolean expected";
        if (message.position != null && message.hasOwnProperty("position"))
            switch (message.position) {
            default:
                return "position: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.height != null && message.hasOwnProperty("height")) {
            var error = $root.ProtoMeasure.verify(message.height);
            if (error)
                return "height." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoSubTotal message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSubTotal
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSubTotal} ProtoSubTotal
     */
    ProtoSubTotal.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSubTotal)
            return object;
        var message = new $root.ProtoSubTotal();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoSubTotal._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoSubTotal._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoSubTotal.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.applyImmediate != null)
            message.applyImmediate = Boolean(object.applyImmediate);
        switch (object.position) {
        default:
            if (typeof object.position === "number") {
                message.position = object.position;
                break;
            }
            break;
        case "POSITION_ABOVE_FOOTER":
        case 0:
            message.position = 0;
            break;
        case "POSITION_BELOW_CONTENT":
        case 1:
            message.position = 1;
            break;
        }
        if (object.height != null) {
            if (typeof object.height !== "object")
                throw TypeError(".ProtoSubTotal.height: object expected");
            message.height = $root.ProtoMeasure.fromObject(object.height);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoSubTotal.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoSubTotal message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSubTotal
     * @static
     * @param {ProtoSubTotal} message ProtoSubTotal
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSubTotal.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.applyImmediate = false;
            object.position = options.enums === String ? "POSITION_ABOVE_FOOTER" : 0;
            object.height = null;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.applyImmediate != null && message.hasOwnProperty("applyImmediate"))
            object.applyImmediate = message.applyImmediate;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = options.enums === String ? $root.ProtoSubTotalPosition[message.position] === undefined ? message.position : $root.ProtoSubTotalPosition[message.position] : message.position;
        if (message.height != null && message.hasOwnProperty("height"))
            object.height = $root.ProtoMeasure.toObject(message.height, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoSubTotal to JSON.
     * @function toJSON
     * @memberof ProtoSubTotal
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSubTotal.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSubTotal
     * @function getTypeUrl
     * @memberof ProtoSubTotal
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSubTotal.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSubTotal";
    };

    return ProtoSubTotal;
})();

$root.ProtoWsArea = (function() {

    /**
     * Properties of a ProtoWsArea.
     * @name IProtoWsArea
     * @interface IProtoWsArea
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoWsArea _children
     * @property {IProtoDocumentElement|null} [parent] ProtoWsArea parent
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoWsArea comChannelUUIDs
     */

    /**
     * Constructs a new ProtoWsArea.
     * @name ProtoWsArea
     * @classdesc Represents a ProtoWsArea.
     * @implements IProtoWsArea
     * @constructor
     * @param {IProtoWsArea=} [properties] Properties to set
     */
    function ProtoWsArea(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoWsArea _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoWsArea
     * @instance
     */
    ProtoWsArea.prototype._children = $util.emptyArray;

    /**
     * ProtoWsArea parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoWsArea
     * @instance
     */
    ProtoWsArea.prototype.parent = null;

    /**
     * ProtoWsArea comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoWsArea
     * @instance
     */
    ProtoWsArea.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoWsArea instance using the specified properties.
     * @function create
     * @memberof ProtoWsArea
     * @static
     * @param {IProtoWsArea=} [properties] Properties to set
     * @returns {ProtoWsArea} ProtoWsArea instance
     */
    ProtoWsArea.create = function create(properties) {
        return new ProtoWsArea(properties);
    };

    /**
     * Encodes the specified ProtoWsArea message. Does not implicitly {@link ProtoWsArea.verify|verify} messages.
     * @function encode
     * @memberof ProtoWsArea
     * @static
     * @param {IProtoWsArea} message ProtoWsArea message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoWsArea.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoWsArea message, length delimited. Does not implicitly {@link ProtoWsArea.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoWsArea
     * @static
     * @param {IProtoWsArea} message ProtoWsArea message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoWsArea.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoWsArea message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoWsArea
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoWsArea} ProtoWsArea
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoWsArea.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoWsArea();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoWsArea message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoWsArea
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoWsArea} ProtoWsArea
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoWsArea.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoWsArea message.
     * @function verify
     * @memberof ProtoWsArea
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoWsArea.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoWsArea message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoWsArea
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoWsArea} ProtoWsArea
     */
    ProtoWsArea.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoWsArea)
            return object;
        var message = new $root.ProtoWsArea();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoWsArea._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoWsArea._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoWsArea.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoWsArea.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoWsArea message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoWsArea
     * @static
     * @param {ProtoWsArea} message ProtoWsArea
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoWsArea.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults)
            object.parent = null;
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoWsArea to JSON.
     * @function toJSON
     * @memberof ProtoWsArea
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoWsArea.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoWsArea
     * @function getTypeUrl
     * @memberof ProtoWsArea
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoWsArea.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoWsArea";
    };

    return ProtoWsArea;
})();

$root.ProtoRule = (function() {

    /**
     * Properties of a ProtoRule.
     * @name IProtoRule
     * @interface IProtoRule
     * @property {IProtoMeasure|null} [xOffset] ProtoRule xOffset
     * @property {IProtoMeasure|null} [yOffset] ProtoRule yOffset
     * @property {IProtoMeasure|null} [width] ProtoRule width
     * @property {IProtoMeasure|null} [thickness] ProtoRule thickness
     * @property {number|null} [rotation] ProtoRule rotation
     * @property {IProtoColor|null} [color] ProtoRule color
     * @property {ProtoRuleStyle|null} [style] ProtoRule style
     * @property {ProtoRuleMode|null} [mode] ProtoRule mode
     * @property {IProtoRuleBoundaries|null} [boundaries] ProtoRule boundaries
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoRule comChannelUUIDs
     */

    /**
     * Constructs a new ProtoRule.
     * @name ProtoRule
     * @classdesc Represents a ProtoRule.
     * @implements IProtoRule
     * @constructor
     * @param {IProtoRule=} [properties] Properties to set
     */
    function ProtoRule(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoRule xOffset.
     * @member {IProtoMeasure|null|undefined} xOffset
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.xOffset = null;

    /**
     * ProtoRule yOffset.
     * @member {IProtoMeasure|null|undefined} yOffset
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.yOffset = null;

    /**
     * ProtoRule width.
     * @member {IProtoMeasure|null|undefined} width
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.width = null;

    /**
     * ProtoRule thickness.
     * @member {IProtoMeasure|null|undefined} thickness
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.thickness = null;

    /**
     * ProtoRule rotation.
     * @member {number} rotation
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.rotation = 0;

    /**
     * ProtoRule color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.color = null;

    /**
     * ProtoRule style.
     * @member {ProtoRuleStyle} style
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.style = 0;

    /**
     * ProtoRule mode.
     * @member {ProtoRuleMode} mode
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.mode = 0;

    /**
     * ProtoRule boundaries.
     * @member {IProtoRuleBoundaries|null|undefined} boundaries
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.boundaries = null;

    /**
     * ProtoRule comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoRule
     * @instance
     */
    ProtoRule.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoRule instance using the specified properties.
     * @function create
     * @memberof ProtoRule
     * @static
     * @param {IProtoRule=} [properties] Properties to set
     * @returns {ProtoRule} ProtoRule instance
     */
    ProtoRule.create = function create(properties) {
        return new ProtoRule(properties);
    };

    /**
     * Encodes the specified ProtoRule message. Does not implicitly {@link ProtoRule.verify|verify} messages.
     * @function encode
     * @memberof ProtoRule
     * @static
     * @param {IProtoRule} message ProtoRule message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoRule.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.xOffset != null && Object.hasOwnProperty.call(message, "xOffset"))
            $root.ProtoMeasure.encode(message.xOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.yOffset != null && Object.hasOwnProperty.call(message, "yOffset"))
            $root.ProtoMeasure.encode(message.yOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoMeasure.encode(message.width, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.thickness != null && Object.hasOwnProperty.call(message, "thickness"))
            $root.ProtoMeasure.encode(message.thickness, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.rotation != null && Object.hasOwnProperty.call(message, "rotation"))
            writer.uint32(/* id 5, wireType 1 =*/41).double(message.rotation);
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.style != null && Object.hasOwnProperty.call(message, "style"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.style);
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.mode);
        if (message.boundaries != null && Object.hasOwnProperty.call(message, "boundaries"))
            $root.ProtoRuleBoundaries.encode(message.boundaries, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 10, wireType 2 =*/82).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoRule message, length delimited. Does not implicitly {@link ProtoRule.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoRule
     * @static
     * @param {IProtoRule} message ProtoRule message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoRule.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoRule message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoRule
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoRule} ProtoRule
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoRule.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoRule();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.xOffset = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.yOffset = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.width = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.thickness = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.rotation = reader.double();
                    break;
                }
            case 6: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.style = reader.int32();
                    break;
                }
            case 8: {
                    message.mode = reader.int32();
                    break;
                }
            case 9: {
                    message.boundaries = $root.ProtoRuleBoundaries.decode(reader, reader.uint32());
                    break;
                }
            case 10: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoRule message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoRule
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoRule} ProtoRule
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoRule.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoRule message.
     * @function verify
     * @memberof ProtoRule
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoRule.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.xOffset != null && message.hasOwnProperty("xOffset")) {
            var error = $root.ProtoMeasure.verify(message.xOffset);
            if (error)
                return "xOffset." + error;
        }
        if (message.yOffset != null && message.hasOwnProperty("yOffset")) {
            var error = $root.ProtoMeasure.verify(message.yOffset);
            if (error)
                return "yOffset." + error;
        }
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.thickness != null && message.hasOwnProperty("thickness")) {
            var error = $root.ProtoMeasure.verify(message.thickness);
            if (error)
                return "thickness." + error;
        }
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            if (typeof message.rotation !== "number")
                return "rotation: number expected";
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.style != null && message.hasOwnProperty("style"))
            switch (message.style) {
            default:
                return "style: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 254:
                break;
            }
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.boundaries != null && message.hasOwnProperty("boundaries")) {
            var error = $root.ProtoRuleBoundaries.verify(message.boundaries);
            if (error)
                return "boundaries." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoRule message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoRule
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoRule} ProtoRule
     */
    ProtoRule.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoRule)
            return object;
        var message = new $root.ProtoRule();
        if (object.xOffset != null) {
            if (typeof object.xOffset !== "object")
                throw TypeError(".ProtoRule.xOffset: object expected");
            message.xOffset = $root.ProtoMeasure.fromObject(object.xOffset);
        }
        if (object.yOffset != null) {
            if (typeof object.yOffset !== "object")
                throw TypeError(".ProtoRule.yOffset: object expected");
            message.yOffset = $root.ProtoMeasure.fromObject(object.yOffset);
        }
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoRule.width: object expected");
            message.width = $root.ProtoMeasure.fromObject(object.width);
        }
        if (object.thickness != null) {
            if (typeof object.thickness !== "object")
                throw TypeError(".ProtoRule.thickness: object expected");
            message.thickness = $root.ProtoMeasure.fromObject(object.thickness);
        }
        if (object.rotation != null)
            message.rotation = Number(object.rotation);
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoRule.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        switch (object.style) {
        default:
            if (typeof object.style === "number") {
                message.style = object.style;
                break;
            }
            break;
        case "DUMMY_RULE_STYLE":
        case 0:
            message.style = 0;
            break;
        case "SOLID":
        case 1:
            message.style = 1;
            break;
        case "SPARSE_SHADING":
        case 2:
            message.style = 2;
            break;
        case "MEDIUM_SHADING":
        case 3:
            message.style = 3;
            break;
        case "DENSE_SHADING":
        case 4:
            message.style = 4;
            break;
        case "LIGHT_DOTTED":
        case 5:
            message.style = 5;
            break;
        case "MEDIUM_DOTTED":
        case 6:
            message.style = 6;
            break;
        case "HEAVY_DOTTED":
        case 7:
            message.style = 7;
            break;
        case "LIGHT_DASHED":
        case 8:
            message.style = 8;
            break;
        case "MEDIUM_DASHED":
        case 9:
            message.style = 9;
            break;
        case "HEAVY_DASHED":
        case 10:
            message.style = 10;
            break;
        case "DASH_PATTERN":
        case 11:
            message.style = 11;
            break;
        case "DOUBLE":
        case 254:
            message.style = 254;
            break;
        }
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "NORMAL":
        case 0:
            message.mode = 0;
            break;
        case "BOUNDARY":
        case 1:
            message.mode = 1;
            break;
        }
        if (object.boundaries != null) {
            if (typeof object.boundaries !== "object")
                throw TypeError(".ProtoRule.boundaries: object expected");
            message.boundaries = $root.ProtoRuleBoundaries.fromObject(object.boundaries);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoRule.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoRule message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoRule
     * @static
     * @param {ProtoRule} message ProtoRule
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoRule.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.xOffset = null;
            object.yOffset = null;
            object.width = null;
            object.thickness = null;
            object.rotation = 0;
            object.color = null;
            object.style = options.enums === String ? "DUMMY_RULE_STYLE" : 0;
            object.mode = options.enums === String ? "NORMAL" : 0;
            object.boundaries = null;
        }
        if (message.xOffset != null && message.hasOwnProperty("xOffset"))
            object.xOffset = $root.ProtoMeasure.toObject(message.xOffset, options);
        if (message.yOffset != null && message.hasOwnProperty("yOffset"))
            object.yOffset = $root.ProtoMeasure.toObject(message.yOffset, options);
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoMeasure.toObject(message.width, options);
        if (message.thickness != null && message.hasOwnProperty("thickness"))
            object.thickness = $root.ProtoMeasure.toObject(message.thickness, options);
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            object.rotation = options.json && !isFinite(message.rotation) ? String(message.rotation) : message.rotation;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.style != null && message.hasOwnProperty("style"))
            object.style = options.enums === String ? $root.ProtoRuleStyle[message.style] === undefined ? message.style : $root.ProtoRuleStyle[message.style] : message.style;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.ProtoRuleMode[message.mode] === undefined ? message.mode : $root.ProtoRuleMode[message.mode] : message.mode;
        if (message.boundaries != null && message.hasOwnProperty("boundaries"))
            object.boundaries = $root.ProtoRuleBoundaries.toObject(message.boundaries, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoRule to JSON.
     * @function toJSON
     * @memberof ProtoRule
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoRule.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoRule
     * @function getTypeUrl
     * @memberof ProtoRule
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoRule";
    };

    return ProtoRule;
})();

/**
 * ProtoRuleMode enum.
 * @name ProtoRuleMode
 * @enum {number}
 * @property {number} NORMAL=0 NORMAL value
 * @property {number} BOUNDARY=1 BOUNDARY value
 */
$root.ProtoRuleMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NORMAL"] = 0;
    values[valuesById[1] = "BOUNDARY"] = 1;
    return values;
})();

$root.ProtoRuleBoundaries = (function() {

    /**
     * Properties of a ProtoRuleBoundaries.
     * @name IProtoRuleBoundaries
     * @interface IProtoRuleBoundaries
     * @property {IProtoMeasure|null} [start] ProtoRuleBoundaries start
     * @property {IProtoMeasure|null} [end] ProtoRuleBoundaries end
     */

    /**
     * Constructs a new ProtoRuleBoundaries.
     * @name ProtoRuleBoundaries
     * @classdesc Represents a ProtoRuleBoundaries.
     * @implements IProtoRuleBoundaries
     * @constructor
     * @param {IProtoRuleBoundaries=} [properties] Properties to set
     */
    function ProtoRuleBoundaries(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoRuleBoundaries start.
     * @member {IProtoMeasure|null|undefined} start
     * @memberof ProtoRuleBoundaries
     * @instance
     */
    ProtoRuleBoundaries.prototype.start = null;

    /**
     * ProtoRuleBoundaries end.
     * @member {IProtoMeasure|null|undefined} end
     * @memberof ProtoRuleBoundaries
     * @instance
     */
    ProtoRuleBoundaries.prototype.end = null;

    /**
     * Creates a new ProtoRuleBoundaries instance using the specified properties.
     * @function create
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {IProtoRuleBoundaries=} [properties] Properties to set
     * @returns {ProtoRuleBoundaries} ProtoRuleBoundaries instance
     */
    ProtoRuleBoundaries.create = function create(properties) {
        return new ProtoRuleBoundaries(properties);
    };

    /**
     * Encodes the specified ProtoRuleBoundaries message. Does not implicitly {@link ProtoRuleBoundaries.verify|verify} messages.
     * @function encode
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {IProtoRuleBoundaries} message ProtoRuleBoundaries message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoRuleBoundaries.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
            $root.ProtoMeasure.encode(message.start, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
            $root.ProtoMeasure.encode(message.end, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProtoRuleBoundaries message, length delimited. Does not implicitly {@link ProtoRuleBoundaries.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {IProtoRuleBoundaries} message ProtoRuleBoundaries message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoRuleBoundaries.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoRuleBoundaries message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoRuleBoundaries} ProtoRuleBoundaries
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoRuleBoundaries.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoRuleBoundaries();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.start = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.end = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoRuleBoundaries message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoRuleBoundaries} ProtoRuleBoundaries
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoRuleBoundaries.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoRuleBoundaries message.
     * @function verify
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoRuleBoundaries.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.start != null && message.hasOwnProperty("start")) {
            var error = $root.ProtoMeasure.verify(message.start);
            if (error)
                return "start." + error;
        }
        if (message.end != null && message.hasOwnProperty("end")) {
            var error = $root.ProtoMeasure.verify(message.end);
            if (error)
                return "end." + error;
        }
        return null;
    };

    /**
     * Creates a ProtoRuleBoundaries message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoRuleBoundaries} ProtoRuleBoundaries
     */
    ProtoRuleBoundaries.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoRuleBoundaries)
            return object;
        var message = new $root.ProtoRuleBoundaries();
        if (object.start != null) {
            if (typeof object.start !== "object")
                throw TypeError(".ProtoRuleBoundaries.start: object expected");
            message.start = $root.ProtoMeasure.fromObject(object.start);
        }
        if (object.end != null) {
            if (typeof object.end !== "object")
                throw TypeError(".ProtoRuleBoundaries.end: object expected");
            message.end = $root.ProtoMeasure.fromObject(object.end);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoRuleBoundaries message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {ProtoRuleBoundaries} message ProtoRuleBoundaries
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoRuleBoundaries.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.start = null;
            object.end = null;
        }
        if (message.start != null && message.hasOwnProperty("start"))
            object.start = $root.ProtoMeasure.toObject(message.start, options);
        if (message.end != null && message.hasOwnProperty("end"))
            object.end = $root.ProtoMeasure.toObject(message.end, options);
        return object;
    };

    /**
     * Converts this ProtoRuleBoundaries to JSON.
     * @function toJSON
     * @memberof ProtoRuleBoundaries
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoRuleBoundaries.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoRuleBoundaries
     * @function getTypeUrl
     * @memberof ProtoRuleBoundaries
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoRuleBoundaries.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoRuleBoundaries";
    };

    return ProtoRuleBoundaries;
})();

$root.ProtoColorDef = (function() {

    /**
     * Properties of a ProtoColorDef.
     * @name IProtoColorDef
     * @interface IProtoColorDef
     * @property {IProtoColor|null} [color] ProtoColorDef color
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoColorDef comChannelUUIDs
     */

    /**
     * Constructs a new ProtoColorDef.
     * @name ProtoColorDef
     * @classdesc Represents a ProtoColorDef.
     * @implements IProtoColorDef
     * @constructor
     * @param {IProtoColorDef=} [properties] Properties to set
     */
    function ProtoColorDef(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoColorDef color.
     * @member {IProtoColor|null|undefined} color
     * @memberof ProtoColorDef
     * @instance
     */
    ProtoColorDef.prototype.color = null;

    /**
     * ProtoColorDef comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoColorDef
     * @instance
     */
    ProtoColorDef.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoColorDef instance using the specified properties.
     * @function create
     * @memberof ProtoColorDef
     * @static
     * @param {IProtoColorDef=} [properties] Properties to set
     * @returns {ProtoColorDef} ProtoColorDef instance
     */
    ProtoColorDef.create = function create(properties) {
        return new ProtoColorDef(properties);
    };

    /**
     * Encodes the specified ProtoColorDef message. Does not implicitly {@link ProtoColorDef.verify|verify} messages.
     * @function encode
     * @memberof ProtoColorDef
     * @static
     * @param {IProtoColorDef} message ProtoColorDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoColorDef.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.color != null && Object.hasOwnProperty.call(message, "color"))
            $root.ProtoColor.encode(message.color, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoColorDef message, length delimited. Does not implicitly {@link ProtoColorDef.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoColorDef
     * @static
     * @param {IProtoColorDef} message ProtoColorDef message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoColorDef.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoColorDef message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoColorDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoColorDef} ProtoColorDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoColorDef.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoColorDef();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.color = $root.ProtoColor.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoColorDef message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoColorDef
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoColorDef} ProtoColorDef
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoColorDef.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoColorDef message.
     * @function verify
     * @memberof ProtoColorDef
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoColorDef.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.color != null && message.hasOwnProperty("color")) {
            var error = $root.ProtoColor.verify(message.color);
            if (error)
                return "color." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoColorDef message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoColorDef
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoColorDef} ProtoColorDef
     */
    ProtoColorDef.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoColorDef)
            return object;
        var message = new $root.ProtoColorDef();
        if (object.color != null) {
            if (typeof object.color !== "object")
                throw TypeError(".ProtoColorDef.color: object expected");
            message.color = $root.ProtoColor.fromObject(object.color);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoColorDef.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoColorDef message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoColorDef
     * @static
     * @param {ProtoColorDef} message ProtoColorDef
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoColorDef.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults)
            object.color = null;
        if (message.color != null && message.hasOwnProperty("color"))
            object.color = $root.ProtoColor.toObject(message.color, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoColorDef to JSON.
     * @function toJSON
     * @memberof ProtoColorDef
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoColorDef.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoColorDef
     * @function getTypeUrl
     * @memberof ProtoColorDef
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoColorDef.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoColorDef";
    };

    return ProtoColorDef;
})();

$root.ProtoLayout = (function() {

    /**
     * Properties of a ProtoLayout.
     * @name IProtoLayout
     * @interface IProtoLayout
     * @property {IProtoDocumentElement|null} [parent] ProtoLayout parent
     * @property {string|null} [name] ProtoLayout name
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoLayout comChannelUUIDs
     */

    /**
     * Constructs a new ProtoLayout.
     * @name ProtoLayout
     * @classdesc Represents a ProtoLayout.
     * @implements IProtoLayout
     * @constructor
     * @param {IProtoLayout=} [properties] Properties to set
     */
    function ProtoLayout(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoLayout parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoLayout
     * @instance
     */
    ProtoLayout.prototype.parent = null;

    /**
     * ProtoLayout name.
     * @member {string} name
     * @memberof ProtoLayout
     * @instance
     */
    ProtoLayout.prototype.name = "";

    /**
     * ProtoLayout comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoLayout
     * @instance
     */
    ProtoLayout.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoLayout instance using the specified properties.
     * @function create
     * @memberof ProtoLayout
     * @static
     * @param {IProtoLayout=} [properties] Properties to set
     * @returns {ProtoLayout} ProtoLayout instance
     */
    ProtoLayout.create = function create(properties) {
        return new ProtoLayout(properties);
    };

    /**
     * Encodes the specified ProtoLayout message. Does not implicitly {@link ProtoLayout.verify|verify} messages.
     * @function encode
     * @memberof ProtoLayout
     * @static
     * @param {IProtoLayout} message ProtoLayout message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLayout.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoLayout message, length delimited. Does not implicitly {@link ProtoLayout.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoLayout
     * @static
     * @param {IProtoLayout} message ProtoLayout message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLayout.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoLayout message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoLayout
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoLayout} ProtoLayout
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLayout.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoLayout();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoLayout message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoLayout
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoLayout} ProtoLayout
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLayout.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoLayout message.
     * @function verify
     * @memberof ProtoLayout
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoLayout.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoLayout message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoLayout
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoLayout} ProtoLayout
     */
    ProtoLayout.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoLayout)
            return object;
        var message = new $root.ProtoLayout();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoLayout.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.name != null)
            message.name = String(object.name);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoLayout.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoLayout message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoLayout
     * @static
     * @param {ProtoLayout} message ProtoLayout
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoLayout.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.name = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoLayout to JSON.
     * @function toJSON
     * @memberof ProtoLayout
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoLayout.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoLayout
     * @function getTypeUrl
     * @memberof ProtoLayout
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoLayout.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoLayout";
    };

    return ProtoLayout;
})();

$root.ProtoAdvancedIllustrationArea = (function() {

    /**
     * Properties of a ProtoAdvancedIllustrationArea.
     * @name IProtoAdvancedIllustrationArea
     * @interface IProtoAdvancedIllustrationArea
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoAdvancedIllustrationArea _children
     * @property {IProtoDocumentElement|null} [parent] ProtoAdvancedIllustrationArea parent
     * @property {string|null} [uuid] ProtoAdvancedIllustrationArea uuid
     * @property {boolean|null} [absolute] ProtoAdvancedIllustrationArea absolute
     * @property {IProtoMeasure|null} [width] ProtoAdvancedIllustrationArea width
     * @property {IProtoMeasure|null} [height] ProtoAdvancedIllustrationArea height
     * @property {IProtoMeasure|null} [x] ProtoAdvancedIllustrationArea x
     * @property {IProtoMeasure|null} [y] ProtoAdvancedIllustrationArea y
     * @property {ProtoAdvancedIllustrationAreaTextFlowType|null} [textFlow] ProtoAdvancedIllustrationArea textFlow
     * @property {number|null} [rotation] ProtoAdvancedIllustrationArea rotation
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoAdvancedIllustrationArea comChannelUUIDs
     */

    /**
     * Constructs a new ProtoAdvancedIllustrationArea.
     * @name ProtoAdvancedIllustrationArea
     * @classdesc Represents a ProtoAdvancedIllustrationArea.
     * @implements IProtoAdvancedIllustrationArea
     * @constructor
     * @param {IProtoAdvancedIllustrationArea=} [properties] Properties to set
     */
    function ProtoAdvancedIllustrationArea(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoAdvancedIllustrationArea _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype._children = $util.emptyArray;

    /**
     * ProtoAdvancedIllustrationArea parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.parent = null;

    /**
     * ProtoAdvancedIllustrationArea uuid.
     * @member {string} uuid
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.uuid = "";

    /**
     * ProtoAdvancedIllustrationArea absolute.
     * @member {boolean} absolute
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.absolute = false;

    /**
     * ProtoAdvancedIllustrationArea width.
     * @member {IProtoMeasure|null|undefined} width
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.width = null;

    /**
     * ProtoAdvancedIllustrationArea height.
     * @member {IProtoMeasure|null|undefined} height
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.height = null;

    /**
     * ProtoAdvancedIllustrationArea x.
     * @member {IProtoMeasure|null|undefined} x
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.x = null;

    /**
     * ProtoAdvancedIllustrationArea y.
     * @member {IProtoMeasure|null|undefined} y
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.y = null;

    /**
     * ProtoAdvancedIllustrationArea textFlow.
     * @member {ProtoAdvancedIllustrationAreaTextFlowType} textFlow
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.textFlow = 0;

    /**
     * ProtoAdvancedIllustrationArea rotation.
     * @member {number} rotation
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.rotation = 0;

    /**
     * ProtoAdvancedIllustrationArea comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     */
    ProtoAdvancedIllustrationArea.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoAdvancedIllustrationArea instance using the specified properties.
     * @function create
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {IProtoAdvancedIllustrationArea=} [properties] Properties to set
     * @returns {ProtoAdvancedIllustrationArea} ProtoAdvancedIllustrationArea instance
     */
    ProtoAdvancedIllustrationArea.create = function create(properties) {
        return new ProtoAdvancedIllustrationArea(properties);
    };

    /**
     * Encodes the specified ProtoAdvancedIllustrationArea message. Does not implicitly {@link ProtoAdvancedIllustrationArea.verify|verify} messages.
     * @function encode
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {IProtoAdvancedIllustrationArea} message ProtoAdvancedIllustrationArea message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoAdvancedIllustrationArea.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.absolute != null && Object.hasOwnProperty.call(message, "absolute"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.absolute);
        if (message.width != null && Object.hasOwnProperty.call(message, "width"))
            $root.ProtoMeasure.encode(message.width, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
            $root.ProtoMeasure.encode(message.height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.x != null && Object.hasOwnProperty.call(message, "x"))
            $root.ProtoMeasure.encode(message.x, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
        if (message.y != null && Object.hasOwnProperty.call(message, "y"))
            $root.ProtoMeasure.encode(message.y, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
        if (message.textFlow != null && Object.hasOwnProperty.call(message, "textFlow"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.textFlow);
        if (message.rotation != null && Object.hasOwnProperty.call(message, "rotation"))
            writer.uint32(/* id 10, wireType 5 =*/85).float(message.rotation);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoAdvancedIllustrationArea message, length delimited. Does not implicitly {@link ProtoAdvancedIllustrationArea.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {IProtoAdvancedIllustrationArea} message ProtoAdvancedIllustrationArea message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoAdvancedIllustrationArea.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoAdvancedIllustrationArea message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoAdvancedIllustrationArea} ProtoAdvancedIllustrationArea
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoAdvancedIllustrationArea.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoAdvancedIllustrationArea();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    message.absolute = reader.bool();
                    break;
                }
            case 5: {
                    message.width = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 6: {
                    message.height = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 7: {
                    message.x = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 8: {
                    message.y = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 9: {
                    message.textFlow = reader.int32();
                    break;
                }
            case 10: {
                    message.rotation = reader.float();
                    break;
                }
            case 11: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoAdvancedIllustrationArea message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoAdvancedIllustrationArea} ProtoAdvancedIllustrationArea
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoAdvancedIllustrationArea.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoAdvancedIllustrationArea message.
     * @function verify
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoAdvancedIllustrationArea.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.absolute != null && message.hasOwnProperty("absolute"))
            if (typeof message.absolute !== "boolean")
                return "absolute: boolean expected";
        if (message.width != null && message.hasOwnProperty("width")) {
            var error = $root.ProtoMeasure.verify(message.width);
            if (error)
                return "width." + error;
        }
        if (message.height != null && message.hasOwnProperty("height")) {
            var error = $root.ProtoMeasure.verify(message.height);
            if (error)
                return "height." + error;
        }
        if (message.x != null && message.hasOwnProperty("x")) {
            var error = $root.ProtoMeasure.verify(message.x);
            if (error)
                return "x." + error;
        }
        if (message.y != null && message.hasOwnProperty("y")) {
            var error = $root.ProtoMeasure.verify(message.y);
            if (error)
                return "y." + error;
        }
        if (message.textFlow != null && message.hasOwnProperty("textFlow"))
            switch (message.textFlow) {
            default:
                return "textFlow: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            if (typeof message.rotation !== "number")
                return "rotation: number expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoAdvancedIllustrationArea message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoAdvancedIllustrationArea} ProtoAdvancedIllustrationArea
     */
    ProtoAdvancedIllustrationArea.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoAdvancedIllustrationArea)
            return object;
        var message = new $root.ProtoAdvancedIllustrationArea();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoAdvancedIllustrationArea._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoAdvancedIllustrationArea._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoAdvancedIllustrationArea.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.absolute != null)
            message.absolute = Boolean(object.absolute);
        if (object.width != null) {
            if (typeof object.width !== "object")
                throw TypeError(".ProtoAdvancedIllustrationArea.width: object expected");
            message.width = $root.ProtoMeasure.fromObject(object.width);
        }
        if (object.height != null) {
            if (typeof object.height !== "object")
                throw TypeError(".ProtoAdvancedIllustrationArea.height: object expected");
            message.height = $root.ProtoMeasure.fromObject(object.height);
        }
        if (object.x != null) {
            if (typeof object.x !== "object")
                throw TypeError(".ProtoAdvancedIllustrationArea.x: object expected");
            message.x = $root.ProtoMeasure.fromObject(object.x);
        }
        if (object.y != null) {
            if (typeof object.y !== "object")
                throw TypeError(".ProtoAdvancedIllustrationArea.y: object expected");
            message.y = $root.ProtoMeasure.fromObject(object.y);
        }
        switch (object.textFlow) {
        default:
            if (typeof object.textFlow === "number") {
                message.textFlow = object.textFlow;
                break;
            }
            break;
        case "DO_NOT_USE_AT_ALL":
        case 0:
            message.textFlow = 0;
            break;
        case "AROUND":
        case 1:
            message.textFlow = 1;
            break;
        case "NO_FLOW":
        case 2:
            message.textFlow = 2;
            break;
        case "FOREGROUND":
        case 3:
            message.textFlow = 3;
            break;
        case "BACKGROUND":
        case 4:
            message.textFlow = 4;
            break;
        }
        if (object.rotation != null)
            message.rotation = Number(object.rotation);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoAdvancedIllustrationArea.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoAdvancedIllustrationArea message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {ProtoAdvancedIllustrationArea} message ProtoAdvancedIllustrationArea
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoAdvancedIllustrationArea.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.absolute = false;
            object.width = null;
            object.height = null;
            object.x = null;
            object.y = null;
            object.textFlow = options.enums === String ? "DO_NOT_USE_AT_ALL" : 0;
            object.rotation = 0;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.absolute != null && message.hasOwnProperty("absolute"))
            object.absolute = message.absolute;
        if (message.width != null && message.hasOwnProperty("width"))
            object.width = $root.ProtoMeasure.toObject(message.width, options);
        if (message.height != null && message.hasOwnProperty("height"))
            object.height = $root.ProtoMeasure.toObject(message.height, options);
        if (message.x != null && message.hasOwnProperty("x"))
            object.x = $root.ProtoMeasure.toObject(message.x, options);
        if (message.y != null && message.hasOwnProperty("y"))
            object.y = $root.ProtoMeasure.toObject(message.y, options);
        if (message.textFlow != null && message.hasOwnProperty("textFlow"))
            object.textFlow = options.enums === String ? $root.ProtoAdvancedIllustrationAreaTextFlowType[message.textFlow] === undefined ? message.textFlow : $root.ProtoAdvancedIllustrationAreaTextFlowType[message.textFlow] : message.textFlow;
        if (message.rotation != null && message.hasOwnProperty("rotation"))
            object.rotation = options.json && !isFinite(message.rotation) ? String(message.rotation) : message.rotation;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoAdvancedIllustrationArea to JSON.
     * @function toJSON
     * @memberof ProtoAdvancedIllustrationArea
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoAdvancedIllustrationArea.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoAdvancedIllustrationArea
     * @function getTypeUrl
     * @memberof ProtoAdvancedIllustrationArea
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoAdvancedIllustrationArea.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoAdvancedIllustrationArea";
    };

    return ProtoAdvancedIllustrationArea;
})();

$root.ProtoAdjustHorizontally = (function() {

    /**
     * Properties of a ProtoAdjustHorizontally.
     * @name IProtoAdjustHorizontally
     * @interface IProtoAdjustHorizontally
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoAdjustHorizontally _children
     * @property {IProtoDocumentElement|null} [parent] ProtoAdjustHorizontally parent
     * @property {IProtoMeasure|null} [minFontSize] ProtoAdjustHorizontally minFontSize
     * @property {IProtoMeasure|null} [maxFontSize] ProtoAdjustHorizontally maxFontSize
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoAdjustHorizontally comChannelUUIDs
     */

    /**
     * Constructs a new ProtoAdjustHorizontally.
     * @name ProtoAdjustHorizontally
     * @classdesc Represents a ProtoAdjustHorizontally.
     * @implements IProtoAdjustHorizontally
     * @constructor
     * @param {IProtoAdjustHorizontally=} [properties] Properties to set
     */
    function ProtoAdjustHorizontally(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoAdjustHorizontally _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoAdjustHorizontally
     * @instance
     */
    ProtoAdjustHorizontally.prototype._children = $util.emptyArray;

    /**
     * ProtoAdjustHorizontally parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoAdjustHorizontally
     * @instance
     */
    ProtoAdjustHorizontally.prototype.parent = null;

    /**
     * ProtoAdjustHorizontally minFontSize.
     * @member {IProtoMeasure|null|undefined} minFontSize
     * @memberof ProtoAdjustHorizontally
     * @instance
     */
    ProtoAdjustHorizontally.prototype.minFontSize = null;

    /**
     * ProtoAdjustHorizontally maxFontSize.
     * @member {IProtoMeasure|null|undefined} maxFontSize
     * @memberof ProtoAdjustHorizontally
     * @instance
     */
    ProtoAdjustHorizontally.prototype.maxFontSize = null;

    /**
     * ProtoAdjustHorizontally comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoAdjustHorizontally
     * @instance
     */
    ProtoAdjustHorizontally.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoAdjustHorizontally instance using the specified properties.
     * @function create
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {IProtoAdjustHorizontally=} [properties] Properties to set
     * @returns {ProtoAdjustHorizontally} ProtoAdjustHorizontally instance
     */
    ProtoAdjustHorizontally.create = function create(properties) {
        return new ProtoAdjustHorizontally(properties);
    };

    /**
     * Encodes the specified ProtoAdjustHorizontally message. Does not implicitly {@link ProtoAdjustHorizontally.verify|verify} messages.
     * @function encode
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {IProtoAdjustHorizontally} message ProtoAdjustHorizontally message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoAdjustHorizontally.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.minFontSize != null && Object.hasOwnProperty.call(message, "minFontSize"))
            $root.ProtoMeasure.encode(message.minFontSize, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.maxFontSize != null && Object.hasOwnProperty.call(message, "maxFontSize"))
            $root.ProtoMeasure.encode(message.maxFontSize, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoAdjustHorizontally message, length delimited. Does not implicitly {@link ProtoAdjustHorizontally.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {IProtoAdjustHorizontally} message ProtoAdjustHorizontally message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoAdjustHorizontally.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoAdjustHorizontally message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoAdjustHorizontally} ProtoAdjustHorizontally
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoAdjustHorizontally.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoAdjustHorizontally();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.minFontSize = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 4: {
                    message.maxFontSize = $root.ProtoMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoAdjustHorizontally message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoAdjustHorizontally} ProtoAdjustHorizontally
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoAdjustHorizontally.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoAdjustHorizontally message.
     * @function verify
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoAdjustHorizontally.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.minFontSize != null && message.hasOwnProperty("minFontSize")) {
            var error = $root.ProtoMeasure.verify(message.minFontSize);
            if (error)
                return "minFontSize." + error;
        }
        if (message.maxFontSize != null && message.hasOwnProperty("maxFontSize")) {
            var error = $root.ProtoMeasure.verify(message.maxFontSize);
            if (error)
                return "maxFontSize." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoAdjustHorizontally message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoAdjustHorizontally} ProtoAdjustHorizontally
     */
    ProtoAdjustHorizontally.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoAdjustHorizontally)
            return object;
        var message = new $root.ProtoAdjustHorizontally();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoAdjustHorizontally._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoAdjustHorizontally._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoAdjustHorizontally.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.minFontSize != null) {
            if (typeof object.minFontSize !== "object")
                throw TypeError(".ProtoAdjustHorizontally.minFontSize: object expected");
            message.minFontSize = $root.ProtoMeasure.fromObject(object.minFontSize);
        }
        if (object.maxFontSize != null) {
            if (typeof object.maxFontSize !== "object")
                throw TypeError(".ProtoAdjustHorizontally.maxFontSize: object expected");
            message.maxFontSize = $root.ProtoMeasure.fromObject(object.maxFontSize);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoAdjustHorizontally.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoAdjustHorizontally message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {ProtoAdjustHorizontally} message ProtoAdjustHorizontally
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoAdjustHorizontally.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.minFontSize = null;
            object.maxFontSize = null;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.minFontSize != null && message.hasOwnProperty("minFontSize"))
            object.minFontSize = $root.ProtoMeasure.toObject(message.minFontSize, options);
        if (message.maxFontSize != null && message.hasOwnProperty("maxFontSize"))
            object.maxFontSize = $root.ProtoMeasure.toObject(message.maxFontSize, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoAdjustHorizontally to JSON.
     * @function toJSON
     * @memberof ProtoAdjustHorizontally
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoAdjustHorizontally.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoAdjustHorizontally
     * @function getTypeUrl
     * @memberof ProtoAdjustHorizontally
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoAdjustHorizontally.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoAdjustHorizontally";
    };

    return ProtoAdjustHorizontally;
})();

/**
 * ProtoDoctypeOutputMode enum.
 * @name ProtoDoctypeOutputMode
 * @enum {number}
 * @property {number} DOCTYPE_OUTPUT_MODE_NOT_SET=0 DOCTYPE_OUTPUT_MODE_NOT_SET value
 * @property {number} DOCTYPE=1 DOCTYPE value
 * @property {number} JSON=2 JSON value
 */
$root.ProtoDoctypeOutputMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "DOCTYPE_OUTPUT_MODE_NOT_SET"] = 0;
    values[valuesById[1] = "DOCTYPE"] = 1;
    values[valuesById[2] = "JSON"] = 2;
    return values;
})();

$root.ProtoDoctypeScript = (function() {

    /**
     * Properties of a ProtoDoctypeScript.
     * @name IProtoDoctypeScript
     * @interface IProtoDoctypeScript
     * @property {IProtoDocumentElement|null} [parent] ProtoDoctypeScript parent
     * @property {string|null} [content] ProtoDoctypeScript content
     * @property {ProtoDoctypeOutputMode|null} [outputMode] ProtoDoctypeScript outputMode
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoDoctypeScript comChannelUUIDs
     * @property {string|null} [uuid] ProtoDoctypeScript uuid
     */

    /**
     * Constructs a new ProtoDoctypeScript.
     * @name ProtoDoctypeScript
     * @classdesc Represents a ProtoDoctypeScript.
     * @implements IProtoDoctypeScript
     * @constructor
     * @param {IProtoDoctypeScript=} [properties] Properties to set
     */
    function ProtoDoctypeScript(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoDoctypeScript parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoDoctypeScript
     * @instance
     */
    ProtoDoctypeScript.prototype.parent = null;

    /**
     * ProtoDoctypeScript content.
     * @member {string} content
     * @memberof ProtoDoctypeScript
     * @instance
     */
    ProtoDoctypeScript.prototype.content = "";

    /**
     * ProtoDoctypeScript outputMode.
     * @member {ProtoDoctypeOutputMode} outputMode
     * @memberof ProtoDoctypeScript
     * @instance
     */
    ProtoDoctypeScript.prototype.outputMode = 0;

    /**
     * ProtoDoctypeScript comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoDoctypeScript
     * @instance
     */
    ProtoDoctypeScript.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoDoctypeScript uuid.
     * @member {string} uuid
     * @memberof ProtoDoctypeScript
     * @instance
     */
    ProtoDoctypeScript.prototype.uuid = "";

    /**
     * Creates a new ProtoDoctypeScript instance using the specified properties.
     * @function create
     * @memberof ProtoDoctypeScript
     * @static
     * @param {IProtoDoctypeScript=} [properties] Properties to set
     * @returns {ProtoDoctypeScript} ProtoDoctypeScript instance
     */
    ProtoDoctypeScript.create = function create(properties) {
        return new ProtoDoctypeScript(properties);
    };

    /**
     * Encodes the specified ProtoDoctypeScript message. Does not implicitly {@link ProtoDoctypeScript.verify|verify} messages.
     * @function encode
     * @memberof ProtoDoctypeScript
     * @static
     * @param {IProtoDoctypeScript} message ProtoDoctypeScript message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDoctypeScript.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
        if (message.outputMode != null && Object.hasOwnProperty.call(message, "outputMode"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.outputMode);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.uuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoDoctypeScript message, length delimited. Does not implicitly {@link ProtoDoctypeScript.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoDoctypeScript
     * @static
     * @param {IProtoDoctypeScript} message ProtoDoctypeScript message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDoctypeScript.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoDoctypeScript message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoDoctypeScript
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoDoctypeScript} ProtoDoctypeScript
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDoctypeScript.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoDoctypeScript();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.content = reader.string();
                    break;
                }
            case 3: {
                    message.outputMode = reader.int32();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.uuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoDoctypeScript message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoDoctypeScript
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoDoctypeScript} ProtoDoctypeScript
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDoctypeScript.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoDoctypeScript message.
     * @function verify
     * @memberof ProtoDoctypeScript
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoDoctypeScript.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        if (message.outputMode != null && message.hasOwnProperty("outputMode"))
            switch (message.outputMode) {
            default:
                return "outputMode: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoDoctypeScript message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoDoctypeScript
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoDoctypeScript} ProtoDoctypeScript
     */
    ProtoDoctypeScript.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoDoctypeScript)
            return object;
        var message = new $root.ProtoDoctypeScript();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoDoctypeScript.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.content != null)
            message.content = String(object.content);
        switch (object.outputMode) {
        default:
            if (typeof object.outputMode === "number") {
                message.outputMode = object.outputMode;
                break;
            }
            break;
        case "DOCTYPE_OUTPUT_MODE_NOT_SET":
        case 0:
            message.outputMode = 0;
            break;
        case "DOCTYPE":
        case 1:
            message.outputMode = 1;
            break;
        case "JSON":
        case 2:
            message.outputMode = 2;
            break;
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoDoctypeScript.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoDoctypeScript message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoDoctypeScript
     * @static
     * @param {ProtoDoctypeScript} message ProtoDoctypeScript
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoDoctypeScript.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.content = "";
            object.outputMode = options.enums === String ? "DOCTYPE_OUTPUT_MODE_NOT_SET" : 0;
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        if (message.outputMode != null && message.hasOwnProperty("outputMode"))
            object.outputMode = options.enums === String ? $root.ProtoDoctypeOutputMode[message.outputMode] === undefined ? message.outputMode : $root.ProtoDoctypeOutputMode[message.outputMode] : message.outputMode;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        return object;
    };

    /**
     * Converts this ProtoDoctypeScript to JSON.
     * @function toJSON
     * @memberof ProtoDoctypeScript
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoDoctypeScript.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoDoctypeScript
     * @function getTypeUrl
     * @memberof ProtoDoctypeScript
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoDoctypeScript.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoDoctypeScript";
    };

    return ProtoDoctypeScript;
})();

$root.ProtoDmScript = (function() {

    /**
     * Properties of a ProtoDmScript.
     * @name IProtoDmScript
     * @interface IProtoDmScript
     * @property {IProtoDocumentElement|null} [parent] ProtoDmScript parent
     * @property {string|null} [content] ProtoDmScript content
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoDmScript comChannelUUIDs
     * @property {string|null} [uuid] ProtoDmScript uuid
     */

    /**
     * Constructs a new ProtoDmScript.
     * @name ProtoDmScript
     * @classdesc Represents a ProtoDmScript.
     * @implements IProtoDmScript
     * @constructor
     * @param {IProtoDmScript=} [properties] Properties to set
     */
    function ProtoDmScript(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoDmScript parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoDmScript
     * @instance
     */
    ProtoDmScript.prototype.parent = null;

    /**
     * ProtoDmScript content.
     * @member {string} content
     * @memberof ProtoDmScript
     * @instance
     */
    ProtoDmScript.prototype.content = "";

    /**
     * ProtoDmScript comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoDmScript
     * @instance
     */
    ProtoDmScript.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoDmScript uuid.
     * @member {string} uuid
     * @memberof ProtoDmScript
     * @instance
     */
    ProtoDmScript.prototype.uuid = "";

    /**
     * Creates a new ProtoDmScript instance using the specified properties.
     * @function create
     * @memberof ProtoDmScript
     * @static
     * @param {IProtoDmScript=} [properties] Properties to set
     * @returns {ProtoDmScript} ProtoDmScript instance
     */
    ProtoDmScript.create = function create(properties) {
        return new ProtoDmScript(properties);
    };

    /**
     * Encodes the specified ProtoDmScript message. Does not implicitly {@link ProtoDmScript.verify|verify} messages.
     * @function encode
     * @memberof ProtoDmScript
     * @static
     * @param {IProtoDmScript} message ProtoDmScript message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDmScript.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.content != null && Object.hasOwnProperty.call(message, "content"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoDmScript message, length delimited. Does not implicitly {@link ProtoDmScript.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoDmScript
     * @static
     * @param {IProtoDmScript} message ProtoDmScript message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDmScript.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoDmScript message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoDmScript
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoDmScript} ProtoDmScript
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDmScript.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoDmScript();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.content = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 4: {
                    message.uuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoDmScript message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoDmScript
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoDmScript} ProtoDmScript
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDmScript.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoDmScript message.
     * @function verify
     * @memberof ProtoDmScript
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoDmScript.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.content != null && message.hasOwnProperty("content"))
            if (!$util.isString(message.content))
                return "content: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoDmScript message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoDmScript
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoDmScript} ProtoDmScript
     */
    ProtoDmScript.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoDmScript)
            return object;
        var message = new $root.ProtoDmScript();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoDmScript.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.content != null)
            message.content = String(object.content);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoDmScript.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoDmScript message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoDmScript
     * @static
     * @param {ProtoDmScript} message ProtoDmScript
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoDmScript.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.content = "";
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.content != null && message.hasOwnProperty("content"))
            object.content = message.content;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        return object;
    };

    /**
     * Converts this ProtoDmScript to JSON.
     * @function toJSON
     * @memberof ProtoDmScript
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoDmScript.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoDmScript
     * @function getTypeUrl
     * @memberof ProtoDmScript
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoDmScript.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoDmScript";
    };

    return ProtoDmScript;
})();

$root.ProtoDynamicTemplate = (function() {

    /**
     * Properties of a ProtoDynamicTemplate.
     * @name IProtoDynamicTemplate
     * @interface IProtoDynamicTemplate
     * @property {IProtoDocumentElement|null} [parent] ProtoDynamicTemplate parent
     * @property {string|null} [uuid] ProtoDynamicTemplate uuid
     * @property {string|null} [script] ProtoDynamicTemplate script
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoDynamicTemplate comChannelUUIDs
     */

    /**
     * Constructs a new ProtoDynamicTemplate.
     * @name ProtoDynamicTemplate
     * @classdesc Represents a ProtoDynamicTemplate.
     * @implements IProtoDynamicTemplate
     * @constructor
     * @param {IProtoDynamicTemplate=} [properties] Properties to set
     */
    function ProtoDynamicTemplate(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoDynamicTemplate parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoDynamicTemplate
     * @instance
     */
    ProtoDynamicTemplate.prototype.parent = null;

    /**
     * ProtoDynamicTemplate uuid.
     * @member {string} uuid
     * @memberof ProtoDynamicTemplate
     * @instance
     */
    ProtoDynamicTemplate.prototype.uuid = "";

    /**
     * ProtoDynamicTemplate script.
     * @member {string} script
     * @memberof ProtoDynamicTemplate
     * @instance
     */
    ProtoDynamicTemplate.prototype.script = "";

    /**
     * ProtoDynamicTemplate comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoDynamicTemplate
     * @instance
     */
    ProtoDynamicTemplate.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoDynamicTemplate instance using the specified properties.
     * @function create
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {IProtoDynamicTemplate=} [properties] Properties to set
     * @returns {ProtoDynamicTemplate} ProtoDynamicTemplate instance
     */
    ProtoDynamicTemplate.create = function create(properties) {
        return new ProtoDynamicTemplate(properties);
    };

    /**
     * Encodes the specified ProtoDynamicTemplate message. Does not implicitly {@link ProtoDynamicTemplate.verify|verify} messages.
     * @function encode
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {IProtoDynamicTemplate} message ProtoDynamicTemplate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDynamicTemplate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.uuid);
        if (message.script != null && Object.hasOwnProperty.call(message, "script"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.script);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoDynamicTemplate message, length delimited. Does not implicitly {@link ProtoDynamicTemplate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {IProtoDynamicTemplate} message ProtoDynamicTemplate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoDynamicTemplate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoDynamicTemplate message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoDynamicTemplate} ProtoDynamicTemplate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDynamicTemplate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoDynamicTemplate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.uuid = reader.string();
                    break;
                }
            case 3: {
                    message.script = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoDynamicTemplate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoDynamicTemplate} ProtoDynamicTemplate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoDynamicTemplate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoDynamicTemplate message.
     * @function verify
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoDynamicTemplate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.script != null && message.hasOwnProperty("script"))
            if (!$util.isString(message.script))
                return "script: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoDynamicTemplate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoDynamicTemplate} ProtoDynamicTemplate
     */
    ProtoDynamicTemplate.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoDynamicTemplate)
            return object;
        var message = new $root.ProtoDynamicTemplate();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoDynamicTemplate.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.script != null)
            message.script = String(object.script);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoDynamicTemplate.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoDynamicTemplate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {ProtoDynamicTemplate} message ProtoDynamicTemplate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoDynamicTemplate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.script = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.script != null && message.hasOwnProperty("script"))
            object.script = message.script;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoDynamicTemplate to JSON.
     * @function toJSON
     * @memberof ProtoDynamicTemplate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoDynamicTemplate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoDynamicTemplate
     * @function getTypeUrl
     * @memberof ProtoDynamicTemplate
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoDynamicTemplate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoDynamicTemplate";
    };

    return ProtoDynamicTemplate;
})();

$root.ProtoSelection = (function() {

    /**
     * Properties of a ProtoSelection.
     * @name IProtoSelection
     * @interface IProtoSelection
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoSelection _children
     * @property {IProtoDocumentElement|null} [parent] ProtoSelection parent
     * @property {string|null} [uuid] ProtoSelection uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoSelection comChannelUUIDs
     * @property {string|null} [internalName] ProtoSelection internalName
     * @property {string|null} [name] ProtoSelection name
     * @property {boolean|null} [multi] ProtoSelection multi
     * @property {number|Long|null} [min] ProtoSelection min
     * @property {number|Long|null} [max] ProtoSelection max
     */

    /**
     * Constructs a new ProtoSelection.
     * @name ProtoSelection
     * @classdesc Represents a ProtoSelection.
     * @implements IProtoSelection
     * @constructor
     * @param {IProtoSelection=} [properties] Properties to set
     */
    function ProtoSelection(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSelection _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype._children = $util.emptyArray;

    /**
     * ProtoSelection parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype.parent = null;

    /**
     * ProtoSelection uuid.
     * @member {string} uuid
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype.uuid = "";

    /**
     * ProtoSelection comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoSelection internalName.
     * @member {string} internalName
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype.internalName = "";

    /**
     * ProtoSelection name.
     * @member {string} name
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype.name = "";

    /**
     * ProtoSelection multi.
     * @member {boolean} multi
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype.multi = false;

    /**
     * ProtoSelection min.
     * @member {number|Long} min
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype.min = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * ProtoSelection max.
     * @member {number|Long} max
     * @memberof ProtoSelection
     * @instance
     */
    ProtoSelection.prototype.max = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new ProtoSelection instance using the specified properties.
     * @function create
     * @memberof ProtoSelection
     * @static
     * @param {IProtoSelection=} [properties] Properties to set
     * @returns {ProtoSelection} ProtoSelection instance
     */
    ProtoSelection.create = function create(properties) {
        return new ProtoSelection(properties);
    };

    /**
     * Encodes the specified ProtoSelection message. Does not implicitly {@link ProtoSelection.verify|verify} messages.
     * @function encode
     * @memberof ProtoSelection
     * @static
     * @param {IProtoSelection} message ProtoSelection message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSelection.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.internalName != null && Object.hasOwnProperty.call(message, "internalName"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.internalName);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.name);
        if (message.multi != null && Object.hasOwnProperty.call(message, "multi"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.multi);
        if (message.min != null && Object.hasOwnProperty.call(message, "min"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.min);
        if (message.max != null && Object.hasOwnProperty.call(message, "max"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.max);
        return writer;
    };

    /**
     * Encodes the specified ProtoSelection message, length delimited. Does not implicitly {@link ProtoSelection.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSelection
     * @static
     * @param {IProtoSelection} message ProtoSelection message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSelection.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSelection message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSelection
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSelection} ProtoSelection
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSelection.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSelection();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.internalName = reader.string();
                    break;
                }
            case 6: {
                    message.name = reader.string();
                    break;
                }
            case 7: {
                    message.multi = reader.bool();
                    break;
                }
            case 8: {
                    message.min = reader.uint64();
                    break;
                }
            case 9: {
                    message.max = reader.uint64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSelection message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSelection
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSelection} ProtoSelection
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSelection.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSelection message.
     * @function verify
     * @memberof ProtoSelection
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSelection.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.internalName != null && message.hasOwnProperty("internalName"))
            if (!$util.isString(message.internalName))
                return "internalName: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.multi != null && message.hasOwnProperty("multi"))
            if (typeof message.multi !== "boolean")
                return "multi: boolean expected";
        if (message.min != null && message.hasOwnProperty("min"))
            if (!$util.isInteger(message.min) && !(message.min && $util.isInteger(message.min.low) && $util.isInteger(message.min.high)))
                return "min: integer|Long expected";
        if (message.max != null && message.hasOwnProperty("max"))
            if (!$util.isInteger(message.max) && !(message.max && $util.isInteger(message.max.low) && $util.isInteger(message.max.high)))
                return "max: integer|Long expected";
        return null;
    };

    /**
     * Creates a ProtoSelection message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSelection
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSelection} ProtoSelection
     */
    ProtoSelection.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSelection)
            return object;
        var message = new $root.ProtoSelection();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoSelection._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoSelection._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoSelection.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoSelection.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.internalName != null)
            message.internalName = String(object.internalName);
        if (object.name != null)
            message.name = String(object.name);
        if (object.multi != null)
            message.multi = Boolean(object.multi);
        if (object.min != null)
            if ($util.Long)
                (message.min = $util.Long.fromValue(object.min)).unsigned = true;
            else if (typeof object.min === "string")
                message.min = parseInt(object.min, 10);
            else if (typeof object.min === "number")
                message.min = object.min;
            else if (typeof object.min === "object")
                message.min = new $util.LongBits(object.min.low >>> 0, object.min.high >>> 0).toNumber(true);
        if (object.max != null)
            if ($util.Long)
                (message.max = $util.Long.fromValue(object.max)).unsigned = true;
            else if (typeof object.max === "string")
                message.max = parseInt(object.max, 10);
            else if (typeof object.max === "number")
                message.max = object.max;
            else if (typeof object.max === "object")
                message.max = new $util.LongBits(object.max.low >>> 0, object.max.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a ProtoSelection message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSelection
     * @static
     * @param {ProtoSelection} message ProtoSelection
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSelection.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.internalName = "";
            object.name = "";
            object.multi = false;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.min = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.min = options.longs === String ? "0" : 0;
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.max = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.max = options.longs === String ? "0" : 0;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.internalName != null && message.hasOwnProperty("internalName"))
            object.internalName = message.internalName;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.multi != null && message.hasOwnProperty("multi"))
            object.multi = message.multi;
        if (message.min != null && message.hasOwnProperty("min"))
            if (typeof message.min === "number")
                object.min = options.longs === String ? String(message.min) : message.min;
            else
                object.min = options.longs === String ? $util.Long.prototype.toString.call(message.min) : options.longs === Number ? new $util.LongBits(message.min.low >>> 0, message.min.high >>> 0).toNumber(true) : message.min;
        if (message.max != null && message.hasOwnProperty("max"))
            if (typeof message.max === "number")
                object.max = options.longs === String ? String(message.max) : message.max;
            else
                object.max = options.longs === String ? $util.Long.prototype.toString.call(message.max) : options.longs === Number ? new $util.LongBits(message.max.low >>> 0, message.max.high >>> 0).toNumber(true) : message.max;
        return object;
    };

    /**
     * Converts this ProtoSelection to JSON.
     * @function toJSON
     * @memberof ProtoSelection
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSelection.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSelection
     * @function getTypeUrl
     * @memberof ProtoSelection
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSelection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSelection";
    };

    return ProtoSelection;
})();

$root.ProtoSelectionEntry = (function() {

    /**
     * Properties of a ProtoSelectionEntry.
     * @name IProtoSelectionEntry
     * @interface IProtoSelectionEntry
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoSelectionEntry _children
     * @property {IProtoDocumentElement|null} [parent] ProtoSelectionEntry parent
     * @property {string|null} [uuid] ProtoSelectionEntry uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoSelectionEntry comChannelUUIDs
     * @property {string|null} [internalName] ProtoSelectionEntry internalName
     * @property {string|null} [name] ProtoSelectionEntry name
     * @property {boolean|null} [selected] ProtoSelectionEntry selected
     */

    /**
     * Constructs a new ProtoSelectionEntry.
     * @name ProtoSelectionEntry
     * @classdesc Represents a ProtoSelectionEntry.
     * @implements IProtoSelectionEntry
     * @constructor
     * @param {IProtoSelectionEntry=} [properties] Properties to set
     */
    function ProtoSelectionEntry(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoSelectionEntry _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoSelectionEntry
     * @instance
     */
    ProtoSelectionEntry.prototype._children = $util.emptyArray;

    /**
     * ProtoSelectionEntry parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoSelectionEntry
     * @instance
     */
    ProtoSelectionEntry.prototype.parent = null;

    /**
     * ProtoSelectionEntry uuid.
     * @member {string} uuid
     * @memberof ProtoSelectionEntry
     * @instance
     */
    ProtoSelectionEntry.prototype.uuid = "";

    /**
     * ProtoSelectionEntry comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoSelectionEntry
     * @instance
     */
    ProtoSelectionEntry.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoSelectionEntry internalName.
     * @member {string} internalName
     * @memberof ProtoSelectionEntry
     * @instance
     */
    ProtoSelectionEntry.prototype.internalName = "";

    /**
     * ProtoSelectionEntry name.
     * @member {string} name
     * @memberof ProtoSelectionEntry
     * @instance
     */
    ProtoSelectionEntry.prototype.name = "";

    /**
     * ProtoSelectionEntry selected.
     * @member {boolean} selected
     * @memberof ProtoSelectionEntry
     * @instance
     */
    ProtoSelectionEntry.prototype.selected = false;

    /**
     * Creates a new ProtoSelectionEntry instance using the specified properties.
     * @function create
     * @memberof ProtoSelectionEntry
     * @static
     * @param {IProtoSelectionEntry=} [properties] Properties to set
     * @returns {ProtoSelectionEntry} ProtoSelectionEntry instance
     */
    ProtoSelectionEntry.create = function create(properties) {
        return new ProtoSelectionEntry(properties);
    };

    /**
     * Encodes the specified ProtoSelectionEntry message. Does not implicitly {@link ProtoSelectionEntry.verify|verify} messages.
     * @function encode
     * @memberof ProtoSelectionEntry
     * @static
     * @param {IProtoSelectionEntry} message ProtoSelectionEntry message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSelectionEntry.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.internalName != null && Object.hasOwnProperty.call(message, "internalName"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.internalName);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.name);
        if (message.selected != null && Object.hasOwnProperty.call(message, "selected"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.selected);
        return writer;
    };

    /**
     * Encodes the specified ProtoSelectionEntry message, length delimited. Does not implicitly {@link ProtoSelectionEntry.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoSelectionEntry
     * @static
     * @param {IProtoSelectionEntry} message ProtoSelectionEntry message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoSelectionEntry.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoSelectionEntry message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoSelectionEntry
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoSelectionEntry} ProtoSelectionEntry
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSelectionEntry.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoSelectionEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.internalName = reader.string();
                    break;
                }
            case 6: {
                    message.name = reader.string();
                    break;
                }
            case 7: {
                    message.selected = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoSelectionEntry message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoSelectionEntry
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoSelectionEntry} ProtoSelectionEntry
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoSelectionEntry.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoSelectionEntry message.
     * @function verify
     * @memberof ProtoSelectionEntry
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoSelectionEntry.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.internalName != null && message.hasOwnProperty("internalName"))
            if (!$util.isString(message.internalName))
                return "internalName: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.selected != null && message.hasOwnProperty("selected"))
            if (typeof message.selected !== "boolean")
                return "selected: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoSelectionEntry message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoSelectionEntry
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoSelectionEntry} ProtoSelectionEntry
     */
    ProtoSelectionEntry.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoSelectionEntry)
            return object;
        var message = new $root.ProtoSelectionEntry();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoSelectionEntry._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoSelectionEntry._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoSelectionEntry.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoSelectionEntry.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.internalName != null)
            message.internalName = String(object.internalName);
        if (object.name != null)
            message.name = String(object.name);
        if (object.selected != null)
            message.selected = Boolean(object.selected);
        return message;
    };

    /**
     * Creates a plain object from a ProtoSelectionEntry message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoSelectionEntry
     * @static
     * @param {ProtoSelectionEntry} message ProtoSelectionEntry
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoSelectionEntry.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.internalName = "";
            object.name = "";
            object.selected = false;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.internalName != null && message.hasOwnProperty("internalName"))
            object.internalName = message.internalName;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.selected != null && message.hasOwnProperty("selected"))
            object.selected = message.selected;
        return object;
    };

    /**
     * Converts this ProtoSelectionEntry to JSON.
     * @function toJSON
     * @memberof ProtoSelectionEntry
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoSelectionEntry.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoSelectionEntry
     * @function getTypeUrl
     * @memberof ProtoSelectionEntry
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoSelectionEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoSelectionEntry";
    };

    return ProtoSelectionEntry;
})();

$root.ProtoCondition = (function() {

    /**
     * Properties of a ProtoCondition.
     * @name IProtoCondition
     * @interface IProtoCondition
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoCondition _children
     * @property {IProtoDocumentElement|null} [parent] ProtoCondition parent
     * @property {string|null} [uuid] ProtoCondition uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoCondition comChannelUUIDs
     * @property {string|null} [code] ProtoCondition code
     * @property {boolean|null} [result] ProtoCondition result
     * @property {boolean|null} [regenerate] ProtoCondition regenerate
     */

    /**
     * Constructs a new ProtoCondition.
     * @name ProtoCondition
     * @classdesc Represents a ProtoCondition.
     * @implements IProtoCondition
     * @constructor
     * @param {IProtoCondition=} [properties] Properties to set
     */
    function ProtoCondition(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoCondition _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoCondition
     * @instance
     */
    ProtoCondition.prototype._children = $util.emptyArray;

    /**
     * ProtoCondition parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoCondition
     * @instance
     */
    ProtoCondition.prototype.parent = null;

    /**
     * ProtoCondition uuid.
     * @member {string} uuid
     * @memberof ProtoCondition
     * @instance
     */
    ProtoCondition.prototype.uuid = "";

    /**
     * ProtoCondition comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoCondition
     * @instance
     */
    ProtoCondition.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoCondition code.
     * @member {string} code
     * @memberof ProtoCondition
     * @instance
     */
    ProtoCondition.prototype.code = "";

    /**
     * ProtoCondition result.
     * @member {boolean} result
     * @memberof ProtoCondition
     * @instance
     */
    ProtoCondition.prototype.result = false;

    /**
     * ProtoCondition regenerate.
     * @member {boolean} regenerate
     * @memberof ProtoCondition
     * @instance
     */
    ProtoCondition.prototype.regenerate = false;

    /**
     * Creates a new ProtoCondition instance using the specified properties.
     * @function create
     * @memberof ProtoCondition
     * @static
     * @param {IProtoCondition=} [properties] Properties to set
     * @returns {ProtoCondition} ProtoCondition instance
     */
    ProtoCondition.create = function create(properties) {
        return new ProtoCondition(properties);
    };

    /**
     * Encodes the specified ProtoCondition message. Does not implicitly {@link ProtoCondition.verify|verify} messages.
     * @function encode
     * @memberof ProtoCondition
     * @static
     * @param {IProtoCondition} message ProtoCondition message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCondition.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.code != null && Object.hasOwnProperty.call(message, "code"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.code);
        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.result);
        if (message.regenerate != null && Object.hasOwnProperty.call(message, "regenerate"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.regenerate);
        return writer;
    };

    /**
     * Encodes the specified ProtoCondition message, length delimited. Does not implicitly {@link ProtoCondition.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoCondition
     * @static
     * @param {IProtoCondition} message ProtoCondition message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoCondition.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoCondition message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoCondition
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoCondition} ProtoCondition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCondition.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoCondition();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.code = reader.string();
                    break;
                }
            case 6: {
                    message.result = reader.bool();
                    break;
                }
            case 7: {
                    message.regenerate = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoCondition message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoCondition
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoCondition} ProtoCondition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoCondition.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoCondition message.
     * @function verify
     * @memberof ProtoCondition
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoCondition.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.code != null && message.hasOwnProperty("code"))
            if (!$util.isString(message.code))
                return "code: string expected";
        if (message.result != null && message.hasOwnProperty("result"))
            if (typeof message.result !== "boolean")
                return "result: boolean expected";
        if (message.regenerate != null && message.hasOwnProperty("regenerate"))
            if (typeof message.regenerate !== "boolean")
                return "regenerate: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoCondition message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoCondition
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoCondition} ProtoCondition
     */
    ProtoCondition.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoCondition)
            return object;
        var message = new $root.ProtoCondition();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoCondition._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoCondition._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoCondition.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoCondition.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.code != null)
            message.code = String(object.code);
        if (object.result != null)
            message.result = Boolean(object.result);
        if (object.regenerate != null)
            message.regenerate = Boolean(object.regenerate);
        return message;
    };

    /**
     * Creates a plain object from a ProtoCondition message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoCondition
     * @static
     * @param {ProtoCondition} message ProtoCondition
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoCondition.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.code = "";
            object.result = false;
            object.regenerate = false;
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.code != null && message.hasOwnProperty("code"))
            object.code = message.code;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = message.result;
        if (message.regenerate != null && message.hasOwnProperty("regenerate"))
            object.regenerate = message.regenerate;
        return object;
    };

    /**
     * Converts this ProtoCondition to JSON.
     * @function toJSON
     * @memberof ProtoCondition
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoCondition.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoCondition
     * @function getTypeUrl
     * @memberof ProtoCondition
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoCondition.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoCondition";
    };

    return ProtoCondition;
})();

$root.ProtoPageCondition = (function() {

    /**
     * Properties of a ProtoPageCondition.
     * @name IProtoPageCondition
     * @interface IProtoPageCondition
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoPageCondition _children
     * @property {IProtoDocumentElement|null} [parent] ProtoPageCondition parent
     * @property {string|null} [uuid] ProtoPageCondition uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoPageCondition comChannelUUIDs
     * @property {string|null} [code] ProtoPageCondition code
     */

    /**
     * Constructs a new ProtoPageCondition.
     * @name ProtoPageCondition
     * @classdesc Represents a ProtoPageCondition.
     * @implements IProtoPageCondition
     * @constructor
     * @param {IProtoPageCondition=} [properties] Properties to set
     */
    function ProtoPageCondition(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoPageCondition _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoPageCondition
     * @instance
     */
    ProtoPageCondition.prototype._children = $util.emptyArray;

    /**
     * ProtoPageCondition parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoPageCondition
     * @instance
     */
    ProtoPageCondition.prototype.parent = null;

    /**
     * ProtoPageCondition uuid.
     * @member {string} uuid
     * @memberof ProtoPageCondition
     * @instance
     */
    ProtoPageCondition.prototype.uuid = "";

    /**
     * ProtoPageCondition comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoPageCondition
     * @instance
     */
    ProtoPageCondition.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoPageCondition code.
     * @member {string} code
     * @memberof ProtoPageCondition
     * @instance
     */
    ProtoPageCondition.prototype.code = "";

    /**
     * Creates a new ProtoPageCondition instance using the specified properties.
     * @function create
     * @memberof ProtoPageCondition
     * @static
     * @param {IProtoPageCondition=} [properties] Properties to set
     * @returns {ProtoPageCondition} ProtoPageCondition instance
     */
    ProtoPageCondition.create = function create(properties) {
        return new ProtoPageCondition(properties);
    };

    /**
     * Encodes the specified ProtoPageCondition message. Does not implicitly {@link ProtoPageCondition.verify|verify} messages.
     * @function encode
     * @memberof ProtoPageCondition
     * @static
     * @param {IProtoPageCondition} message ProtoPageCondition message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoPageCondition.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.code != null && Object.hasOwnProperty.call(message, "code"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.code);
        return writer;
    };

    /**
     * Encodes the specified ProtoPageCondition message, length delimited. Does not implicitly {@link ProtoPageCondition.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoPageCondition
     * @static
     * @param {IProtoPageCondition} message ProtoPageCondition message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoPageCondition.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoPageCondition message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoPageCondition
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoPageCondition} ProtoPageCondition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoPageCondition.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoPageCondition();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    message.code = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoPageCondition message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoPageCondition
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoPageCondition} ProtoPageCondition
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoPageCondition.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoPageCondition message.
     * @function verify
     * @memberof ProtoPageCondition
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoPageCondition.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.code != null && message.hasOwnProperty("code"))
            if (!$util.isString(message.code))
                return "code: string expected";
        return null;
    };

    /**
     * Creates a ProtoPageCondition message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoPageCondition
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoPageCondition} ProtoPageCondition
     */
    ProtoPageCondition.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoPageCondition)
            return object;
        var message = new $root.ProtoPageCondition();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoPageCondition._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoPageCondition._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoPageCondition.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoPageCondition.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.code != null)
            message.code = String(object.code);
        return message;
    };

    /**
     * Creates a plain object from a ProtoPageCondition message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoPageCondition
     * @static
     * @param {ProtoPageCondition} message ProtoPageCondition
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoPageCondition.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
            object.code = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.code != null && message.hasOwnProperty("code"))
            object.code = message.code;
        return object;
    };

    /**
     * Converts this ProtoPageCondition to JSON.
     * @function toJSON
     * @memberof ProtoPageCondition
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoPageCondition.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoPageCondition
     * @function getTypeUrl
     * @memberof ProtoPageCondition
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoPageCondition.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoPageCondition";
    };

    return ProtoPageCondition;
})();

$root.ProtoLocale = (function() {

    /**
     * Properties of a ProtoLocale.
     * @name IProtoLocale
     * @interface IProtoLocale
     * @property {Array.<IProtoDocumentElement>|null} [_children] ProtoLocale _children
     * @property {IProtoDocumentElement|null} [parent] ProtoLocale parent
     * @property {string|null} [uuid] ProtoLocale uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoLocale comChannelUUIDs
     * @property {Array.<string>|null} [languageUUIDs] ProtoLocale languageUUIDs
     * @property {Array.<string>|null} [regionUUIDs] ProtoLocale regionUUIDs
     */

    /**
     * Constructs a new ProtoLocale.
     * @name ProtoLocale
     * @classdesc Represents a ProtoLocale.
     * @implements IProtoLocale
     * @constructor
     * @param {IProtoLocale=} [properties] Properties to set
     */
    function ProtoLocale(properties) {
        this._children = [];
        this.comChannelUUIDs = [];
        this.languageUUIDs = [];
        this.regionUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoLocale _children.
     * @member {Array.<IProtoDocumentElement>} _children
     * @memberof ProtoLocale
     * @instance
     */
    ProtoLocale.prototype._children = $util.emptyArray;

    /**
     * ProtoLocale parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoLocale
     * @instance
     */
    ProtoLocale.prototype.parent = null;

    /**
     * ProtoLocale uuid.
     * @member {string} uuid
     * @memberof ProtoLocale
     * @instance
     */
    ProtoLocale.prototype.uuid = "";

    /**
     * ProtoLocale comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoLocale
     * @instance
     */
    ProtoLocale.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoLocale languageUUIDs.
     * @member {Array.<string>} languageUUIDs
     * @memberof ProtoLocale
     * @instance
     */
    ProtoLocale.prototype.languageUUIDs = $util.emptyArray;

    /**
     * ProtoLocale regionUUIDs.
     * @member {Array.<string>} regionUUIDs
     * @memberof ProtoLocale
     * @instance
     */
    ProtoLocale.prototype.regionUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoLocale instance using the specified properties.
     * @function create
     * @memberof ProtoLocale
     * @static
     * @param {IProtoLocale=} [properties] Properties to set
     * @returns {ProtoLocale} ProtoLocale instance
     */
    ProtoLocale.create = function create(properties) {
        return new ProtoLocale(properties);
    };

    /**
     * Encodes the specified ProtoLocale message. Does not implicitly {@link ProtoLocale.verify|verify} messages.
     * @function encode
     * @memberof ProtoLocale
     * @static
     * @param {IProtoLocale} message ProtoLocale message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLocale.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message._children != null && message._children.length)
            for (var i = 0; i < message._children.length; ++i)
                $root.ProtoDocumentElement.encode(message._children[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.comChannelUUIDs[i]);
        if (message.languageUUIDs != null && message.languageUUIDs.length)
            for (var i = 0; i < message.languageUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.languageUUIDs[i]);
        if (message.regionUUIDs != null && message.regionUUIDs.length)
            for (var i = 0; i < message.regionUUIDs.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.regionUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoLocale message, length delimited. Does not implicitly {@link ProtoLocale.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoLocale
     * @static
     * @param {IProtoLocale} message ProtoLocale message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoLocale.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoLocale message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoLocale
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoLocale} ProtoLocale
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLocale.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoLocale();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    if (!(message._children && message._children.length))
                        message._children = [];
                    message._children.push($root.ProtoDocumentElement.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.uuid = reader.string();
                    break;
                }
            case 4: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 5: {
                    if (!(message.languageUUIDs && message.languageUUIDs.length))
                        message.languageUUIDs = [];
                    message.languageUUIDs.push(reader.string());
                    break;
                }
            case 6: {
                    if (!(message.regionUUIDs && message.regionUUIDs.length))
                        message.regionUUIDs = [];
                    message.regionUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoLocale message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoLocale
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoLocale} ProtoLocale
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoLocale.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoLocale message.
     * @function verify
     * @memberof ProtoLocale
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoLocale.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message._children != null && message.hasOwnProperty("_children")) {
            if (!Array.isArray(message._children))
                return "_children: array expected";
            for (var i = 0; i < message._children.length; ++i) {
                var error = $root.ProtoDocumentElement.verify(message._children[i]);
                if (error)
                    return "_children." + error;
            }
        }
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.languageUUIDs != null && message.hasOwnProperty("languageUUIDs")) {
            if (!Array.isArray(message.languageUUIDs))
                return "languageUUIDs: array expected";
            for (var i = 0; i < message.languageUUIDs.length; ++i)
                if (!$util.isString(message.languageUUIDs[i]))
                    return "languageUUIDs: string[] expected";
        }
        if (message.regionUUIDs != null && message.hasOwnProperty("regionUUIDs")) {
            if (!Array.isArray(message.regionUUIDs))
                return "regionUUIDs: array expected";
            for (var i = 0; i < message.regionUUIDs.length; ++i)
                if (!$util.isString(message.regionUUIDs[i]))
                    return "regionUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoLocale message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoLocale
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoLocale} ProtoLocale
     */
    ProtoLocale.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoLocale)
            return object;
        var message = new $root.ProtoLocale();
        if (object._children) {
            if (!Array.isArray(object._children))
                throw TypeError(".ProtoLocale._children: array expected");
            message._children = [];
            for (var i = 0; i < object._children.length; ++i) {
                if (typeof object._children[i] !== "object")
                    throw TypeError(".ProtoLocale._children: object expected");
                message._children[i] = $root.ProtoDocumentElement.fromObject(object._children[i]);
            }
        }
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoLocale.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoLocale.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.languageUUIDs) {
            if (!Array.isArray(object.languageUUIDs))
                throw TypeError(".ProtoLocale.languageUUIDs: array expected");
            message.languageUUIDs = [];
            for (var i = 0; i < object.languageUUIDs.length; ++i)
                message.languageUUIDs[i] = String(object.languageUUIDs[i]);
        }
        if (object.regionUUIDs) {
            if (!Array.isArray(object.regionUUIDs))
                throw TypeError(".ProtoLocale.regionUUIDs: array expected");
            message.regionUUIDs = [];
            for (var i = 0; i < object.regionUUIDs.length; ++i)
                message.regionUUIDs[i] = String(object.regionUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoLocale message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoLocale
     * @static
     * @param {ProtoLocale} message ProtoLocale
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoLocale.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object._children = [];
            object.comChannelUUIDs = [];
            object.languageUUIDs = [];
            object.regionUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.uuid = "";
        }
        if (message._children && message._children.length) {
            object._children = [];
            for (var j = 0; j < message._children.length; ++j)
                object._children[j] = $root.ProtoDocumentElement.toObject(message._children[j], options);
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.languageUUIDs && message.languageUUIDs.length) {
            object.languageUUIDs = [];
            for (var j = 0; j < message.languageUUIDs.length; ++j)
                object.languageUUIDs[j] = message.languageUUIDs[j];
        }
        if (message.regionUUIDs && message.regionUUIDs.length) {
            object.regionUUIDs = [];
            for (var j = 0; j < message.regionUUIDs.length; ++j)
                object.regionUUIDs[j] = message.regionUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoLocale to JSON.
     * @function toJSON
     * @memberof ProtoLocale
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoLocale.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoLocale
     * @function getTypeUrl
     * @memberof ProtoLocale
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoLocale.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoLocale";
    };

    return ProtoLocale;
})();

$root.ProtoTag = (function() {

    /**
     * Properties of a ProtoTag.
     * @name IProtoTag
     * @interface IProtoTag
     * @property {IProtoDocumentElement|null} [parent] ProtoTag parent
     * @property {string|null} [name] ProtoTag name
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoTag comChannelUUIDs
     * @property {string|null} [uuid] ProtoTag uuid
     * @property {Array.<string>|null} [params] ProtoTag params
     * @property {string|null} [nameCode] ProtoTag nameCode
     * @property {boolean|null} [codeMode] ProtoTag codeMode
     */

    /**
     * Constructs a new ProtoTag.
     * @name ProtoTag
     * @classdesc Represents a ProtoTag.
     * @implements IProtoTag
     * @constructor
     * @param {IProtoTag=} [properties] Properties to set
     */
    function ProtoTag(properties) {
        this.comChannelUUIDs = [];
        this.params = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoTag parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoTag
     * @instance
     */
    ProtoTag.prototype.parent = null;

    /**
     * ProtoTag name.
     * @member {string} name
     * @memberof ProtoTag
     * @instance
     */
    ProtoTag.prototype.name = "";

    /**
     * ProtoTag comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoTag
     * @instance
     */
    ProtoTag.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoTag uuid.
     * @member {string} uuid
     * @memberof ProtoTag
     * @instance
     */
    ProtoTag.prototype.uuid = "";

    /**
     * ProtoTag params.
     * @member {Array.<string>} params
     * @memberof ProtoTag
     * @instance
     */
    ProtoTag.prototype.params = $util.emptyArray;

    /**
     * ProtoTag nameCode.
     * @member {string} nameCode
     * @memberof ProtoTag
     * @instance
     */
    ProtoTag.prototype.nameCode = "";

    /**
     * ProtoTag codeMode.
     * @member {boolean} codeMode
     * @memberof ProtoTag
     * @instance
     */
    ProtoTag.prototype.codeMode = false;

    /**
     * Creates a new ProtoTag instance using the specified properties.
     * @function create
     * @memberof ProtoTag
     * @static
     * @param {IProtoTag=} [properties] Properties to set
     * @returns {ProtoTag} ProtoTag instance
     */
    ProtoTag.create = function create(properties) {
        return new ProtoTag(properties);
    };

    /**
     * Encodes the specified ProtoTag message. Does not implicitly {@link ProtoTag.verify|verify} messages.
     * @function encode
     * @memberof ProtoTag
     * @static
     * @param {IProtoTag} message ProtoTag message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTag.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uuid);
        if (message.params != null && message.params.length)
            for (var i = 0; i < message.params.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.params[i]);
        if (message.nameCode != null && Object.hasOwnProperty.call(message, "nameCode"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.nameCode);
        if (message.codeMode != null && Object.hasOwnProperty.call(message, "codeMode"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.codeMode);
        return writer;
    };

    /**
     * Encodes the specified ProtoTag message, length delimited. Does not implicitly {@link ProtoTag.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoTag
     * @static
     * @param {IProtoTag} message ProtoTag message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoTag.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoTag message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoTag
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoTag} ProtoTag
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTag.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoTag();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 4: {
                    message.uuid = reader.string();
                    break;
                }
            case 5: {
                    if (!(message.params && message.params.length))
                        message.params = [];
                    message.params.push(reader.string());
                    break;
                }
            case 6: {
                    message.nameCode = reader.string();
                    break;
                }
            case 7: {
                    message.codeMode = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoTag message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoTag
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoTag} ProtoTag
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoTag.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoTag message.
     * @function verify
     * @memberof ProtoTag
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoTag.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.params != null && message.hasOwnProperty("params")) {
            if (!Array.isArray(message.params))
                return "params: array expected";
            for (var i = 0; i < message.params.length; ++i)
                if (!$util.isString(message.params[i]))
                    return "params: string[] expected";
        }
        if (message.nameCode != null && message.hasOwnProperty("nameCode"))
            if (!$util.isString(message.nameCode))
                return "nameCode: string expected";
        if (message.codeMode != null && message.hasOwnProperty("codeMode"))
            if (typeof message.codeMode !== "boolean")
                return "codeMode: boolean expected";
        return null;
    };

    /**
     * Creates a ProtoTag message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoTag
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoTag} ProtoTag
     */
    ProtoTag.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoTag)
            return object;
        var message = new $root.ProtoTag();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoTag.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.name != null)
            message.name = String(object.name);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoTag.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.params) {
            if (!Array.isArray(object.params))
                throw TypeError(".ProtoTag.params: array expected");
            message.params = [];
            for (var i = 0; i < object.params.length; ++i)
                message.params[i] = String(object.params[i]);
        }
        if (object.nameCode != null)
            message.nameCode = String(object.nameCode);
        if (object.codeMode != null)
            message.codeMode = Boolean(object.codeMode);
        return message;
    };

    /**
     * Creates a plain object from a ProtoTag message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoTag
     * @static
     * @param {ProtoTag} message ProtoTag
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoTag.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.comChannelUUIDs = [];
            object.params = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.name = "";
            object.uuid = "";
            object.nameCode = "";
            object.codeMode = false;
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.params && message.params.length) {
            object.params = [];
            for (var j = 0; j < message.params.length; ++j)
                object.params[j] = message.params[j];
        }
        if (message.nameCode != null && message.hasOwnProperty("nameCode"))
            object.nameCode = message.nameCode;
        if (message.codeMode != null && message.hasOwnProperty("codeMode"))
            object.codeMode = message.codeMode;
        return object;
    };

    /**
     * Converts this ProtoTag to JSON.
     * @function toJSON
     * @memberof ProtoTag
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoTag.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoTag
     * @function getTypeUrl
     * @memberof ProtoTag
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoTag.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoTag";
    };

    return ProtoTag;
})();

$root.ProtoParagraphSetDefault = (function() {

    /**
     * Properties of a ProtoParagraphSetDefault.
     * @name IProtoParagraphSetDefault
     * @interface IProtoParagraphSetDefault
     * @property {IProtoDocumentElement|null} [parent] ProtoParagraphSetDefault parent
     * @property {string|null} [name] ProtoParagraphSetDefault name
     * @property {string|null} [paragraphFormatUUID] ProtoParagraphSetDefault paragraphFormatUUID
     * @property {string|null} [uuid] ProtoParagraphSetDefault uuid
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoParagraphSetDefault comChannelUUIDs
     */

    /**
     * Constructs a new ProtoParagraphSetDefault.
     * @name ProtoParagraphSetDefault
     * @classdesc Represents a ProtoParagraphSetDefault.
     * @implements IProtoParagraphSetDefault
     * @constructor
     * @param {IProtoParagraphSetDefault=} [properties] Properties to set
     */
    function ProtoParagraphSetDefault(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoParagraphSetDefault parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoParagraphSetDefault
     * @instance
     */
    ProtoParagraphSetDefault.prototype.parent = null;

    /**
     * ProtoParagraphSetDefault name.
     * @member {string} name
     * @memberof ProtoParagraphSetDefault
     * @instance
     */
    ProtoParagraphSetDefault.prototype.name = "";

    /**
     * ProtoParagraphSetDefault paragraphFormatUUID.
     * @member {string} paragraphFormatUUID
     * @memberof ProtoParagraphSetDefault
     * @instance
     */
    ProtoParagraphSetDefault.prototype.paragraphFormatUUID = "";

    /**
     * ProtoParagraphSetDefault uuid.
     * @member {string} uuid
     * @memberof ProtoParagraphSetDefault
     * @instance
     */
    ProtoParagraphSetDefault.prototype.uuid = "";

    /**
     * ProtoParagraphSetDefault comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoParagraphSetDefault
     * @instance
     */
    ProtoParagraphSetDefault.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * Creates a new ProtoParagraphSetDefault instance using the specified properties.
     * @function create
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {IProtoParagraphSetDefault=} [properties] Properties to set
     * @returns {ProtoParagraphSetDefault} ProtoParagraphSetDefault instance
     */
    ProtoParagraphSetDefault.create = function create(properties) {
        return new ProtoParagraphSetDefault(properties);
    };

    /**
     * Encodes the specified ProtoParagraphSetDefault message. Does not implicitly {@link ProtoParagraphSetDefault.verify|verify} messages.
     * @function encode
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {IProtoParagraphSetDefault} message ProtoParagraphSetDefault message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoParagraphSetDefault.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.paragraphFormatUUID != null && Object.hasOwnProperty.call(message, "paragraphFormatUUID"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.paragraphFormatUUID);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uuid);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.comChannelUUIDs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProtoParagraphSetDefault message, length delimited. Does not implicitly {@link ProtoParagraphSetDefault.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {IProtoParagraphSetDefault} message ProtoParagraphSetDefault message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoParagraphSetDefault.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoParagraphSetDefault message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoParagraphSetDefault} ProtoParagraphSetDefault
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoParagraphSetDefault.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoParagraphSetDefault();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            case 3: {
                    message.paragraphFormatUUID = reader.string();
                    break;
                }
            case 4: {
                    message.uuid = reader.string();
                    break;
                }
            case 5: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoParagraphSetDefault message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoParagraphSetDefault} ProtoParagraphSetDefault
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoParagraphSetDefault.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoParagraphSetDefault message.
     * @function verify
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoParagraphSetDefault.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.paragraphFormatUUID != null && message.hasOwnProperty("paragraphFormatUUID"))
            if (!$util.isString(message.paragraphFormatUUID))
                return "paragraphFormatUUID: string expected";
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        return null;
    };

    /**
     * Creates a ProtoParagraphSetDefault message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoParagraphSetDefault} ProtoParagraphSetDefault
     */
    ProtoParagraphSetDefault.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoParagraphSetDefault)
            return object;
        var message = new $root.ProtoParagraphSetDefault();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoParagraphSetDefault.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.name != null)
            message.name = String(object.name);
        if (object.paragraphFormatUUID != null)
            message.paragraphFormatUUID = String(object.paragraphFormatUUID);
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoParagraphSetDefault.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a ProtoParagraphSetDefault message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {ProtoParagraphSetDefault} message ProtoParagraphSetDefault
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoParagraphSetDefault.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.name = "";
            object.paragraphFormatUUID = "";
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.paragraphFormatUUID != null && message.hasOwnProperty("paragraphFormatUUID"))
            object.paragraphFormatUUID = message.paragraphFormatUUID;
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        return object;
    };

    /**
     * Converts this ProtoParagraphSetDefault to JSON.
     * @function toJSON
     * @memberof ProtoParagraphSetDefault
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoParagraphSetDefault.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoParagraphSetDefault
     * @function getTypeUrl
     * @memberof ProtoParagraphSetDefault
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoParagraphSetDefault.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoParagraphSetDefault";
    };

    return ProtoParagraphSetDefault;
})();

$root.ProtoInputFieldText = (function() {

    /**
     * Properties of a ProtoInputFieldText.
     * @name IProtoInputFieldText
     * @interface IProtoInputFieldText
     * @property {IProtoDocumentElement|null} [parent] ProtoInputFieldText parent
     * @property {IProtoBaseInputField|null} [base] ProtoInputFieldText base
     * @property {PDFPrintingBehavior|null} [pdfPrintingBehavior] ProtoInputFieldText pdfPrintingBehavior
     * @property {IProtoBoxedMeasure|null} [pdfSize] ProtoInputFieldText pdfSize
     * @property {string|null} [pdfFormName] ProtoInputFieldText pdfFormName
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoInputFieldText comChannelUUIDs
     * @property {string|null} [uuid] ProtoInputFieldText uuid
     */

    /**
     * Constructs a new ProtoInputFieldText.
     * @name ProtoInputFieldText
     * @classdesc Represents a ProtoInputFieldText.
     * @implements IProtoInputFieldText
     * @constructor
     * @param {IProtoInputFieldText=} [properties] Properties to set
     */
    function ProtoInputFieldText(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoInputFieldText parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoInputFieldText
     * @instance
     */
    ProtoInputFieldText.prototype.parent = null;

    /**
     * ProtoInputFieldText base.
     * @member {IProtoBaseInputField|null|undefined} base
     * @memberof ProtoInputFieldText
     * @instance
     */
    ProtoInputFieldText.prototype.base = null;

    /**
     * ProtoInputFieldText pdfPrintingBehavior.
     * @member {PDFPrintingBehavior} pdfPrintingBehavior
     * @memberof ProtoInputFieldText
     * @instance
     */
    ProtoInputFieldText.prototype.pdfPrintingBehavior = 0;

    /**
     * ProtoInputFieldText pdfSize.
     * @member {IProtoBoxedMeasure|null|undefined} pdfSize
     * @memberof ProtoInputFieldText
     * @instance
     */
    ProtoInputFieldText.prototype.pdfSize = null;

    /**
     * ProtoInputFieldText pdfFormName.
     * @member {string} pdfFormName
     * @memberof ProtoInputFieldText
     * @instance
     */
    ProtoInputFieldText.prototype.pdfFormName = "";

    /**
     * ProtoInputFieldText comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoInputFieldText
     * @instance
     */
    ProtoInputFieldText.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoInputFieldText uuid.
     * @member {string} uuid
     * @memberof ProtoInputFieldText
     * @instance
     */
    ProtoInputFieldText.prototype.uuid = "";

    /**
     * Creates a new ProtoInputFieldText instance using the specified properties.
     * @function create
     * @memberof ProtoInputFieldText
     * @static
     * @param {IProtoInputFieldText=} [properties] Properties to set
     * @returns {ProtoInputFieldText} ProtoInputFieldText instance
     */
    ProtoInputFieldText.create = function create(properties) {
        return new ProtoInputFieldText(properties);
    };

    /**
     * Encodes the specified ProtoInputFieldText message. Does not implicitly {@link ProtoInputFieldText.verify|verify} messages.
     * @function encode
     * @memberof ProtoInputFieldText
     * @static
     * @param {IProtoInputFieldText} message ProtoInputFieldText message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldText.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.base != null && Object.hasOwnProperty.call(message, "base"))
            $root.ProtoBaseInputField.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.pdfPrintingBehavior != null && Object.hasOwnProperty.call(message, "pdfPrintingBehavior"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pdfPrintingBehavior);
        if (message.pdfSize != null && Object.hasOwnProperty.call(message, "pdfSize"))
            $root.ProtoBoxedMeasure.encode(message.pdfSize, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.pdfFormName != null && Object.hasOwnProperty.call(message, "pdfFormName"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.pdfFormName);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.uuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoInputFieldText message, length delimited. Does not implicitly {@link ProtoInputFieldText.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoInputFieldText
     * @static
     * @param {IProtoInputFieldText} message ProtoInputFieldText message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldText.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoInputFieldText message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoInputFieldText
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoInputFieldText} ProtoInputFieldText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldText.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoInputFieldText();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.base = $root.ProtoBaseInputField.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    message.pdfPrintingBehavior = reader.int32();
                    break;
                }
            case 4: {
                    message.pdfSize = $root.ProtoBoxedMeasure.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.pdfFormName = reader.string();
                    break;
                }
            case 6: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 7: {
                    message.uuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoInputFieldText message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoInputFieldText
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoInputFieldText} ProtoInputFieldText
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldText.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoInputFieldText message.
     * @function verify
     * @memberof ProtoInputFieldText
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoInputFieldText.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.base != null && message.hasOwnProperty("base")) {
            var error = $root.ProtoBaseInputField.verify(message.base);
            if (error)
                return "base." + error;
        }
        if (message.pdfPrintingBehavior != null && message.hasOwnProperty("pdfPrintingBehavior"))
            switch (message.pdfPrintingBehavior) {
            default:
                return "pdfPrintingBehavior: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.pdfSize != null && message.hasOwnProperty("pdfSize")) {
            var error = $root.ProtoBoxedMeasure.verify(message.pdfSize);
            if (error)
                return "pdfSize." + error;
        }
        if (message.pdfFormName != null && message.hasOwnProperty("pdfFormName"))
            if (!$util.isString(message.pdfFormName))
                return "pdfFormName: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoInputFieldText message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoInputFieldText
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoInputFieldText} ProtoInputFieldText
     */
    ProtoInputFieldText.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoInputFieldText)
            return object;
        var message = new $root.ProtoInputFieldText();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoInputFieldText.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.base != null) {
            if (typeof object.base !== "object")
                throw TypeError(".ProtoInputFieldText.base: object expected");
            message.base = $root.ProtoBaseInputField.fromObject(object.base);
        }
        switch (object.pdfPrintingBehavior) {
        default:
            if (typeof object.pdfPrintingBehavior === "number") {
                message.pdfPrintingBehavior = object.pdfPrintingBehavior;
                break;
            }
            break;
        case "PDF_PRINTING_BEHAVIOR_INPUT":
        case 0:
            message.pdfPrintingBehavior = 0;
            break;
        case "PDF_PRINTING_BEHAVIOR_TEXT":
        case 1:
            message.pdfPrintingBehavior = 1;
            break;
        case "PDF_PRINTING_BEHAVIOR_INHERIT":
        case 2:
            message.pdfPrintingBehavior = 2;
            break;
        }
        if (object.pdfSize != null) {
            if (typeof object.pdfSize !== "object")
                throw TypeError(".ProtoInputFieldText.pdfSize: object expected");
            message.pdfSize = $root.ProtoBoxedMeasure.fromObject(object.pdfSize);
        }
        if (object.pdfFormName != null)
            message.pdfFormName = String(object.pdfFormName);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoInputFieldText.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoInputFieldText message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoInputFieldText
     * @static
     * @param {ProtoInputFieldText} message ProtoInputFieldText
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoInputFieldText.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.base = null;
            object.pdfPrintingBehavior = options.enums === String ? "PDF_PRINTING_BEHAVIOR_INPUT" : 0;
            object.pdfSize = null;
            object.pdfFormName = "";
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.base != null && message.hasOwnProperty("base"))
            object.base = $root.ProtoBaseInputField.toObject(message.base, options);
        if (message.pdfPrintingBehavior != null && message.hasOwnProperty("pdfPrintingBehavior"))
            object.pdfPrintingBehavior = options.enums === String ? $root.PDFPrintingBehavior[message.pdfPrintingBehavior] === undefined ? message.pdfPrintingBehavior : $root.PDFPrintingBehavior[message.pdfPrintingBehavior] : message.pdfPrintingBehavior;
        if (message.pdfSize != null && message.hasOwnProperty("pdfSize"))
            object.pdfSize = $root.ProtoBoxedMeasure.toObject(message.pdfSize, options);
        if (message.pdfFormName != null && message.hasOwnProperty("pdfFormName"))
            object.pdfFormName = message.pdfFormName;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        return object;
    };

    /**
     * Converts this ProtoInputFieldText to JSON.
     * @function toJSON
     * @memberof ProtoInputFieldText
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoInputFieldText.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoInputFieldText
     * @function getTypeUrl
     * @memberof ProtoInputFieldText
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoInputFieldText.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoInputFieldText";
    };

    return ProtoInputFieldText;
})();

$root.ProtoInputFieldDate = (function() {

    /**
     * Properties of a ProtoInputFieldDate.
     * @name IProtoInputFieldDate
     * @interface IProtoInputFieldDate
     * @property {IProtoDocumentElement|null} [parent] ProtoInputFieldDate parent
     * @property {IProtoBaseInputField|null} [base] ProtoInputFieldDate base
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoInputFieldDate comChannelUUIDs
     * @property {string|null} [uuid] ProtoInputFieldDate uuid
     */

    /**
     * Constructs a new ProtoInputFieldDate.
     * @name ProtoInputFieldDate
     * @classdesc Represents a ProtoInputFieldDate.
     * @implements IProtoInputFieldDate
     * @constructor
     * @param {IProtoInputFieldDate=} [properties] Properties to set
     */
    function ProtoInputFieldDate(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoInputFieldDate parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoInputFieldDate
     * @instance
     */
    ProtoInputFieldDate.prototype.parent = null;

    /**
     * ProtoInputFieldDate base.
     * @member {IProtoBaseInputField|null|undefined} base
     * @memberof ProtoInputFieldDate
     * @instance
     */
    ProtoInputFieldDate.prototype.base = null;

    /**
     * ProtoInputFieldDate comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoInputFieldDate
     * @instance
     */
    ProtoInputFieldDate.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoInputFieldDate uuid.
     * @member {string} uuid
     * @memberof ProtoInputFieldDate
     * @instance
     */
    ProtoInputFieldDate.prototype.uuid = "";

    /**
     * Creates a new ProtoInputFieldDate instance using the specified properties.
     * @function create
     * @memberof ProtoInputFieldDate
     * @static
     * @param {IProtoInputFieldDate=} [properties] Properties to set
     * @returns {ProtoInputFieldDate} ProtoInputFieldDate instance
     */
    ProtoInputFieldDate.create = function create(properties) {
        return new ProtoInputFieldDate(properties);
    };

    /**
     * Encodes the specified ProtoInputFieldDate message. Does not implicitly {@link ProtoInputFieldDate.verify|verify} messages.
     * @function encode
     * @memberof ProtoInputFieldDate
     * @static
     * @param {IProtoInputFieldDate} message ProtoInputFieldDate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldDate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.base != null && Object.hasOwnProperty.call(message, "base"))
            $root.ProtoBaseInputField.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoInputFieldDate message, length delimited. Does not implicitly {@link ProtoInputFieldDate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoInputFieldDate
     * @static
     * @param {IProtoInputFieldDate} message ProtoInputFieldDate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldDate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoInputFieldDate message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoInputFieldDate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoInputFieldDate} ProtoInputFieldDate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldDate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoInputFieldDate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.base = $root.ProtoBaseInputField.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 4: {
                    message.uuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoInputFieldDate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoInputFieldDate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoInputFieldDate} ProtoInputFieldDate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldDate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoInputFieldDate message.
     * @function verify
     * @memberof ProtoInputFieldDate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoInputFieldDate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.base != null && message.hasOwnProperty("base")) {
            var error = $root.ProtoBaseInputField.verify(message.base);
            if (error)
                return "base." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoInputFieldDate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoInputFieldDate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoInputFieldDate} ProtoInputFieldDate
     */
    ProtoInputFieldDate.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoInputFieldDate)
            return object;
        var message = new $root.ProtoInputFieldDate();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoInputFieldDate.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.base != null) {
            if (typeof object.base !== "object")
                throw TypeError(".ProtoInputFieldDate.base: object expected");
            message.base = $root.ProtoBaseInputField.fromObject(object.base);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoInputFieldDate.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoInputFieldDate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoInputFieldDate
     * @static
     * @param {ProtoInputFieldDate} message ProtoInputFieldDate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoInputFieldDate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.base = null;
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.base != null && message.hasOwnProperty("base"))
            object.base = $root.ProtoBaseInputField.toObject(message.base, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        return object;
    };

    /**
     * Converts this ProtoInputFieldDate to JSON.
     * @function toJSON
     * @memberof ProtoInputFieldDate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoInputFieldDate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoInputFieldDate
     * @function getTypeUrl
     * @memberof ProtoInputFieldDate
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoInputFieldDate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoInputFieldDate";
    };

    return ProtoInputFieldDate;
})();

$root.ProtoInputFieldCheckbox = (function() {

    /**
     * Properties of a ProtoInputFieldCheckbox.
     * @name IProtoInputFieldCheckbox
     * @interface IProtoInputFieldCheckbox
     * @property {IProtoDocumentElement|null} [parent] ProtoInputFieldCheckbox parent
     * @property {IProtoBaseInputField|null} [base] ProtoInputFieldCheckbox base
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoInputFieldCheckbox comChannelUUIDs
     * @property {string|null} [uuid] ProtoInputFieldCheckbox uuid
     */

    /**
     * Constructs a new ProtoInputFieldCheckbox.
     * @name ProtoInputFieldCheckbox
     * @classdesc Represents a ProtoInputFieldCheckbox.
     * @implements IProtoInputFieldCheckbox
     * @constructor
     * @param {IProtoInputFieldCheckbox=} [properties] Properties to set
     */
    function ProtoInputFieldCheckbox(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoInputFieldCheckbox parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoInputFieldCheckbox
     * @instance
     */
    ProtoInputFieldCheckbox.prototype.parent = null;

    /**
     * ProtoInputFieldCheckbox base.
     * @member {IProtoBaseInputField|null|undefined} base
     * @memberof ProtoInputFieldCheckbox
     * @instance
     */
    ProtoInputFieldCheckbox.prototype.base = null;

    /**
     * ProtoInputFieldCheckbox comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoInputFieldCheckbox
     * @instance
     */
    ProtoInputFieldCheckbox.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoInputFieldCheckbox uuid.
     * @member {string} uuid
     * @memberof ProtoInputFieldCheckbox
     * @instance
     */
    ProtoInputFieldCheckbox.prototype.uuid = "";

    /**
     * Creates a new ProtoInputFieldCheckbox instance using the specified properties.
     * @function create
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {IProtoInputFieldCheckbox=} [properties] Properties to set
     * @returns {ProtoInputFieldCheckbox} ProtoInputFieldCheckbox instance
     */
    ProtoInputFieldCheckbox.create = function create(properties) {
        return new ProtoInputFieldCheckbox(properties);
    };

    /**
     * Encodes the specified ProtoInputFieldCheckbox message. Does not implicitly {@link ProtoInputFieldCheckbox.verify|verify} messages.
     * @function encode
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {IProtoInputFieldCheckbox} message ProtoInputFieldCheckbox message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldCheckbox.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.base != null && Object.hasOwnProperty.call(message, "base"))
            $root.ProtoBaseInputField.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoInputFieldCheckbox message, length delimited. Does not implicitly {@link ProtoInputFieldCheckbox.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {IProtoInputFieldCheckbox} message ProtoInputFieldCheckbox message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldCheckbox.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoInputFieldCheckbox message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoInputFieldCheckbox} ProtoInputFieldCheckbox
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldCheckbox.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoInputFieldCheckbox();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.base = $root.ProtoBaseInputField.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 4: {
                    message.uuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoInputFieldCheckbox message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoInputFieldCheckbox} ProtoInputFieldCheckbox
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldCheckbox.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoInputFieldCheckbox message.
     * @function verify
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoInputFieldCheckbox.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.base != null && message.hasOwnProperty("base")) {
            var error = $root.ProtoBaseInputField.verify(message.base);
            if (error)
                return "base." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoInputFieldCheckbox message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoInputFieldCheckbox} ProtoInputFieldCheckbox
     */
    ProtoInputFieldCheckbox.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoInputFieldCheckbox)
            return object;
        var message = new $root.ProtoInputFieldCheckbox();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoInputFieldCheckbox.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.base != null) {
            if (typeof object.base !== "object")
                throw TypeError(".ProtoInputFieldCheckbox.base: object expected");
            message.base = $root.ProtoBaseInputField.fromObject(object.base);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoInputFieldCheckbox.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoInputFieldCheckbox message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {ProtoInputFieldCheckbox} message ProtoInputFieldCheckbox
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoInputFieldCheckbox.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.base = null;
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.base != null && message.hasOwnProperty("base"))
            object.base = $root.ProtoBaseInputField.toObject(message.base, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        return object;
    };

    /**
     * Converts this ProtoInputFieldCheckbox to JSON.
     * @function toJSON
     * @memberof ProtoInputFieldCheckbox
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoInputFieldCheckbox.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoInputFieldCheckbox
     * @function getTypeUrl
     * @memberof ProtoInputFieldCheckbox
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoInputFieldCheckbox.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoInputFieldCheckbox";
    };

    return ProtoInputFieldCheckbox;
})();

$root.ProtoInputFieldLabel = (function() {

    /**
     * Properties of a ProtoInputFieldLabel.
     * @name IProtoInputFieldLabel
     * @interface IProtoInputFieldLabel
     * @property {IProtoDocumentElement|null} [parent] ProtoInputFieldLabel parent
     * @property {IProtoBaseInputField|null} [base] ProtoInputFieldLabel base
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoInputFieldLabel comChannelUUIDs
     * @property {string|null} [uuid] ProtoInputFieldLabel uuid
     */

    /**
     * Constructs a new ProtoInputFieldLabel.
     * @name ProtoInputFieldLabel
     * @classdesc Represents a ProtoInputFieldLabel.
     * @implements IProtoInputFieldLabel
     * @constructor
     * @param {IProtoInputFieldLabel=} [properties] Properties to set
     */
    function ProtoInputFieldLabel(properties) {
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoInputFieldLabel parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoInputFieldLabel
     * @instance
     */
    ProtoInputFieldLabel.prototype.parent = null;

    /**
     * ProtoInputFieldLabel base.
     * @member {IProtoBaseInputField|null|undefined} base
     * @memberof ProtoInputFieldLabel
     * @instance
     */
    ProtoInputFieldLabel.prototype.base = null;

    /**
     * ProtoInputFieldLabel comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoInputFieldLabel
     * @instance
     */
    ProtoInputFieldLabel.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoInputFieldLabel uuid.
     * @member {string} uuid
     * @memberof ProtoInputFieldLabel
     * @instance
     */
    ProtoInputFieldLabel.prototype.uuid = "";

    /**
     * Creates a new ProtoInputFieldLabel instance using the specified properties.
     * @function create
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {IProtoInputFieldLabel=} [properties] Properties to set
     * @returns {ProtoInputFieldLabel} ProtoInputFieldLabel instance
     */
    ProtoInputFieldLabel.create = function create(properties) {
        return new ProtoInputFieldLabel(properties);
    };

    /**
     * Encodes the specified ProtoInputFieldLabel message. Does not implicitly {@link ProtoInputFieldLabel.verify|verify} messages.
     * @function encode
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {IProtoInputFieldLabel} message ProtoInputFieldLabel message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldLabel.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.base != null && Object.hasOwnProperty.call(message, "base"))
            $root.ProtoBaseInputField.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.uuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoInputFieldLabel message, length delimited. Does not implicitly {@link ProtoInputFieldLabel.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {IProtoInputFieldLabel} message ProtoInputFieldLabel message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldLabel.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoInputFieldLabel message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoInputFieldLabel} ProtoInputFieldLabel
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldLabel.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoInputFieldLabel();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.base = $root.ProtoBaseInputField.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 4: {
                    message.uuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoInputFieldLabel message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoInputFieldLabel} ProtoInputFieldLabel
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldLabel.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoInputFieldLabel message.
     * @function verify
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoInputFieldLabel.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.base != null && message.hasOwnProperty("base")) {
            var error = $root.ProtoBaseInputField.verify(message.base);
            if (error)
                return "base." + error;
        }
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoInputFieldLabel message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoInputFieldLabel} ProtoInputFieldLabel
     */
    ProtoInputFieldLabel.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoInputFieldLabel)
            return object;
        var message = new $root.ProtoInputFieldLabel();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoInputFieldLabel.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.base != null) {
            if (typeof object.base !== "object")
                throw TypeError(".ProtoInputFieldLabel.base: object expected");
            message.base = $root.ProtoBaseInputField.fromObject(object.base);
        }
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoInputFieldLabel.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoInputFieldLabel message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {ProtoInputFieldLabel} message ProtoInputFieldLabel
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoInputFieldLabel.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.comChannelUUIDs = [];
        if (options.defaults) {
            object.parent = null;
            object.base = null;
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.base != null && message.hasOwnProperty("base"))
            object.base = $root.ProtoBaseInputField.toObject(message.base, options);
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        return object;
    };

    /**
     * Converts this ProtoInputFieldLabel to JSON.
     * @function toJSON
     * @memberof ProtoInputFieldLabel
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoInputFieldLabel.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoInputFieldLabel
     * @function getTypeUrl
     * @memberof ProtoInputFieldLabel
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoInputFieldLabel.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoInputFieldLabel";
    };

    return ProtoInputFieldLabel;
})();

$root.ProtoInputFieldDropdown = (function() {

    /**
     * Properties of a ProtoInputFieldDropdown.
     * @name IProtoInputFieldDropdown
     * @interface IProtoInputFieldDropdown
     * @property {IProtoDocumentElement|null} [parent] ProtoInputFieldDropdown parent
     * @property {IProtoBaseInputField|null} [base] ProtoInputFieldDropdown base
     * @property {Array.<IProtoOption>|null} [options] ProtoInputFieldDropdown options
     * @property {boolean|null} [bindOptionsCode] ProtoInputFieldDropdown bindOptionsCode
     * @property {string|null} [optionsCode] ProtoInputFieldDropdown optionsCode
     * @property {Array.<string>|null} [comChannelUUIDs] ProtoInputFieldDropdown comChannelUUIDs
     * @property {string|null} [uuid] ProtoInputFieldDropdown uuid
     */

    /**
     * Constructs a new ProtoInputFieldDropdown.
     * @name ProtoInputFieldDropdown
     * @classdesc Represents a ProtoInputFieldDropdown.
     * @implements IProtoInputFieldDropdown
     * @constructor
     * @param {IProtoInputFieldDropdown=} [properties] Properties to set
     */
    function ProtoInputFieldDropdown(properties) {
        this.options = [];
        this.comChannelUUIDs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProtoInputFieldDropdown parent.
     * @member {IProtoDocumentElement|null|undefined} parent
     * @memberof ProtoInputFieldDropdown
     * @instance
     */
    ProtoInputFieldDropdown.prototype.parent = null;

    /**
     * ProtoInputFieldDropdown base.
     * @member {IProtoBaseInputField|null|undefined} base
     * @memberof ProtoInputFieldDropdown
     * @instance
     */
    ProtoInputFieldDropdown.prototype.base = null;

    /**
     * ProtoInputFieldDropdown options.
     * @member {Array.<IProtoOption>} options
     * @memberof ProtoInputFieldDropdown
     * @instance
     */
    ProtoInputFieldDropdown.prototype.options = $util.emptyArray;

    /**
     * ProtoInputFieldDropdown bindOptionsCode.
     * @member {boolean} bindOptionsCode
     * @memberof ProtoInputFieldDropdown
     * @instance
     */
    ProtoInputFieldDropdown.prototype.bindOptionsCode = false;

    /**
     * ProtoInputFieldDropdown optionsCode.
     * @member {string} optionsCode
     * @memberof ProtoInputFieldDropdown
     * @instance
     */
    ProtoInputFieldDropdown.prototype.optionsCode = "";

    /**
     * ProtoInputFieldDropdown comChannelUUIDs.
     * @member {Array.<string>} comChannelUUIDs
     * @memberof ProtoInputFieldDropdown
     * @instance
     */
    ProtoInputFieldDropdown.prototype.comChannelUUIDs = $util.emptyArray;

    /**
     * ProtoInputFieldDropdown uuid.
     * @member {string} uuid
     * @memberof ProtoInputFieldDropdown
     * @instance
     */
    ProtoInputFieldDropdown.prototype.uuid = "";

    /**
     * Creates a new ProtoInputFieldDropdown instance using the specified properties.
     * @function create
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {IProtoInputFieldDropdown=} [properties] Properties to set
     * @returns {ProtoInputFieldDropdown} ProtoInputFieldDropdown instance
     */
    ProtoInputFieldDropdown.create = function create(properties) {
        return new ProtoInputFieldDropdown(properties);
    };

    /**
     * Encodes the specified ProtoInputFieldDropdown message. Does not implicitly {@link ProtoInputFieldDropdown.verify|verify} messages.
     * @function encode
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {IProtoInputFieldDropdown} message ProtoInputFieldDropdown message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldDropdown.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
            $root.ProtoDocumentElement.encode(message.parent, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.base != null && Object.hasOwnProperty.call(message, "base"))
            $root.ProtoBaseInputField.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.options != null && message.options.length)
            for (var i = 0; i < message.options.length; ++i)
                $root.ProtoOption.encode(message.options[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.bindOptionsCode != null && Object.hasOwnProperty.call(message, "bindOptionsCode"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.bindOptionsCode);
        if (message.optionsCode != null && Object.hasOwnProperty.call(message, "optionsCode"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.optionsCode);
        if (message.comChannelUUIDs != null && message.comChannelUUIDs.length)
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.comChannelUUIDs[i]);
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.uuid);
        return writer;
    };

    /**
     * Encodes the specified ProtoInputFieldDropdown message, length delimited. Does not implicitly {@link ProtoInputFieldDropdown.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {IProtoInputFieldDropdown} message ProtoInputFieldDropdown message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProtoInputFieldDropdown.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProtoInputFieldDropdown message from the specified reader or buffer.
     * @function decode
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProtoInputFieldDropdown} ProtoInputFieldDropdown
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldDropdown.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProtoInputFieldDropdown();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1: {
                    message.parent = $root.ProtoDocumentElement.decode(reader, reader.uint32());
                    break;
                }
            case 2: {
                    message.base = $root.ProtoBaseInputField.decode(reader, reader.uint32());
                    break;
                }
            case 3: {
                    if (!(message.options && message.options.length))
                        message.options = [];
                    message.options.push($root.ProtoOption.decode(reader, reader.uint32()));
                    break;
                }
            case 4: {
                    message.bindOptionsCode = reader.bool();
                    break;
                }
            case 5: {
                    message.optionsCode = reader.string();
                    break;
                }
            case 6: {
                    if (!(message.comChannelUUIDs && message.comChannelUUIDs.length))
                        message.comChannelUUIDs = [];
                    message.comChannelUUIDs.push(reader.string());
                    break;
                }
            case 7: {
                    message.uuid = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProtoInputFieldDropdown message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProtoInputFieldDropdown} ProtoInputFieldDropdown
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProtoInputFieldDropdown.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProtoInputFieldDropdown message.
     * @function verify
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProtoInputFieldDropdown.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.parent != null && message.hasOwnProperty("parent")) {
            var error = $root.ProtoDocumentElement.verify(message.parent);
            if (error)
                return "parent." + error;
        }
        if (message.base != null && message.hasOwnProperty("base")) {
            var error = $root.ProtoBaseInputField.verify(message.base);
            if (error)
                return "base." + error;
        }
        if (message.options != null && message.hasOwnProperty("options")) {
            if (!Array.isArray(message.options))
                return "options: array expected";
            for (var i = 0; i < message.options.length; ++i) {
                var error = $root.ProtoOption.verify(message.options[i]);
                if (error)
                    return "options." + error;
            }
        }
        if (message.bindOptionsCode != null && message.hasOwnProperty("bindOptionsCode"))
            if (typeof message.bindOptionsCode !== "boolean")
                return "bindOptionsCode: boolean expected";
        if (message.optionsCode != null && message.hasOwnProperty("optionsCode"))
            if (!$util.isString(message.optionsCode))
                return "optionsCode: string expected";
        if (message.comChannelUUIDs != null && message.hasOwnProperty("comChannelUUIDs")) {
            if (!Array.isArray(message.comChannelUUIDs))
                return "comChannelUUIDs: array expected";
            for (var i = 0; i < message.comChannelUUIDs.length; ++i)
                if (!$util.isString(message.comChannelUUIDs[i]))
                    return "comChannelUUIDs: string[] expected";
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        return null;
    };

    /**
     * Creates a ProtoInputFieldDropdown message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProtoInputFieldDropdown} ProtoInputFieldDropdown
     */
    ProtoInputFieldDropdown.fromObject = function fromObject(object) {
        if (object instanceof $root.ProtoInputFieldDropdown)
            return object;
        var message = new $root.ProtoInputFieldDropdown();
        if (object.parent != null) {
            if (typeof object.parent !== "object")
                throw TypeError(".ProtoInputFieldDropdown.parent: object expected");
            message.parent = $root.ProtoDocumentElement.fromObject(object.parent);
        }
        if (object.base != null) {
            if (typeof object.base !== "object")
                throw TypeError(".ProtoInputFieldDropdown.base: object expected");
            message.base = $root.ProtoBaseInputField.fromObject(object.base);
        }
        if (object.options) {
            if (!Array.isArray(object.options))
                throw TypeError(".ProtoInputFieldDropdown.options: array expected");
            message.options = [];
            for (var i = 0; i < object.options.length; ++i) {
                if (typeof object.options[i] !== "object")
                    throw TypeError(".ProtoInputFieldDropdown.options: object expected");
                message.options[i] = $root.ProtoOption.fromObject(object.options[i]);
            }
        }
        if (object.bindOptionsCode != null)
            message.bindOptionsCode = Boolean(object.bindOptionsCode);
        if (object.optionsCode != null)
            message.optionsCode = String(object.optionsCode);
        if (object.comChannelUUIDs) {
            if (!Array.isArray(object.comChannelUUIDs))
                throw TypeError(".ProtoInputFieldDropdown.comChannelUUIDs: array expected");
            message.comChannelUUIDs = [];
            for (var i = 0; i < object.comChannelUUIDs.length; ++i)
                message.comChannelUUIDs[i] = String(object.comChannelUUIDs[i]);
        }
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        return message;
    };

    /**
     * Creates a plain object from a ProtoInputFieldDropdown message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {ProtoInputFieldDropdown} message ProtoInputFieldDropdown
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProtoInputFieldDropdown.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.options = [];
            object.comChannelUUIDs = [];
        }
        if (options.defaults) {
            object.parent = null;
            object.base = null;
            object.bindOptionsCode = false;
            object.optionsCode = "";
            object.uuid = "";
        }
        if (message.parent != null && message.hasOwnProperty("parent"))
            object.parent = $root.ProtoDocumentElement.toObject(message.parent, options);
        if (message.base != null && message.hasOwnProperty("base"))
            object.base = $root.ProtoBaseInputField.toObject(message.base, options);
        if (message.options && message.options.length) {
            object.options = [];
            for (var j = 0; j < message.options.length; ++j)
                object.options[j] = $root.ProtoOption.toObject(message.options[j], options);
        }
        if (message.bindOptionsCode != null && message.hasOwnProperty("bindOptionsCode"))
            object.bindOptionsCode = message.bindOptionsCode;
        if (message.optionsCode != null && message.hasOwnProperty("optionsCode"))
            object.optionsCode = message.optionsCode;
        if (message.comChannelUUIDs && message.comChannelUUIDs.length) {
            object.comChannelUUIDs = [];
            for (var j = 0; j < message.comChannelUUIDs.length; ++j)
                object.comChannelUUIDs[j] = message.comChannelUUIDs[j];
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        return object;
    };

    /**
     * Converts this ProtoInputFieldDropdown to JSON.
     * @function toJSON
     * @memberof ProtoInputFieldDropdown
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProtoInputFieldDropdown.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ProtoInputFieldDropdown
     * @function getTypeUrl
     * @memberof ProtoInputFieldDropdown
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ProtoInputFieldDropdown.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ProtoInputFieldDropdown";
    };

    return ProtoInputFieldDropdown;
})();

module.exports = $root;
